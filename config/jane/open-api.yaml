openapi: 3.0.1
info:
  title: InsightVM API
  description: |-
    # Overview

    This guide documents the InsightVM Application Programming Interface (API) Version 3. This API supports the
    Representation State Transfer (REST) design pattern. Unless noted otherwise this API accepts and produces the
    `application/json` media type. This API uses Hypermedia as the Engine of Application State (HATEOAS) and
    is hypermedia friendly. All API connections must be made to the security console using HTTPS.

    ## Versioning

    Versioning is specified in the URL and the base path of this API is: `https://<host>:<port>/api/3/`.

    ## Specification

    An <a target="_blank" href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md">OpenAPI v2</a> specification (also
    known as Swagger 2) of this API is available. Tools such as <a target="_blank" href="https://github.com/swagger-api/swagger-codegen">swagger-codegen</a>
    can be used to generate an API client in the language of your choosing using this specification document.

    <p class="openapi">Download the specification: <a class="openapi-button" target="_blank" download="" href="api.json"> Download </a></p>

    ## Authentication

    Authorization to the API uses HTTP Basic Authorization
    (see <a target="_blank" href="https://www.ietf.org/rfc/rfc2617.txt">RFC 2617</a> for more information). Requests must
    supply authorization credentials in the `Authorization` header using a Base64 encoded hash of `"username:password"`.

    <!-- ReDoc-Inject: <security-definitions> -->

    ### 2FA

    This API supports two-factor authentication (2FA) by supplying an authentication token in addition to the Basic
    Authorization. The token is specified using the `Token` request header. To leverage two-factor authentication, this
    must be enabled on the console and be configured for the account accessing the API.

    ## Resources

    ### Naming

    Resource names represent nouns and identify the entity being manipulated or accessed. All collection resources are
    pluralized to indicate to the client they are interacting with a collection of multiple resources of the same type.
    Singular resource names are used when there exists only one resource available to interact with.

    The following naming conventions are used by this API:

    | Type                                          | Case                     |
    | --------------------------------------------- | ------------------------ |
    | Resource names                                | `lower_snake_case`       |
    | Header, body, and query parameters parameters | `camelCase`              |
    | JSON fields and property names                | `camelCase`              |

    #### Collections

    A collection resource is a parent resource for instance resources, but can itself be retrieved and operated on
    independently. Collection resources use a pluralized resource name. The resource path for collection resources follow
    the convention:

    ```
    /api/3/{resource_name}
    ```

    #### Instances

    An instance resource is a "leaf" level resource that may be retrieved, optionally nested within a collection resource.
    Instance resources are usually retrievable with opaque identifiers. The resource path for instance resources follows
    the convention:

    ```
    /api/3/{resource_name}/{instance_id}...
    ```

    ## Verbs

    The following HTTP operations are supported throughout this API. The general usage of the operation and both
    its failure and success status codes are outlined below.

    | Verb      | Usage                                                                                 | Success     | Failure                                                        |
    | --------- | ------------------------------------------------------------------------------------- | ----------- | -------------------------------------------------------------- |
    | `GET`     | Used to retrieve a resource by identifier, or a collection of resources by type.      | `200`       | `400`, `401`, `402`, `404`, `405`, `408`, `410`, `415`, `500`  |
    | `POST`    | Creates a resource with an application-specified identifier.                          | `201`       | `400`, `401`, `404`, `405`, `408`, `413`, `415`, `500`         |
    | `POST`    | Performs a request to queue an asynchronous job.                                      | `202`       | `400`, `401`, `405`, `408`, `410`, `413`, `415`, `500`         |
    | `PUT`     | Creates a resource with a client-specified identifier.                                | `200`       | `400`, `401`, `403`, `405`, `408`, `410`, `413`, `415`, `500`  |
    | `PUT`     | Performs a full update of a resource with a specified identifier.                     | `201`       | `400`, `401`, `403`, `405`, `408`, `410`, `413`, `415`, `500`  |
    | `DELETE`  | Deletes a resource by identifier or an entire collection of resources.                | `204`       | `400`, `401`, `405`, `408`, `410`, `413`, `415`, `500`         |
    | `OPTIONS` | Requests what operations are available on a resource.                                 | `200`       | `401`, `404`, `405`, `408`, `500`                              |

    ### Common Operations

    #### OPTIONS

    All resources respond to the `OPTIONS` request, which allows discoverability of available operations that are supported.
    The `OPTIONS` response returns the acceptable HTTP operations on that resource within the `Allow` header. The response
    is always a `200 OK` status.

    ### Collection Resources

    Collection resources can support the `GET`, `POST`, `PUT`, and `DELETE` operations.

    #### GET

    The `GET` operation invoked on a collection resource indicates a request to retrieve all, or some, of the entities
    contained within the collection. This also includes the optional capability to filter or search resources during
    the request. The response from a collection listing is a paginated document. See
    [hypermedia links](#section/Overview/Paging) for more information.

    #### POST

    The `POST` is a non-idempotent operation that allows for the creation of a new resource when the resource identifier
    is not provided by the system during the creation operation (i.e. the Security Console generates the identifier). The
    content of the `POST` request is sent in the request body. The response to a successful `POST` request should be a
    `201 CREATED` with a valid `Location` header field set to the URI that can be used to access to the newly
    created resource.

    The `POST` to a collection resource can also be used to interact with asynchronous resources. In this situation,
    instead of a `201 CREATED` response, the `202 ACCEPTED` response indicates that processing of the request is not fully
    complete but has been accepted for future processing. This request will respond similarly with a `Location` header with
    link to the job-oriented asynchronous resource that was created and/or queued.

    #### PUT

    The `PUT` is an idempotent operation that either performs a create with user-supplied identity, or a full replace
    or update of a resource by a known identifier. The response to a `PUT` operation to create an entity is a `201 Created`
    with a valid `Location` header field set to the URI that can be used to access to the newly created resource.

    `PUT` on a collection resource replaces all values in the collection. The typical response to a `PUT` operation that
    updates an entity is hypermedia links, which may link to related resources caused by the side-effects of the changes
    performed.

    #### DELETE

    The `DELETE` is an idempotent operation that physically deletes a resource, or removes an association between resources.
    The typical response to a `DELETE` operation is hypermedia links, which may link to related resources caused by the
    side-effects of the changes performed.

    ### Instance Resources

    Instance resources can support the `GET`, `PUT`, `POST`, `PATCH` and `DELETE` operations.

    #### GET

    Retrieves the details of a specific resource by its identifier. The details retrieved can be controlled through
    property selection and property views. The content of the resource is returned within the body of the response in the
    acceptable media type.

    #### PUT

    Allows for and idempotent "full update" (complete replacement) on a specific resource. If the resource does not exist,
    it will be created; if it does exist, it is completely overwritten. Any omitted properties in the request are assumed to
    be undefined/null. For "partial updates" use `POST` or `PATCH` instead.

    The content of the `PUT` request is sent in the request body. The identifier of the resource is specified within the URL
    (not the request body). The response to a successful `PUT` request is a `201 CREATED` to represent the created status,
    with a valid `Location` header field set to the URI that can be used to access to the newly created (or fully replaced)
    resource.

    #### POST

    Performs a non-idempotent creation of a new resource. The `POST` of an instance resource most commonly occurs with the
    use of nested resources (e.g. searching on a parent collection resource). The response to a `POST` of an instance
    resource is typically a `200 OK` if the resource is non-persistent, and a `201 CREATED` if there is a resource
    created/persisted as a result of the operation. This varies by endpoint.

    #### PATCH

    The `PATCH` operation is used to perform a partial update of a resource. `PATCH` is a non-idempotent operation that
    enforces an atomic mutation of a resource. Only the properties specified in the request are to be overwritten on the
    resource it is applied to. If a property is missing, it is assumed to not have changed.

    #### DELETE

    Permanently removes the individual resource from the system. If the resource is an association between resources, only
    the association is removed, not the resources themselves. A successful deletion of the resource should return
    `204 NO CONTENT` with no response body. This operation is not fully idempotent, as follow-up requests to delete a
    non-existent resource should return a `404 NOT FOUND`.

    ## Requests

    Unless otherwise indicated, the default request body media type is `application/json`.

    ### Headers

    Commonly used request headers include:

    | Header             | Example                                       | Purpose                                                                                        |
    | ------------------ | --------------------------------------------- | ---------------------------------------------------------------------------------------------- |
    | `Accept`           | `application/json`                            | Defines what acceptable content types are allowed by the client. For all types, use `*/*`.     |
    | `Accept-Encoding`  | `deflate, gzip`                               | Allows for the encoding to be specified (such as gzip).                                        |
    | `Accept-Language`  | `en-US`                                       | Indicates to the server the client's locale (defaults `en-US`).                                |
    | `Authorization `   | `Basic Base64("username:password")`           | Basic authentication                                                                           |
    | `Token `           | `123456`                                      | Two-factor authentication token (if enabled)                                                   |

    ### Dates & Times

    Dates and/or times are specified as strings in the ISO 8601 format(s). The following formats are supported as input:

    | Value                       | Format                                                 | Notes                                                 |
    | --------------------------- | ------------------------------------------------------ | ----------------------------------------------------- |
    | Date                        | YYYY-MM-DD                                             | Defaults to 12 am UTC (if used for a date & time      |
    | Date & time only            | YYYY-MM-DD'T'hh:mm:ss[.nnn]                            | Defaults to UTC                                       |
    | Date & time in UTC          | YYYY-MM-DD'T'hh:mm:ss[.nnn]Z                           |                                                       |
    | Date & time w/ offset       | YYYY-MM-DD'T'hh:mm:ss[.nnn][+&#124;-]hh:mm             |                                                       |
    | Date & time w/ zone-offset  | YYYY-MM-DD'T'hh:mm:ss[.nnn][+&#124;-]hh:mm[<zone-id>]  |                                                       |

    ### Timezones

    Timezones are specified in the regional zone format, such as `"America/Los_Angeles"`, `"Asia/Tokyo"`, or `"GMT"`.

    ### Paging

    Pagination is supported on certain collection resources using a combination of two query parameters, `page` and `size`.
    As these are control parameters, they are prefixed with the underscore character. The page parameter dictates the
    zero-based index of the page to retrieve, and the `size` indicates the size of the page.

    For example, `/resources?page=2&size=10` will return page 3, with 10 records per page, giving results 21-30.

    The maximum page size for a request is 500.

    ### Sorting

    Sorting is supported on paginated resources with the `sort` query parameter(s). The sort query parameter(s) supports
    identifying a single or multi-property sort with a single or multi-direction output. The format of the parameter is:

    ```
    sort=property[,ASC|DESC]...
    ```

    Therefore, the request `/resources?sort=name,title,DESC` would return the results sorted by the name and title
    descending, in that order. The sort directions are either ascending `ASC` or descending `DESC`. With single-order
    sorting, all properties are sorted in the same direction. To sort the results with varying orders by property,
     multiple sort parameters are passed.

    For example, the request `/resources?sort=name,ASC&sort=title,DESC` would sort by name ascending and title
    descending, in that order.

    ## Responses

    The following response statuses may be returned by this API.

    | Status | Meaning                  | Usage                                                                                                                                                                    |
    | ------ | ------------------------ |------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
    | `200`  | OK                       | The operation performed without error according to the specification of the request, and no more specific 2xx code is suitable.                                          |
    | `201`  | Created                  | A create request has been fulfilled and a resource has been created. The resource is available as the URI specified in the response, including the `Location` header.    |
    | `202`  | Accepted                 | An asynchronous task has been accepted, but not guaranteed, to be processed in the future.                                                                               |
    | `400`  | Bad Request              | The request was invalid or cannot be otherwise served. The request is not likely to succeed in the future without modifications.                                         |
    | `401`  | Unauthorized             | The user is unauthorized to perform the operation requested, or does not maintain permissions to perform the operation on the resource specified.                        |
    | `403`  | Forbidden                | The resource exists to which the user has access, but the operating requested is not permitted.                                                                          |
    | `404`  | Not Found                | The resource specified could not be located, does not exist, or an unauthenticated client does not have permissions to a resource.                                       |
    | `405`  | Method Not Allowed       | The operations may not be performed on the specific resource. Allowed operations are returned and may be performed on the resource.                                      |
    | `408`  | Request Timeout          | The client has failed to complete a request in a timely manner and the request has been discarded.                                                                       |
    | `413`  | Request Entity Too Large | The request being provided is too large for the server to accept processing.                                                                                             |
    | `415`  | Unsupported Media Type   | The media type is not supported for the requested resource.                                                                                                              |
    | `500`  | Internal Server Error    | An internal and unexpected error has occurred on the server at no fault of the client.                                                                                   |

    ### Security

    The response statuses 401, 403 and 404 need special consideration for security purposes. As necessary,
    error statuses and messages may be obscured to strengthen security and prevent information exposure. The following is a
    guideline for privileged resource response statuses:

    | Use Case                                                           | Access             | Resource           | Permission   | Status       |
    | ------------------------------------------------------------------ | ------------------ |------------------- | ------------ | ------------ |
    | Unauthenticated access to an unauthenticated resource.             | Unauthenticated    | Unauthenticated    | Yes          | `20x`        |
    | Unauthenticated access to an authenticated resource.               | Unauthenticated    | Authenticated      | No           | `401`        |
    | Unauthenticated access to an authenticated resource.               | Unauthenticated    | Non-existent       | No           | `401`        |
    | Authenticated access to a unauthenticated resource.                | Authenticated      | Unauthenticated    | Yes          | `20x`        |
    | Authenticated access to an authenticated, unprivileged resource.   | Authenticated      | Authenticated      | No           | `404`        |
    | Authenticated access to an authenticated, privileged resource.     | Authenticated      | Authenticated      | Yes          | `20x`        |
    | Authenticated access to an authenticated, non-existent resource    | Authenticated      | Non-existent       | Yes          | `404`        |

    ### Headers

    Commonly used response headers include:

    | Header                     |  Example                          | Purpose                                                         |
    | -------------------------- | --------------------------------- | --------------------------------------------------------------- |
    | `Allow`                    | `OPTIONS, GET`                    | Defines the allowable HTTP operations on a resource.            |
    | `Cache-Control`            | `no-store, must-revalidate`       | Disables caching of resources (as they are all dynamic).        |
    | `Content-Encoding`         | `gzip`                            | The encoding of the response body (if any).                     |
    | `Location`                 |                                   | Refers to the URI of the resource created by a request.         |
    | `Transfer-Encoding`        | `chunked`                         | Specified the encoding used to transform response.              |
    | `Retry-After`              | 5000                              | Indicates the time to wait before retrying a request.           |
    | `X-Content-Type-Options`   | `nosniff`                         | Disables MIME type sniffing.                                    |
    | `X-XSS-Protection`         | `1; mode=block`                   | Enables XSS filter protection.                                  |
    | `X-Frame-Options`          | `SAMEORIGIN`                      | Prevents rendering in a frame from a different origin.          |
    | `X-UA-Compatible`          | `IE=edge,chrome=1`                | Specifies the browser mode to render in.                        |

    ### Format

    When `application/json` is returned in the response body it is always pretty-printed (indented, human readable output).
    Additionally, gzip compression/encoding is supported on all responses.

    #### Dates & Times

    Dates or times are returned as strings in the ISO 8601 'extended' format. When a date and time is returned (instant) the value is converted to UTC.

    For example:

    | Value           | Format                         | Example               |
    | --------------- | ------------------------------ | --------------------- |
    | Date            | `YYYY-MM-DD`                   | 2017-12-03            |
    | Date & Time     | `YYYY-MM-DD'T'hh:mm:ss[.nnn]Z` | 2017-12-03T10:15:30Z  |

    #### Content

    In some resources a Content data type is used. This allows for multiple formats of representation to be returned
    within resource, specifically `"html"` and `"text"`. The `"text"` property returns a flattened representation suitable
    for output in textual displays. The `"html"` property returns an HTML fragment suitable for display within an HTML
    element. Note, the HTML returned is not a valid stand-alone HTML document.

    #### Paging

    The response to a paginated request follows the format:

    ```json
    {
       resources": [
          ...
       ],
       "page": {
          "number" : ...,
          "size" : ...,
          "totalResources" : ...,
          "totalPages" : ...
       },
       "links": [
          "first" : {
             "href" : "..."
           },
           "prev" : {
             "href" : "..."
           },
           "self" : {
             "href" : "..."
           },
           "next" : {
             "href" : "..."
           },
           "last" : {
             "href" : "..."
           }
       ]
    }
    ```

    The `resources` property is an array of the resources being retrieved from the endpoint, each which should contain at
    minimum a "self" relation hypermedia link. The `page` property outlines the details of the current page and total
    possible pages. The object for the page includes the following properties:

    - number - The page number (zero-based) of the page returned.
    - size - The size of the pages, which is less than or equal to the maximum page size.
    - totalResources - The total amount of resources available across all pages.
    - totalPages - The total amount of pages.

    The last property of the paged response is the `links` array, which contains all available hypermedia links. For
    paginated responses, the "self", "next", "previous", "first", and "last" links are returned. The "self" link must
    always be returned and should contain a link to allow the client to replicate the original request against the
    collection resource in an identical manner to that in which it was invoked.

    The "next" and "previous" links are present if either or both there exists a previous or next page, respectively.
    The "next" and "previous" links have hrefs that allow "natural movement" to the next page, that is all parameters
    required to move the next page are provided in the link. The "first" and "last" links provide references to the first
    and last pages respectively.

    Requests outside the boundaries of the pageable will result in a `404 NOT FOUND`. Paginated requests do not provide a
    "stateful cursor" to the client, nor does it need to provide a read consistent view. Records in adjacent pages may
    change while pagination is being traversed, and the total number of pages and resources may change between requests
    within the same filtered/queries resource collection.

    #### Property Views

    The "depth" of the response of a resource can be configured using a "view". All endpoints supports two views that can
    tune the extent of the information returned in the resource. The supported views are `summary` and `details` (the default).
    View are specified using a query parameter, in this format:

    ```bash
    /<resource>?view={viewName}
    ```

    #### Error

    Any error responses can provide a response body with a message to the client indicating more information (if applicable)
    to aid debugging of the error. All 40x and 50x responses will return an error response in the body. The format of the
    response is as follows:

    ```json
    {
       "status": <statusCode>,
       "message": <message>,
       "links" : [ {
          "rel" : "...",
          "href" : "..."
        } ]
    }
     ```

    The `status` property is the same as the HTTP status returned in the response, to ease client parsing. The message
    property is a localized message in the request client's locale (if applicable) that articulates the nature of the
    error. The last property is the `links` property. This may contain additional
    [hypermedia links](#section/Overview/Authentication) to troubleshoot.

    #### Search Criteria <a section="section/Responses/SearchCriteria"></a>

    Multiple resources make use of search criteria to match assets. Search criteria is an array of search filters. Each
    search filter has a generic format of:

    ```json
    {
       "field": "<field-name>",
       "operator": "<operator>",
       ["value": "<value>",]
       ["lower": "<value>",]
       ["upper": "<value>"]
    }

    ```

    Every filter defines two required properties `field` and `operator`. The field is the name of an asset property that
    is being filtered on. The operator is a type and property-specific operating performed on the filtered property. The
    valid values for fields and operators are outlined in the table below.

    Every filter also defines one or more values that are supplied to the operator. The valid values vary by operator
    and are outlined below.

    ##### Fields

    The following table outlines the search criteria fields and the available operators:

    | Field                             | Operators                                                                                                                      |
    | --------------------------------- | ------------------------------------------------------------------------------------------------------------------------------ |
    | `alternate-address-type`          | `in`                                                                                                                           |
    | `container-image`                 | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain` ` is like` ` not like`                              |
    | `container-status`                | `is` ` is not`                                                                                                                 |
    | `containers`                      | `are`                                                                                                                          |
    | `criticality-tag`                 | `is` ` is not` ` is greater than` ` is less than` ` is applied` ` is not applied`                                              |
    | `custom-tag`                      | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain` ` is applied` ` is not applied`                     |
    | `cve`                             | `is` ` is not` ` contains` ` does not contain`                                                                                 |
    | `cvss-access-complexity`          | `is` ` is not`                                                                                                                 |
    | `cvss-authentication-required`    | `is` ` is not`                                                                                                                 |
    | `cvss-access-vector`              | `is` ` is not`                                                                                                                 |
    | `cvss-availability-impact`        | `is` ` is not`                                                                                                                 |
    | `cvss-confidentiality-impact`     | `is` ` is not`                                                                                                                 |
    | `cvss-integrity-impact`           | `is` ` is not`                                                                                                                 |
    | `cvss-v3-confidentiality-impact`  | `is` ` is not`                                                                                                                 |
    | `cvss-v3-integrity-impact`        | `is` ` is not`                                                                                                                 |
    | `cvss-v3-availability-impact`     | `is` ` is not`                                                                                                                 |
    | `cvss-v3-attack-vector`           | `is` ` is not`                                                                                                                 |
    | `cvss-v3-attack-complexity`       | `is` ` is not`                                                                                                                 |
    | `cvss-v3-user-interaction`        | `is` ` is not`                                                                                                                 |
    | `cvss-v3-privileges-required`     | `is` ` is not`                                                                                                                 |
    | `host-name`                       | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain` ` is empty` ` is not empty` ` is like` ` not like`  |
    | `host-type`                       | `in` ` not in`                                                                                                                 |
    | `ip-address`                      | `is` ` is not` ` in range` ` not in range` ` is like` ` not like`                                                              |
    | `ip-address-type`                 | `in` ` not in`                                                                                                                 |
    | `last-scan-date`                  | `is-on-or-before` ` is on or after` ` is between` ` is earlier than` ` is within the last`                                     |
    | `location-tag`                    | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain` ` is applied` ` is not applied`                     |
    | `mobile-device-last-sync-time`    | `is-within-the-last` ` is earlier than`                                                                                        |
    | `open-ports`                      | `is` ` is not` ` in range`                                                                                                     |
    | `operating-system`                | `contains` ` does not contain` ` is empty` ` is not empty`                                                                     |
    | `owner-tag`                       | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain` ` is applied` ` is not applied`                     |
    | `pci-compliance`                  | `is`                                                                                                                           |
    | `risk-score`                      | `is` ` is not` ` in range` ` greater than` ` less than`                                                                        |
    | `service-name`                    | `contains` ` does not contain`                                                                                                 |
    | `site-id`                         | `in` ` not in`                                                                                                                 |
    | `software`                        | `contains` ` does not contain`                                                                                                 |
    | `vAsset-cluster`                  | `is` ` is not` ` contains` ` does not contain` ` starts with`                                                                  |
    | `vAsset-datacenter`               | `is` ` is not`                                                                                                                 |
    | `vAsset-host-name`                | `is` ` is not` ` contains` ` does not contain` ` starts with`                                                                  |
    | `vAsset-power-state`              | `in` ` not in`                                                                                                                 |
    | `vAsset-resource-pool-path`       | `contains` ` does not contain`                                                                                                 |
    | `vulnerability-assessed`          | `is-on-or-before` ` is on or after` ` is between` ` is earlier than` ` is within the last`                                     |
    | `vulnerability-category`          | `is` ` is not` ` starts with` ` ends with` ` contains` ` does not contain`                                                     |
    | `vulnerability-cvss-v3-score`     | `is` ` is not`                                                                                                                 |
    | `vulnerability-cvss-score`        | `is` ` is not` ` in range` ` is greater than` ` is less than`                                                                  |
    | `vulnerability-exposures`         | `includes` ` does not include`                                                                                                 |
    | `vulnerability-title`             | `contains` ` does not contain` ` is` ` is not` ` starts with` ` ends with`                                                     |
    | `vulnerability-validated-status`  | `are`                                                                                                                          |

    ##### Enumerated Properties

    The following fields have enumerated values:

    | Field                                     | Acceptable Values                                                                                             |
    | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------- |
    | `alternate-address-type`                  | 0=IPv4, 1=IPv6                                                                                                |
    | `containers`                              | 0=present, 1=not present                                                                                      |
    | `container-status`                        | `created` `running` `paused` `restarting` `exited` `dead` `unknown`                                           |
    | `cvss-access-complexity`                  | <ul><li><code>L</code> = Low</li><li><code>M</code> = Medium</li><li><code>H</code> = High</li></ul>          |
    | `cvss-integrity-impact`                   | <ul><li><code>N</code> = None</li><li><code>P</code> = Partial</li><li><code>C</code> = Complete</li></ul>    |
    | `cvss-confidentiality-impact`             | <ul><li><code>N</code> = None</li><li><code>P</code> = Partial</li><li><code>C</code> = Complete</li></ul>    |
    | `cvss-availability-impact`                | <ul><li><code>N</code> = None</li><li><code>P</code> = Partial</li><li><code>C</code> = Complete</li></ul>    |
    | `cvss-access-vector`                      | <ul><li><code>L</code> = Local</li><li><code>A</code> = Adjacent</li><li><code>N</code> = Network</li></ul>   |
    | `cvss-authentication-required`            | <ul><li><code>N</code> = None</li><li><code>S</code> = Single</li><li><code>M</code> = Multiple</li></ul>     |
    | `cvss-v3-confidentiality-impact`     | <ul><li><code>L</code> = Local</li><li><code>L</code> = Low</li><li><code>N</code> = None</li><li><code>H</code> = High</li></ul>          |
    | `cvss-v3-integrity-impact`            | <ul><li><code>L</code> = Local</li><li><code>L</code> = Low</li><li><code>N</code> = None</li><li><code>H</code> = High</li></ul>          |
    | `cvss-v3-availability-impact`             | <ul><li><code>N</code> = None</li><li><code>L</code> = Low</li><li><code>H</code> = High</li></ul>    |
    | `cvss-v3-attack-vector`                | <ul><li><code>N</code> = Network</li><li><code>A</code> = Adjacent</li><li><code>L</code> = Local</li><li><code>P</code> = Physical</li></ul>    |
    | `cvss-v3-attack-complexity`                      | <ul><li><code>L</code> = Low</li><li><code>H</code> = High</li></ul>   |
    | `cvss-v3-user-interaction`            | <ul><li><code>N</code> = None</li><li><code>R</code> = Required</li></ul>     |
    | `cvss-v3-privileges-required`         | <ul><li><code>N</code> = None</li><li><code>L</code> = Low</li><li><code>H</code> = High</li></ul>    |
    | `host-type`                               | 0=Unknown, 1=Guest, 2=Hypervisor, 3=Physical, 4=Mobile                                                        |
    | `ip-address-type`                         | 0=IPv4, 1=IPv6                                                                                                |
    | `pci-compliance`                          | 0=fail, 1=pass                                                                                                |
    | `vulnerability-validated-status`          | 0=present, 1=not present                                                                                      |

    ##### Operator Properties <a section="section/Responses/SearchCriteria/OperatorProperties"></a>

    The following table outlines which properties are required for each operator and the appropriate data type(s):

    | Operator              | `value`               | `lower`               | `upper`               |
    | ----------------------|-----------------------|-----------------------|-----------------------|
    | `are`                 | `string`              |                       |                       |
    | `contains`            | `string`              |                       |                       |
    | `does-not-contain`    | `string`              |                       |                       |
    | `ends with`           | `string`              |                       |                       |
    | `in`                  | `Array[ string ]`     |                       |                       |
    | `in-range`            |                       | `numeric`             | `numeric`             |
    | `includes`            | `Array[ string ]`     |                       |                       |
    | `is`                  | `string`              |                       |                       |
    | `is-applied`          |                       |                       |                       |
    | `is-between`          |                       | `numeric`             | `numeric`             |
    | `is-earlier-than`     | `numeric`             |                       |                       |
    | `is-empty`            |                       |                       |                       |
    | `is-greater-than`     | `numeric`             |                       |                       |
    | `is-on-or-after`      | `string` (yyyy-MM-dd) |                       |                       |
    | `is-on-or-before`     | `string` (yyyy-MM-dd) |                       |                       |
    | `is-not`              | `string`              |                       |                       |
    | `is-not-applied`      |                       |                       |                       |
    | `is-not-empty`        |                       |                       |                       |
    | `is-within-the-last`  | `string`              |                       |                       |
    | `less-than`           | `string`              |                       |                       |
    | `like`                | `string`              |                       |                       |
    | `not-contains`        | `string`              |                       |                       |
    | `not-in`              | `Array[ string ]`     |                       |                       |
    | `not-in-range`        |                       | `numeric`             | `numeric`             |
    | `not-like`            | `string`              |                       |                       |
    | `starts-with`         | `string`              |                       |                       |

    #### Discovery Connection Search Criteria <a section="section/Responses/DiscoverySearchCriteria"></a>

    Dynamic sites make use of search criteria to match assets from a discovery connection. Search criteria is an array of search filters.

    Each search filter has a generic format of:

    ```json
    {
       "field": "<field-name>",
       "operator": "<operator>",
       ["value": "<value>",]
       ["lower": "<value>",]
       ["upper": "<value>"]
    }

    ```

    Every filter defines two required properties `field` and `operator`. The field is the name of an asset property that
    is being filtered on. The list of supported fields vary depending on the type of discovery connection configured
    for the dynamic site (e.g vSphere, ActiveSync, etc.). The operator is a type and property-specific operating
    performed on the filtered property. The valid values for fields outlined in the tables below and are grouped by the
    type of connection.

    Every filter also defines one or more values that are supplied to the operator. See
    <a href="#section/Responses/SearchCriteria/OperatorProperties">Search Criteria Operator Properties</a> for more
    information on the valid values for each operator.

    ##### Fields (ActiveSync)

    This section documents search criteria information for ActiveSync discovery connections. The discovery connections
    must be one of the following types: `"activesync-ldap"`, `"activesync-office365"`, or `"activesync-powershell"`.

    The following table outlines the search criteria fields and the available operators for ActiveSync connections:

    | Field                             | Operators                                                     |
    | --------------------------------- | ------------------------------------------------------------- |
    | `last-sync-time`                  | `is-within-the-last` ` is-earlier-than`                       |
    | `operating-system`                | `contains` ` does-not-contain`                                |
    | `user`                            | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with` |

    ##### Fields (AWS)

    This section documents search criteria information for AWS discovery connections. The discovery connections must be the type `"aws"`.

    The following table outlines the search criteria fields and the available operators for AWS connections:

    | Field                   | Operators                                                     |
    | ----------------------- | ------------------------------------------------------------- |
    | `availability-zone`     | `contains` ` does-not-contain`                                |
    | `guest-os-family`       | `contains` ` does-not-contain`                                |
    | `instance-id`           | `contains` ` does-not-contain`                                |
    | `instance-name`         | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with` |
    | `instance-state`        | `in` ` not-in`                                                |
    | `instance-type`         | `in` ` not-in`                                                |
    | `ip-address`            | `in-range` ` not-in-range` ` is` ` is-not`                    |
    | `region`                | `in` ` not-in`                                                |
    | `vpc-id`                | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with` |

    ##### Fields (DHCP)

    This section documents search criteria information for DHCP discovery connections. The discovery connections must be the type `"dhcp"`.

    The following table outlines the search criteria fields and the available operators for DHCP connections:

    | Field           | Operators                                                     |
    | --------------- | ------------------------------------------------------------- |
    | `host-name`     | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with` |
    | `ip-address`    | `in-range` ` not-in-range` ` is` ` is-not`                    |
    | `mac-address`   | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with` |

    ##### Fields (Sonar)

    This section documents search criteria information for Sonar discovery connections. The discovery connections must be the type `"sonar"`.

    The following table outlines the search criteria fields and the available operators for Sonar connections:

    | Field               | Operators            |
    | ------------------- | -------------------- |
    | `search-domain`     | `contains` ` is`     |
    | `ip-address`        | `in-range` ` is`     |
    | `sonar-scan-date`   | `is-within-the-last` |

    ##### Fields (vSphere)

    This section documents search criteria information for vSphere discovery connections. The discovery connections must be the type `"vsphere"`.

    The following table outlines the search criteria fields and the available operators for vSphere connections:

    | Field                | Operators                                                                                  |
    | -------------------- | ------------------------------------------------------------------------------------------ |
    | `cluster`            | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with`                              |
    | `data-center`        | `is` ` is-not`                                                                             |
    | `discovered-time`    | `is-on-or-before` ` is-on-or-after` ` is-between` ` is-earlier-than` ` is-within-the-last` |
    | `guest-os-family`    | `contains` ` does-not-contain`                                                             |
    | `host-name`          | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with`                              |
    | `ip-address`         | `in-range` ` not-in-range` ` is` ` is-not`                                                 |
    | `power-state`        | `in` ` not-in`                                                                             |
    | `resource-pool-path` | `contains` ` does-not-contain`                                                             |
    | `last-time-seen`     | `is-on-or-before` ` is-on-or-after` ` is-between` ` is-earlier-than` ` is-within-the-last` |
    | `vm`                 | `is` ` is-not` ` contains` ` does-not-contain` ` starts-with`                              |

    ##### Enumerated Properties (vSphere)

    The following fields have enumerated values:

    | Field         | Acceptable Values                    |
    | ------------- | ------------------------------------ |
    | `power-state` | `poweredOn` `poweredOff` `suspended` |

    ## HATEOAS

    This API follows Hypermedia as the Engine of Application State (HATEOAS) principals and is therefore hypermedia friendly.
    Hyperlinks are returned in the `links` property of any given resource and contain a fully-qualified hyperlink to
    the corresponding resource. The format of the hypermedia link adheres to both the
    <a target="_blank" href="http://jsonapi.org">{json:api} v1</a>
    <a target="_blank" href="http://jsonapi.org/format/#document-links">"Link Object"</a> and
    <a target="_blank" href="http://json-schema.org/latest/json-schema-hypermedia.html">JSON Hyper-Schema</a>
    <a target="_blank" href="http://json-schema.org/latest/json-schema-hypermedia.html#rfc.section.5.2">"Link Description Object"</a>
    formats. For example:

    ```json
    "links": [{
      "rel": "<relation>",
      "href": "<href>"
      ...
    }]
    ```

    Where appropriate link objects may also contain additional properties than the `rel` and `href` properties, such as `id`, `type`, etc.

    See the [Root](#tag/Root) resources for the entry points into API discovery.
  contact:
    name: Rapid7
    email: support@rapid7.com
  version: "3"
servers:
  - url: /
tags:
  - name: Root
    description: Provides access to primary entry point for discovering the available
      resources in this API.
  - name: Asset
    description: Resources and operations for managing assets. Assets can be created
      under the <a href="#operation/createAssetUsingPOST">Site Assets</a> resource.
  - name: Asset Discovery
    description: Resources for managing and viewing the mechanisms used to automatically
      discover assets.
  - name: Asset Group
    description: Asset Group Tag
  - name: Credential
    description: Resources and operations for managing shared credentials.
  - name: Policy
    description: Resources and operations for managing policies.
  - name: Policy Override
    description: Policy Override Resource Controller
  - name: Remediation
    description: Resources for determining the details required to remediate vulnerabilities.
  - name: Report
    description: Resources and operations for managing and generating reports. Reports
      are broadly categorized into `document`, `export`, and `file` types. `document`
      reports use section-based report templates to control the output and can be generated
      in several formats. `export` reports are designed to output their contents into
      a specific file format. `file` reports are templatized reports that output based
      on the format of a template file. Reports can be configured to generate on a schedule
      and be distributed via email to specific recipients.
  - name: Scan
    description: Resources and operations for managing scans.
  - name: Scan Engine
    description: Resources and operations for managing scan engines.
  - name: Scan Template
    description: Scan Template Resource Controller
  - name: Site
    description: Resources and operations for managing sites.
  - name: Tag
    description: Resources and operations for managing tags.
  - name: User
    description: Resources and operations for managing users, permissions, and privileges.
  - name: Vulnerability
    description: Resources and operations for viewing vulnerability content and managing
      exceptions.
  - name: Vulnerability Check
    description: Resources and operations for view vulnerability checks that can be
      run as a part of vulnerability content.
  - name: Vulnerability Exception
    description: Vulnerability Exception Resource Controller
  - name: Vulnerability Result
    description: Resources and operations for retrieving vulnerability results on assessed
      assets.
  - name: Administration
    description: Provides access administrative operations and procedures.
security:
  - Basic: []
paths:
  /api/3:
    get:
      tags:
        - Root
      summary: Resources
      description: Returns a listing of the resources (endpoints) that are available
        to be invoked in this API.
      operationId: resources
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/administration/commands:
    post:
      tags:
        - Administration
      summary: Console Commands
      description: Executes a console command against the Security Console. <span
        class="authorization">Global Administrator</span>
      operationId: executeCommand
      requestBody:
        description: The console command to execute.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsoleCommandOutput'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Show Host Info
          source: show host info
        - lang: Help
          source: help
      x-codegen-request-body-name: param0
  /api/3/administration/info:
    get:
      tags:
        - Administration
      summary: Information
      description: Returns system details, including host and version information.
      operationId: getInfo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Info'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/administration/license:
    get:
      tags:
        - Administration
      summary: License
      description: Returns the enabled features and limits of the current license.
        <span class="authorization">Global Administrator</span>
      operationId: getLicense
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/License'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Administration
      summary: License
      description: Licenses the product with an activation key or a provided license
        file. If both are provided, the license file is preferred. <span class="authorization">Global
        Administrator</span>
      operationId: activateLicense
      parameters:
        - name: key
          in: query
          description: A license activation key.
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                license:
                  type: string
                  description: The contents of a license (.lic) file.
                  format: binary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/administration/properties:
    get:
      tags:
        - Administration
      summary: Properties
      description: Returns system details, including host and version information.
      operationId: getProperties
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentProperties'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/administration/settings:
    get:
      tags:
        - Administration
      summary: Settings
      description: Returns the current administration settings. <span class="authorization">Global
        Administrator</span>
      operationId: getSettings
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups:
    get:
      tags:
        - Asset Group
      summary: Asset Groups
      description: Returns all asset groups.
      operationId: getAssetGroups
      parameters:
        - name: type
          in: query
          description: The type of asset group.
          schema:
            type: string
        - name: name
          in: query
          description: A search pattern for the name of the asset group. Searches are
            case-insensitive contains.
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAssetGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Asset Group
      summary: Asset Groups
      description: |-
        Creates a new asset group. The `searchCriteria` field can be passed no matter what the type of the asset group is. The asset group `type` changes when the assets are refreshed. Dynamic asset groups constantly refreshed their membership as assets are scanned whereas static asset groups do not change membership automatically.
        See the <a href="#section/Responses/SearchCriteria">Search Criteria</a> for more information on using dynamic criteria.
      operationId: createAssetGroup
      requestBody:
        description: The details of the asset group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetGroup'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceAssetGroupIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: An Empty Static Asset Group
          source: |-
            {
                "description": "A Static Asset Group With No Assets. In order to add assets to this group you can POST to the /assets endpoint or PUT to the /assets/{assetID} endpoint.",
                "name": "Empty Static Asset Groups",
                "type": "static"
            }
        - lang: A static asset group with assets defined by search criteria
          source: |-
            {
                "description": "A Static Asset Group with Assets that are Linux Assets running Containers (With Low Access Complexity Vulnerabilities) for remediation purposes.",
                "name": "Container Hosts - Linux",
                "searchCriteria": {
                    "filters": [
                        { "field": "operating-system", "operator": "contains", "value": "linux" },
                        { "field": "containers", "operator": "are", "value": 0 },
                        { "field": "cvss-access-complexity", "operator": "is", "value": "L" }
                    ],
                    "match": "all"
                },
                "type": "static"
            }
        - lang: A dynamic asset group
          source: |-
            {
                "description": "A Static Asset Group with Assets that are Linux Assets running Containers (With Low Access Complexity Vulnerabilities) for remediation purposes.",
                "name": "Container Hosts - Linux",
                "searchCriteria": {
                    "filters": [
                        { "field": "operating-system", "operator": "contains", "value": "linux" },
                        { "field": "containers", "operator": "are", "value": 0 },
                        { "field": "cvss-access-complexity", "operator": "is", "value": "L" }
                    ],
                    "match": "all"
                },
                "type": "dynamic"
            }
      x-codegen-request-body-name: param0
  /api/3/asset_groups/{id}:
    get:
      tags:
        - Asset Group
      summary: Asset Group
      description: Returns an asset group.
      operationId: getAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Group
      summary: Asset Group
      description: Updates the details of an asset group. See the search criteria
        endpoint (/search_criteria) for more information about building the search
        criteria and examples.
      operationId: updateAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the asset group.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetGroup'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Asset Group
      summary: Asset Group
      description: Deletes the asset group.
      operationId: deleteAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups/{id}/assets:
    get:
      tags:
        - Asset Group
      summary: Asset Group Assets
      description: Returns hypermedia links for the assets that belong to an asset
        group.
      operationId: getAssetGroupAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithAssetIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Group
      summary: Asset Group Assets
      description: Updates all the assets that belong to a static asset group.
      operationId: updateAssetGroupAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'The assets to place in the asset group. '
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int64
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Asset Group
      summary: Asset Group Assets
      description: Removes the assets from the given static asset group.
      operationId: removeAllAssetsFromAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups/{id}/assets/{assetId}:
    put:
      tags:
        - Asset Group
      summary: Asset Group Asset
      description: Adds an asset to a static asset group.
      operationId: addAssetToAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Asset Group
      summary: Asset Group Asset
      description: Removes an asset from an asset group.
      operationId: removeAssetFromAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups/{id}/search_criteria:
    get:
      tags:
        - Asset Group
      summary: Asset Group Search Criteria
      description: Returns the search criteria of a dynamic asset group.For a reference
        of valid search criteria input see the <a href="#operation/getAssetsSearchUsingPOST">Asset
        Search</a> resource.
      operationId: getAssetGroupSearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCriteria'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Group
      summary: Asset Group Search Criteria
      description: Updates the search criteria of a dynamic asset group. For a reference
        of valid search criteria input see the <a href="#operation/getAssetsSearchUsingPOST">Asset
        Search</a> resource.
      operationId: setAssetGroupSearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The search criteria specification.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteria'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Unassigned PCI Incompliant Windows Assets
          source: |-
            {
               "description": "This is an asset group that contains assets that have not been recently scanned in our Los Angeles Datacenter that are also high risk.",
               "name": "Stale Los Angeles Assets (High Risk)",
               "type": "dynamic",
               "searchCriteria": {
                  "match": "all",
                  "filters": [
                     { "field": "location-tag", "operator": "contains", "value": "Los Angeles Datacenter" },
                     { "field": "risk-score", "operator": "is-greater-than", "value": 5000 },
                     { "field": "last-scan-date", "operator": "is-on-or-before", "value": "2016-12-31" }
                  ]
               }
            }
        - lang: Stale Los Angeles Assets (High Risk)
          source: |-
            {
               "description": "This is an asset group that contains Windows Assets that are not PCI compliant and not assigned to an owner.",
               "name": "Unassigned PCI Incompliant Windows Assets",
               "type": "dynamic",
               "searchCriteria": {
                  "match": "all",
                  "filters": [
                     { "field": "pci-compliance", "operator": "is", "value": "0" },
                     { "field": "owner-tag", "operator": "is-not-applied" },
                     { "field": "operating-system", "operator": "contains", "value": "windows" }
                  ]
               }
            }
      x-codegen-request-body-name: param1
  /api/3/asset_groups/{id}/tags:
    get:
      tags:
        - Asset Group
      summary: Asset Group Tags
      description: Returns the tags assigned to an asset group.
      operationId: getAssetGroupTags
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithTagIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Group
      summary: Asset Group Tags
      description: Updates the tags of an asset group.
      operationId: setAssetGroupTags
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The tags to associate to the asset group.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Asset Group
      summary: Asset Group Tags
      description: Removes all tag associations from the asset group.
      operationId: removeAllAssetGroupTags
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups/{id}/tags/{tagId}:
    put:
      tags:
        - Asset Group
      summary: Asset Group Tag
      description: Adds a tag to an asset group.
      operationId: addAssetGroupTag
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Asset Group
      summary: Asset Group Tag
      description: Removes a tag from an asset group.
      operationId: removeAssetGroupTag
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/asset_groups/{id}/users:
    get:
      tags:
        - Asset Group
      summary: Asset Group Users
      description: Returns hypermedia links for the users with access to this asset
        group.
      operationId: getAssetGroupUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithUserIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Group
      summary: Asset Group Users
      description: Grants users with sufficient privileges access to an asset group.
      operationId: setAssetGroupUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The users to grant access to the asset group.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/asset_groups/{id}/users/{userId}:
    put:
      tags:
        - Asset Group
      summary: Asset Group User
      description: Grants a user with sufficient privileges access to the asset group.
      operationId: addAssetGroupUser
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Asset Group
      summary: Asset Group User
      description: Removes a user's access from an asset group.
      operationId: removeAssetGroupUser
      parameters:
        - name: id
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets:
    get:
      tags:
        - Asset
      summary: Assets
      description: Returns all assets for which you have access.
      operationId: getAssets
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/assets:
    get:
      tags:
        - Site
      summary: Site Assets
      description: Retrieves a paged resource of assets linked with the specified
        site.
      operationId: getSiteAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Asset
      summary: Assets
      description: Creates or updates an asset with the specified details.
      operationId: createAsset
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: |-
          The details of the asset being added or updated.
          The operating system can be specified in one of three ways, with the order of precedence: `"osFingerprint"`, `"os"`, `"cpe"`
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetCreate'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReference'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedOrUpdatedReference'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Site
      summary: Site Assets
      description: Removes all assets from the specified site. Assets will be deleted
        entirely from the Security Console if either Asset Linking is disabled or
        if Asset Linking is enabled and the asset only existed in this site.
      operationId: removeSiteAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/search:
    post:
      tags:
        - Asset
      summary: Asset Search
      description: Returns all assets for which you have access that match the given
        search criteria.
      operationId: findAssets
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: param1
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteria'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAsset'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Assets Running SSH
          source: |-
            {
              "match": "all",
              "filters": [
                 { "field": "service-name", "operator": "contains", "value": "ssh"}
              ]
            }
        - lang: High Risk Windows Assets Running SSH
          source: |-
            {
              "match": "all",
              "filters": [
                 { "field": "risk-score", "operator": "is-greater-than", "value": 5000 },
                 { "field": "operating-system", "operator": "contains", "value": "windows" },
                 { "field": "service-name", "operator": "contains", "value": "ssh" }
              ]
            }
        - lang: Windows 10 Assets
          source: |-
            {
              "match": "all",
              "filters": [
                 { "field": "operating-system", "operator": "contains", "value": "Microsoft Windows 10" }
              ]
            }
        - lang: Assets with High CVSS Scores assigned to Bob
          source: |-
            {
               "match": "all",
               "filters": [
                  { "field": "owner-tag", "operator": "contains", "value": "Bob" },
                  { "field": "vulnerability-cvss-score", "operator": "is-greater-than", "value": 8 }
               ]
            }
        - lang: Assets with SSH running containers in Los Angeles
          source: |-
            {
               "match": "all",
               "filters": [
                  { "field": "location-tag", "operator": "contains", "value": "Los Angeles Datacenter" },
                  { "field": "containers", "operator": "are", "value": "0" },
                  { "field": "service-name", "operator": "contains", "value": "ssh" }
               ]
            }
      x-codegen-request-body-name: param1
  /api/3/assets/{assetId}/policies:
    get:
      tags:
        - Policy
      summary: Policies For Asset
      description: Retrieves the list of policies with compliance results for the
        specified asset.
      operationId: getPoliciesForAsset
      parameters:
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: applicableOnly
          in: query
          description: An optional boolean parameter indicating the policies retrieved
            should only include those with a policy compliance status of either a PASS
            of FAIL result. Default value is `false`, which will also include policies
            with a compliance status of NOT_APPLICABLE.
          schema:
            type: boolean
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAssetPolicy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{assetId}/policies/{policyId}/children:
    get:
      tags:
        - Policy
      summary: Policy Rules or Groups Directly Under Policy For Asset
      description: Retrieves a paged resource of either policy rules, or groups, that
        are defined directly underneath the specified policy with rule compliance
        results for the specified asset.
      operationId: getAssetPolicyChildren
      parameters:
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAssetPolicyItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{assetId}/policies/{policyId}/groups/{groupId}/children:
    get:
      tags:
        - Policy
      summary: Policy Rules or Groups Directly Under Policy Group For Asset
      description: Retrieves a paged resource of either policy rules, or groups, that
        are defined directly underneath the specified policy group with rule compliance
        results for the specified asset.
      operationId: getAssetPolicyGroupChildren
      parameters:
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfAssetPolicyItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{assetId}/policies/{policyId}/groups/{groupId}/rules:
    get:
      tags:
        - Policy
      summary: Policy Rules Under Policy Group For Asset
      description: Retrieves the list of policy rules defined directly, or indirectly,
        underneath the specified policy group and the compliance results for the specified
        asset.
      operationId: getPolicyGroupRulesWithAssetAssessment
      parameters:
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{assetId}/policies/{policyId}/rules:
    get:
      tags:
        - Policy
      summary: Policy Rules For Asset
      description: Retrieves the list of policy rules with compliance results for
        the specified asset and policy.
      operationId: getAssetPolicyRulesSummary
      parameters:
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}:
    get:
      tags:
        - Asset
      summary: Asset
      description: Returns the specified asset.
      operationId: getAsset
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Asset
      summary: Asset
      description: Deletes the specified asset.
      operationId: deleteAsset
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/databases:
    get:
      tags:
        - Asset
      summary: Asset Databases
      description: Returns the databases enumerated on an asset.
      operationId: getAssetDatabases
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesDatabase'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/files:
    get:
      tags:
        - Asset
      summary: Asset Files
      description: Returns the files discovered on an asset.
      operationId: getAssetFiles
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesFile'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/policy_overrides:
    get:
      tags:
        - Policy Override
      summary: Asset Policy Overrides
      description: Retrieves policy overrides defined on policy rules for the specified
        asset.
      operationId: getAssetPolicyOverrides
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesPolicyOverride'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services:
    get:
      tags:
        - Asset
      summary: Asset Services
      description: Returns the services discovered on an asset.
      operationId: getAssetServices
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithReferenceWithEndpointIDLinkServiceLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}:
    get:
      tags:
        - Asset
      summary: Asset Service
      description: Returns the service running a port and protocol on the asset.
      operationId: getAssetService
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/configurations:
    get:
      tags:
        - Asset
      summary: Asset Service Configurations
      description: Returns the configuration (properties) of a port and protocol on
        an asset.
      operationId: getAssetServiceConfigurations
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesConfiguration'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/databases:
    get:
      tags:
        - Asset
      summary: Asset Service Databases
      description: Returns the databases running on a port and protocol on an asset.
      operationId: getAssetServiceDatabases
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesDatabase'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/user_groups:
    get:
      tags:
        - Asset
      summary: Asset Service User Groups
      description: Returns the user groups enumerated on a port and protocol on an
        asset.
      operationId: getAssetServiceUserGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesGroupAccount'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/users:
    get:
      tags:
        - Asset
      summary: Asset Service Users
      description: Returns the users enumerated on a port and protocol on an asset.
      operationId: getAssetServiceUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesUserAccount'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/vulnerabilities:
    get:
      tags:
        - Vulnerability Result
      summary: Asset Service Vulnerabilities
      description: Retrieves the vulnerabilities present on a service running on an
        asset. A finding may be `invulnerable` if all instances on the service have
        exceptions applied.
      operationId: getAssetServiceVulnerabilities
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityFinding'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/web_applications:
    get:
      tags:
        - Asset
      summary: Asset Service Web Applications
      description: Returns the web applications running on a port and protocol on
        an asset.
      operationId: getAssetServiceWebApplications
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithWebApplicationIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/services/{protocol}/{port}/web_applications/{webApplicationId}:
    get:
      tags:
        - Asset
      summary: Asset Service Web Application
      description: Returns a web application running on a port and protocol on an
        asset.
      operationId: getAssetServiceWebApplication
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: protocol
          in: path
          description: The protocol of the service.
          required: true
          schema:
            type: string
            enum:
              - ip
              - icmp
              - igmp
              - ggp
              - tcp
              - pup
              - udp
              - idp
              - esp
              - nd
              - raw
        - name: port
          in: path
          description: The port of the service.
          required: true
          schema:
            type: integer
            format: int32
        - name: webApplicationId
          in: path
          description: The identifier of the web application.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebApplication'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/software:
    get:
      tags:
        - Asset
      summary: Asset Software
      description: Returns the software on an asset.
      operationId: getAssetSoftware
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSoftware'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/tags:
    get:
      tags:
        - Asset
      summary: Asset Tags
      description: Returns tags assigned to an asset.
      operationId: getAssetTags
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAssetTag'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/tags/{tagId}:
    put:
      tags:
        - Asset
      summary: Asset Tag
      description: Assigns the specified tag to the asset.
      operationId: addAssetTag
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Asset
      summary: Asset Tag
      description: Removes the specified tag from the asset's tags.
      operationId: removeAssetTag
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/user_groups:
    get:
      tags:
        - Asset
      summary: Asset User Groups
      description: Returns user groups enumerated on an asset.
      operationId: getAssetUserGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesGroupAccount'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/users:
    get:
      tags:
        - Asset
      summary: Asset Users
      description: Returns users enumerated on an asset.
      operationId: getAssetUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesUserAccount'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/vulnerabilities:
    get:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerabilities
      description: Retrieves all vulnerability findings on an asset. A finding may
        be `invulnerable` if all instances have exceptions applied.
      operationId: getAssetVulnerabilities
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityFinding'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/vulnerabilities/{vulnerabilityId}:
    get:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerability
      description: Retrieves the details for a vulnerability finding on an asset.
      operationId: getAssetVulnerability
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityFinding'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/solution:
    get:
      tags:
        - Remediation
      summary: Asset Vulnerability Solution
      description: Returns the highest-superceding rollup solutions for a vulnerability
        on an asset. The solution(s) selected will be the most recent and cost-effective
        means by which the vulnerability can be remediated.
      operationId: getAssetVulnerabilitySolutions
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesMatchedSolution'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations:
    get:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerability Validations
      description: Returns all vulnerability validations for a vulnerability on an
        asset. The asset must be currently vulnerable to the validated vulnerable
        for the validation to be returned.
      operationId: getVulnerabilityValidations
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesVulnerabilityValidationResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerability Validations
      description: Creates a vulnerability validation for a vulnerability on an asset.
        The validation signifies that the vulnerability has been confirmed exploitable
        by an external tool, such as <a target="_blank" href="https://www.metasploit.com">Metasploit</a>.
      operationId: createVulnerabilityValidation
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      requestBody:
        description: A vulnerability validation for a vulnerability on an asset. The  validation
          signifies that the vulnerability has been confirmed exploitable by an external
          tool, such as <a target="_blank" href="https://www.metasploit.com">Metasploit</a>.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VulnerabilityValidationResource'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceVulnerabilityValidationIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param2
  /api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}:
    get:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerability Validation
      description: Returns a vulnerability validation for a vulnerability on an asset.
        The asset must be currently vulnerable to the validated vulnerable for the
        validation to be returned.
      operationId: getVulnerabilityValidation
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          description: The identifier of the vulnerability validation.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityValidationResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Vulnerability Result
      summary: Asset Vulnerability Validation
      description: Removes a vulnerability validation for a vulnerability from an
        asset.
      operationId: deleteVulnerabilityValidation
      parameters:
        - name: id
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
        - name: vulnerabilityId
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
        - name: validationId
          in: path
          description: The identifier of the vulnerability validation.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/authentication_sources:
    get:
      tags:
        - User
      summary: Authentication Sources
      description: Returns all available sources of authentication for users.
      operationId: getAuthenticationSources
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAuthenticationSource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/authentication_sources/{id}:
    get:
      tags:
        - User
      summary: Authentication Source
      description: Returns the details for an authentication source.
      operationId: getAuthenticationSource
      parameters:
        - name: id
          in: path
          description: The identifier of the authentication source.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationSource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/authentication_sources/{id}/users:
    get:
      tags:
        - User
      summary: Authentication Source Users
      description: Returns hypermedia links for the user accounts that use the authentication
        source to authenticate.
      operationId: getAuthenticationSourceUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the authentication source.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithUserIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/discovery_connections:
    get:
      tags:
        - Asset Discovery
      summary: Discovery Connections
      description: Returns all discovery connections.
      operationId: getDiscoveryConnections
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfDiscoveryConnection'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/discovery_connections/{id}:
    get:
      tags:
        - Asset Discovery
      summary: Discovery Connection
      description: Returns a discovery connection.
      operationId: getDiscoveryConnection
      parameters:
        - name: id
          in: path
          description: The identifier of the discovery connection.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoveryConnection'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/discovery_connections/{id}/connect:
    post:
      tags:
        - Asset Discovery
      summary: Discovery Connection Reconnect
      description: Attempts to reconnect the discovery connection.
      operationId: reconnectDiscoveryConnection
      parameters:
        - name: id
          in: path
          description: The identifier of the discovery connection.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/exploits:
    get:
      tags:
        - Vulnerability
      summary: Exploits
      description: Returns all known exploits.
      operationId: getExploits
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfExploit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/exploits/{id}:
    get:
      tags:
        - Vulnerability
      summary: Exploit
      description: Returns the details for an exploit.
      operationId: getExploit
      parameters:
        - name: id
          in: path
          description: The identifier of the exploit.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exploit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/exploits/{id}/vulnerabilities:
    get:
      tags:
        - Vulnerability
      summary: Exploitable Vulnerabilities
      description: Returns the vulnerabilities exploitable to a exploit.
      operationId: getExploitVulnerabilities
      parameters:
        - name: id
          in: path
          description: The identifier of the exploit.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithVulnerabilityNaturalIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/malware_kits:
    get:
      tags:
        - Vulnerability
      summary: Malware Kits
      description: Returns all known malware kits.
      operationId: getMalwareKits
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfMalwareKit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/malware_kits/{id}:
    get:
      tags:
        - Vulnerability
      summary: Malware Kit
      description: Returns the details for a malware kit.
      operationId: getMalwareKit
      parameters:
        - name: id
          in: path
          description: The identifier of the malware kit.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MalwareKit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/malware_kits/{id}/vulnerabilities:
    get:
      tags:
        - Vulnerability
      summary: Malware Kit Vulnerabilities
      description: Returns the vulnerabilities that are susceptible to being attacked
        by a malware kit.
      operationId: getMalwareKitVulnerabilities
      parameters:
        - name: id
          in: path
          description: The identifier of the malware kit.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithVulnerabilityNaturalIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/operating_systems:
    get:
      tags:
        - Asset
      summary: Operating Systems
      description: 'Returns all operating systems discovered across all assets. '
      operationId: getOperatingSystems
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfOperatingSystem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/operating_systems/{id}:
    get:
      tags:
        - Asset
      summary: Operating System
      description: Returns the details for an operating system.
      operationId: getOperatingSystem
      parameters:
        - name: id
          in: path
          description: The identifier of the operating system.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies:
    get:
      tags:
        - Policy
      summary: Policies
      description: Retrieves a paged resource of policies.
      operationId: getPolicies
      parameters:
        - name: filter
          in: query
          description: Filters the retrieved policies with those whose titles that match
            the parameter.
          schema:
            type: string
        - name: scannedOnly
          in: query
          description: Flag indicating the policies retrieved should only include those
            with Pass or Fail compliance results. The list of scanned policies is based
            on the user's list of accessible assets.
          schema:
            type: boolean
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{id}/children:
    get:
      tags:
        - Policy
      summary: Policy Rules or Groups Directly Under Policy
      description: Retrieves a paged resource of either policy rules, or groups, that
        are defined directly underneath the specified policy.
      operationId: getPolicyChildren
      parameters:
        - name: id
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}:
    get:
      tags:
        - Policy
      summary: Policy
      description: Retrieves the specified policy.
      operationId: getPolicy
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/assets:
    get:
      tags:
        - Policy
      summary: Policy Asset Results
      description: Retrieves asset resources with rule compliance results for the
        specified policy.
      operationId: getPolicyAssetResults
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: applicableOnly
          in: query
          description: An optional boolean parameter indicating the assets retrieved
            should only include those with rule results of either PASS or FAIL. Default
            value is `false`, which will also include assets with a compliance status
            of NOT_APPLICABLE.
          schema:
            type: boolean
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/assets/{assetId}:
    get:
      tags:
        - Policy
      summary: Policy Asset Result
      description: Retrieves an asset resource with rule compliance results for the
        specified asset and policy.
      operationId: getPolicyAssetResult
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups:
    get:
      tags:
        - Policy
      summary: Policy Groups
      description: Retrieves a paged resource of policy groups for the specified policy.
      operationId: getPolicyGroups
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups/{groupId}:
    get:
      tags:
        - Policy
      summary: Policy Group
      description: Retrieves the specified policy group.
      operationId: getPolicyGroup
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups/{groupId}/assets:
    get:
      tags:
        - Policy
      summary: Assets Compliance For Policy Rules Under Policy Group
      description: Retrieves asset resources with rule compliance status against all
        rules under the specified policy group.
      operationId: getPolicyGroupAssetResults
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
        - name: applicableOnly
          in: query
          description: An optional boolean parameter indicating the assets retrieved
            should only include those with rule results of either PASS or FAIL. Default
            value is `false`, which will also include assets with a compliance status
            of NOT_APPLICABLE.
          schema:
            type: boolean
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups/{groupId}/assets/{assetId}:
    get:
      tags:
        - Policy
      summary: Asset Compliance For Policy Rules Under Policy Group
      description: Retrieves an asset resource with rule compliance status against
        all rules under the specified policy group.
      operationId: getPolicyGroupAssetResult
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups/{groupId}/children:
    get:
      tags:
        - Policy
      summary: Policy Rules or Groups Directly Under Policy Group
      description: Retrieves a paged resource of either policy rules, or groups, that
        are defined directly underneath the specified policy group.
      operationId: getPolicyGroupChildren
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyItem'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/groups/{groupId}/rules:
    get:
      tags:
        - Policy
      summary: Policy Rules Under Policy Group
      description: Retrieves the list of policy rules defined directly, or indirectly,
        underneath the specified policy group.
      operationId: getDescendantPolicyRules
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: groupId
          in: path
          description: The identifier of the policy group.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules:
    get:
      tags:
        - Policy
      summary: Policy Rules
      description: Retrieves a paged resource of policy rules for the specified policy.
      operationId: getPolicyRules
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/disabled:
    get:
      tags:
        - Policy
      summary: Disabled Policy Rules
      description: Retrieves a paged resource of disabled policy rules for the specified
        policy.
      operationId: getDisabledPolicyRules
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}:
    get:
      tags:
        - Policy
      summary: Policy Rule
      description: Retrieves the specified policy rule.
      operationId: getPolicyRule
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyRule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/assets:
    get:
      tags:
        - Policy
      summary: Assets Compliance For Policy Rule
      description: Retrieves asset resources with rule compliance results for the
        specified policy policy rule.
      operationId: getPolicyRuleAssetResults
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
        - name: applicableOnly
          in: query
          description: An optional boolean parameter indicating the assets retrieved
            should only include those with rule results of either PASS or FAIL. Default
            value is `false`, which will also include assets with a compliance status
            of NOT_APPLICABLE.
          schema:
            type: boolean
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/assets/{assetId}:
    get:
      tags:
        - Policy
      summary: Asset Compliance For Policy Rule
      description: Retrieves an asset resource with rule compliance results for the
        specified policy policy rule.
      operationId: getPolicyRuleAssetResult
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/assets/{assetId}/proof:
    get:
      tags:
        - Policy
      summary: Policy Rule Proof For Asset
      description: Retrieves the policy rule proof captured during evaluation against
        the specified asset.
      operationId: getPolicyRuleAssetResultProof
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/controls:
    get:
      tags:
        - Policy
      summary: Policy Rule Controls
      description: Retrieves all NIST SP 800-53 controls mappings for each CCE within
        the specified policy rule.
      operationId: getPolicyRuleControls
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyControl'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/rationale:
    get:
      tags:
        - Policy
      summary: Policy Rule Rationale
      description: Retrieves the policy rule rationale for the specified policy.
      operationId: getPolicyRuleRationale
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policies/{policyId}/rules/{ruleId}/remediation:
    get:
      tags:
        - Policy
      summary: Policy Rule Remediation
      description: Retrieves the policy rule remediation for the specified policy.
      operationId: getPolicyRuleRemediation
      parameters:
        - name: policyId
          in: path
          description: The identifier of the policy
          required: true
          schema:
            type: integer
            format: int64
        - name: ruleId
          in: path
          description: The identifier of the policy rule.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            text/html:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            text/html:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policy/summary:
    get:
      tags:
        - Policy
      summary: Policy Compliance Summaries
      description: Retrieves a compliance summary of all policies.
      operationId: getPolicySummary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicySummaryResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policy_overrides:
    get:
      tags:
        - Policy Override
      summary: Policy Overrides
      description: Retrieves policy overrides defined on policy rules.
      operationId: getPolicyOverrides
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPolicyOverride'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Policy Override
      summary: Policy Overrides
      description: Submit a policy override. The policy override can be submitted
        or it can be submitted and approved in a single request.
      operationId: createPolicyOverride
      requestBody:
        description: The specification of a policy override. Allows users to override
          the compliance result of a policy rule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyOverride'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferencePolicyOverrideIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/policy_overrides/{id}:
    get:
      tags:
        - Policy Override
      summary: Policy Override
      description: Retrieve the specified policy override.
      operationId: getPolicyOverride
      parameters:
        - name: id
          in: path
          description: The identifier of the policy override.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyOverride'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Policy Override
      summary: Policy Override
      description: Removes a policy override created for a policy rule.
      operationId: deletePolicyOverride
      parameters:
        - name: id
          in: path
          description: The identifier of the policy override.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/policy_overrides/{id}/expires:
    get:
      tags:
        - Policy Override
      summary: Policy Override Expiration
      description: Get the expiration date for a policy override.
      operationId: getPolicyOverrideExpiration
      parameters:
        - name: id
          in: path
          description: The identifier of the policy override.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Policy Override
      summary: Policy Override Expiration
      description: Set the expiration date for a policy override. This must be a valid
        date in the future.
      operationId: setPolicyOverrideExpiration
      parameters:
        - name: id
          in: path
          description: The identifier of the policy override.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: The date the policy override is set to expire. Date is represented
          in ISO 8601 format.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/policy_overrides/{id}/{status}:
    post:
      tags:
        - Policy Override
      summary: Policy Override Status
      description: 'Update the status of the specified policy override. The status
        can be one of the following: `"recall"`, `"approve"`, or `"reject"`.'
      operationId: setPolicyOverrideStatus
      parameters:
        - name: id
          in: path
          description: The identifier of the policy override.
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: path
          description: Policy Override Status
          required: true
          schema:
            type: string
            enum:
              - recall
              - approve
              - reject
      requestBody:
        description: A comment describing the change of the policy override status.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param2
  /api/3/privileges:
    get:
      tags:
        - User
      summary: Privileges
      description: Returns all privileges that may be granted to a role.
      operationId: getPrivileges
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Privileges'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/privileges/{id}:
    get:
      tags:
        - User
      summary: Privilege
      description: Returns the details for a privilege.
      operationId: getPrivilege
      parameters:
        - name: id
          in: path
          description: The identifier of the privilege.
          required: true
          schema:
            type: string
            enum:
              - all-permissions
              - create-reports
              - configure-global-settings
              - manage-sites
              - manage-tags
              - manage-static-asset-groups
              - manage-dynamic-asset-groups
              - manage-scan-templates
              - manage-report-templates
              - manage-scan-engines
              - submit-vulnerability-exceptions
              - approve-vulnerability-exceptions
              - delete-vulnerability-exceptions
              - create-tickets
              - close-tickets
              - assign-ticket-assignee
              - manage-site-access
              - manage-asset-group-access
              - manage-report-access
              - use-restricted-report-sections
              - manage-policies
              - view-asset-group-asset-data
              - manage-asset-group-assets
              - view-site-asset-data
              - specify-site-metadata
              - purge-site-asset-data
              - specify-scan-targets
              - assign-scan-engine
              - assign-scan-template
              - manage-site-credentials
              - manage-scan-alerts
              - schedule-automatic-scans
              - start-unscheduled-scans
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/privileges/{id}/users:
    get:
      tags:
        - User
      summary: Users With Privilege
      description: Returns hypermedia links for all users granted the specified privilege
        by their role.
      operationId: getUsersWithPrivilege
      parameters:
        - name: id
          in: path
          description: The identifier of the privilege.
          required: true
          schema:
            type: string
            enum:
              - all-permissions
              - create-reports
              - configure-global-settings
              - manage-sites
              - manage-tags
              - manage-static-asset-groups
              - manage-dynamic-asset-groups
              - manage-scan-templates
              - manage-report-templates
              - manage-scan-engines
              - submit-vulnerability-exceptions
              - approve-vulnerability-exceptions
              - delete-vulnerability-exceptions
              - create-tickets
              - close-tickets
              - assign-ticket-assignee
              - manage-site-access
              - manage-asset-group-access
              - manage-report-access
              - use-restricted-report-sections
              - manage-policies
              - view-asset-group-asset-data
              - manage-asset-group-assets
              - view-site-asset-data
              - specify-site-metadata
              - purge-site-asset-data
              - specify-scan-targets
              - assign-scan-engine
              - assign-scan-template
              - manage-site-credentials
              - manage-scan-alerts
              - schedule-automatic-scans
              - start-unscheduled-scans
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithUserIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/report_formats:
    get:
      tags:
        - Report
      summary: Report Formats
      description: Returns all available report formats. A report format indicates
        an output file format specification (e.g. PDF, XML, etc). Some printable formats
        may be templated, and others may not. The supported templates for each formated
        are provided.
      operationId: getReportFormats
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAvailableReportFormat'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/report_templates:
    get:
      tags:
        - Report
      summary: Report Templates
      description: Returns all available report templates.
      operationId: getReportTemplates
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesReportTemplate'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/report_templates/{id}:
    get:
      tags:
        - Report
      summary: Report Template
      description: 'Returns the details of a report template. Report templates govern
        the contents generated within a report. '
      operationId: getReportTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the report template;
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportTemplate'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/reports:
    get:
      tags:
        - Report
      summary: Reports
      description: Returns all defined report configurations.
      operationId: getReports
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfReport'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Report
      summary: Reports
      description: Configures a new report for generation. Report types are controlled
        through either or both a format and template. Non-templatized (`export`) report
        formats do not require a template and have their output format preset. Templatized
        (`document` and `file`) report formats support a report template that governs
        the content of the output and the output format can be chosen from a list
        of supported formats.
      operationId: createReport
      requestBody:
        description: The specification of a report configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceintLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Nexpose™ Simple XML
          source: |-
            {
               "format": "nexpose-simple-xml",
               "name": "Scan Report for February scan",
               "filters": {
                  "statuses": [ "vulnerable", "vulnerable-version" ]
               },
               "scope": {
                  "scan": 2
               }
            }
        - lang: Qualys XML
          source: |-
            {
               "format": "qualys-xml",
               "name": "Qualys Export",
               "filters": {
                  "severity": "critical-and-severe",
                  "categories": {
                     "included": [ "Adobe" ]
                  }
               },
               "scope": {
                  "sites": [ 3 ]
               }
            }
        - lang: OVAL XML
          source: |-
            {
               "format": "oval-xml",
               "name": "OVAL XML",
               "policy": 32,
               "scope": {
                  "sites": [ 17 ]
               }
            }
        - lang: XCCDF CSV
          source: |-
            {
               "format": "xccdf-csv",
               "name": "XCDDF CSV Report",
               "policy": 89,
               "scope": {
                  "assets": [ 4, 7, 9, 22 ]
               },
               "filters": {
                  "severity": "critical"
               },
               "frequency": {
                  "start": "2017-11-30",
                  "repeat": {
                     "every": "week",
                     "interval": 2
                  }
               }
            }
        - lang: XCCDF XML
          source: |-
            {
               "format": "xccdf-xml",
               "name": "XCCDF XML",
               "policy": 12,
               "organization": "Acme Organization",
               "scope": {
                  "tags": [ 4 ]
               },
               "filters": {
                  "severity": "critical"
               },
               "frequency": {
                  "start": "2018-11-30",
                  "repeat": {
                     "every": "date-of-month",
                     "interval": 3,
                     "dateOfMonth": "last"
                  }
               }
            }
      x-codegen-request-body-name: param0
  /api/3/reports/{id}:
    get:
      tags:
        - Report
      summary: Report
      description: Returns the configuration details of a report.
      operationId: getReport
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Report
      summary: Report
      description: Updates the configuration details of a report.
      operationId: updateReport
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The specification of a report configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Report
      summary: Report
      description: Deletes the configuration of a report.
      operationId: deleteReport
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/reports/{id}/generate:
    post:
      tags:
        - Report
      summary: Report Generation
      description: Generates a configured report and returns the instance identifier
        of the report.
      operationId: generateReport
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithReportIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/reports/{id}/history:
    get:
      tags:
        - Report
      summary: Report Histories
      description: Returns all historical details for generation of the report over
        time.
      operationId: getReportInstances
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesReportInstance'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/reports/{id}/history/{instance}:
    get:
      tags:
        - Report
      summary: Report History
      description: Returns the details for a generation of the report.
      operationId: getReportInstance
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
        - name: instance
          in: path
          description: The identifier of the report instance.
          required: true
          schema:
            type: string
            enum:
              - latest
              - integer <<int32>>
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportInstance'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Report
      summary: Report History
      description: Returns the details for a generation of the report.
      operationId: deleteReportInstance
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
        - name: instance
          in: path
          description: The identifier of the report instance.
          required: true
          schema:
            type: string
            enum:
              - latest
              - integer <<int32>>
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/reports/{id}/history/{instance}/output:
    get:
      tags:
        - Report
      summary: Report Download
      description: Returns the contents of a generated report. The report content
        is usually returned in a GZip compressed format.
      operationId: downloadReport
      parameters:
        - name: id
          in: path
          description: The identifier of the report.
          required: true
          schema:
            type: integer
            format: int32
        - name: instance
          in: path
          description: The identifier of the report instance.
          required: true
          schema:
            type: string
            enum:
              - latest
              - integer <<int32>>
      responses:
        200:
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
            application/json:
              schema:
                type: string
                format: byte
        401:
          description: Unauthorized
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/NotFoundError'
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/InternalServerError'
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/octet-stream:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/roles:
    get:
      tags:
        - User
      summary: Roles
      description: Returns all roles for which users may be assigned.
      operationId: getRoles
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesRole'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/roles/{id}:
    get:
      tags:
        - User
      summary: Role
      description: Retrieves the details of a role.
      operationId: getRole
      parameters:
        - name: id
          in: path
          description: The identifier of the role.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - User
      summary: Role
      description: Updates the details of a role.
      operationId: updateRole
      parameters:
        - name: id
          in: path
          description: The identifier of the role.
          required: true
          schema:
            type: string
      requestBody:
        description: The details of the role.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - User
      summary: Role
      description: Removes a role with the specified identifier. The role must not
        be built-in and cannot be currently assigned to any users.
      operationId: deleteRole
      parameters:
        - name: id
          in: path
          description: The identifier of the role.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/roles/{id}/users:
    get:
      tags:
        - User
      summary: Users With Role
      description: Returns hypermedia links for the the users currently assigned a
        role.
      operationId: getRoleUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the role.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithUserIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engine_pools:
    get:
      tags:
        - Scan Engine
      summary: Engine Pools
      description: Returns engine pools available to use for scanning.
      operationId: getScanEnginePools
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesEnginePool'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Scan Engine
      summary: Engine Pools
      description: Creates a new engine pool.
      operationId: createScanEnginePool
      requestBody:
        description: The details for the scan engine to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnginePool'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceEngineIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/scan_engine_pools/{id}:
    get:
      tags:
        - Scan Engine
      summary: Engine Pool
      description: Retrieves the details for an engine pool.
      operationId: getEnginePool
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnginePool'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Scan Engine
      summary: Engine Pool
      description: Updates the specified engine pool.
      operationId: updateScanEnginePool
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details for the scan engine to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnginePool'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Scan Engine
      summary: Engine Pool
      description: Deletes the specified engine pool.
      operationId: removeScanEnginePool
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engine_pools/{id}/engines:
    get:
      tags:
        - Scan Engine
      summary: Engine Pool Engines
      description: Get the engines in the engine pool.
      operationId: getScanEnginePoolScanEngines
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithEngineIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Scan Engine
      summary: Engine Pool Engines
      description: Set the engines in the engine pool.
      operationId: setScanEnginePoolScanEngines
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifiers of the scan engines to place into the engine
          pool.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/scan_engine_pools/{id}/engines/{engineId}:
    put:
      tags:
        - Scan Engine
      summary: Engine Pool Engines
      description: Add an engine to the engine pool.
      operationId: addScanEnginePoolScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
        - name: engineId
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Scan Engine
      summary: Engine Pool Engines
      description: Remove the specified engine from the engine pool.
      operationId: removeScanEnginePoolScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
        - name: engineId
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engine_pools/{id}/sites:
    get:
      tags:
        - Scan Engine
      summary: Engine Pool Sites
      description: Returns links to the sites associated with this engine pool.
      operationId: getScanEnginePoolSites
      parameters:
        - name: id
          in: path
          description: The identifier of the engine pool.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithSiteIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engines:
    get:
      tags:
        - Scan Engine
      summary: Scan Engines
      description: Returns scan engines available to use for scanning.
      operationId: getScanEngines
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesScanEngine'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Scan Engine
      summary: Scan Engines
      description: Creates a new scan engine.
      operationId: createScanEngine
      requestBody:
        description: The specification of a scan engine.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanEngine'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithEngineIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/scan_engines/{id}:
    get:
      tags:
        - Scan Engine
      summary: Scan Engine
      description: Retrieves the details for a scan engine.
      operationId: getScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanEngine'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Scan Engine
      summary: Scan Engine
      description: Updates the specified scan engine.
      operationId: updateScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The specification of the scan engine to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanEngine'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Scan Engine
      summary: Scan Engine
      description: Deletes the specified scan engine.
      operationId: deleteScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engines/{id}/scan_engine_pools:
    get:
      tags:
        - Scan Engine
      summary: Assigned Engine Pools
      description: Retrieves the list of engine pools the scan engine is currently
        assigned to.
      operationId: getAssignedEnginePools
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesEnginePool'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engines/{id}/scans:
    get:
      tags:
        - Scan Engine
      summary: Scan Engine Scans
      description: Returns the scans that have been run on a scan engine.
      operationId: getScanEngineScans
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfScan'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_engines/{id}/sites:
    get:
      tags:
        - Scan Engine
      summary: Scan Engine Sites
      description: Retrieves the list of sites the specified scan engine is assigned
        to.
      operationId: getScanEngineSites
      parameters:
        - name: id
          in: path
          description: The identifier of the scan engine.
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfSite'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scan_templates:
    get:
      tags:
        - Scan Template
      summary: Scan Templates
      description: Returns all scan templates.
      operationId: getScanTemplates
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesScanTemplate'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Scan Template
      summary: Scan Templates
      description: Creates a new scan template.
      operationId: createScanTemplate
      requestBody:
        description: The details of the scan template.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanTemplate'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceScanTemplateIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/scan_templates/{id}:
    get:
      tags:
        - Scan Template
      summary: Scan Template
      description: Returns a scan template.
      operationId: getScanTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the scan template
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanTemplate'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Scan Template
      summary: Scan Template
      description: Updates a scan template.
      operationId: updateScanTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the scan template
          required: true
          schema:
            type: string
      requestBody:
        description: The details of the scan template.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanTemplate'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Scan Template
      summary: Scan Template
      description: Deletes a scan template.
      operationId: deleteScanTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the scan template
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scans:
    get:
      tags:
        - Scan
      summary: Scans
      description: Returns all scans.
      operationId: getScans
      parameters:
        - name: active
          in: query
          description: Return running scans or past scans (true/false value).
          schema:
            type: boolean
            default: false
            enum:
              - true
              - false
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfGlobalScan'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scans/{id}:
    get:
      tags:
        - Scan
      summary: Scan
      description: Returns the specified scan.
      operationId: getScan
      parameters:
        - name: id
          in: path
          description: The identifier of the scan.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Scan'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/scans/{id}/{status}:
    post:
      tags:
        - Scan
      summary: Scan Status
      description: Updates the scan status. Can pause, resume, and stop scans using
        this resource. In order to stop a scan the scan must be running or paused.
        In order to resume a scan the scan must be paused. In order to pause a scan
        the scan must be running.
      operationId: setScanStatus
      parameters:
        - name: id
          in: path
          description: The identifier of the scan.
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: path
          description: The status of the scan.
          required: true
          schema:
            type: string
            enum:
              - pause
              - stop
              - resume
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/shared_credentials:
    get:
      tags:
        - Credential
      summary: Shared Credentials
      description: Retrieves all defined shared credential resources.
      operationId: getSharedCredentials
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSharedCredential'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Credential
      summary: Shared Credentials
      description: Creates a new shared credential.
      operationId: createSharedCredential
      requestBody:
        description: The specification of a shared credential.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedCredential'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceCredentialIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: A CIFS credential
          source: |-
            {
              "name": "CIFS Administrator",
              "description": "This is a cifs credential for an administrator",
              "account": {
                "service": "cifs",
                "username": "joe_smith@acme.com",
                "password": "******",
                "domain": "acme"
              },
              "siteAssignment": "all-sites"
            }
        - lang: A Microsoft SQL Server credential
          source: |
            {
              "name": "MS SQL Administrator",
              "description": "This is an administrator credential for a Microsoft SQL Server database. Configured to use windows authentication. Credential is not assigned to any sites by default.",
              "account": {
                "service": "ms-sql",
                "database": "usersdb",
                "useWindowsAuthentication": true,
                "domain": "acme",
                "username": "admin",
                "password": "******"
              },
              "siteAssignment": "specific-sites",
              "hostRestriction": "machine1.acme.com"
            }
        - lang: An Oracle database credential
          source: |
            {
              "name": "Oracle DB Administrator",
              "description": "This is an administrator credential for an Oracle database. Credential is assigned to a single site.",
              "account": {
                "service": "oracle",
                "sid": "usersdb",
                "username": "admin",
                "password": "******",
                "enumerateSids": true,
                "oracleListenerPassword": "******"
              },
              "siteAssignment": "specific-sites",
              "sites": [1],
              "hostRestriction": "192.168.1.1"
            }
        - lang: An SNMPv3 credential
          source: |
            {
              "name": "SNMP v3 Administator",
              "account": {
                "service": "snmpv3",
                "authenticationType": "md5",
                "username": "admin",
                "password": "******",
                "privacyType": "aes-256",
                "privacyPassword": "******"
              },
              "siteAssignment": "all-sites"
            }
        - lang: An SSH credential
          source: |
            {
              "name": "SSH Administrator",
              "description": "This is an SSH credential for an administrator. Credential is assigned to all sites.",
              "account": {
                "service": "ssh",
                "username": "admin",
                "password": "******"
              },
              "siteAssignment": "all-sites"
            }
        - lang: An SSH credential using sudo+su permission elevation
          source: |
            {
              "name": "SSH User (permission elevation with sudo+su)",
              "description": "This is an SSH credential for an non-administrative user. Credential is configured to perform permission elevation using sudo+su for additional access.",
              "account": {
                "service": "ssh",
                "username": "jsmith",
                "password": "******",
                "permissionElevation": "sudosu",
                "permissionElevationUserName": "root",
                "permissionElevationPassword": "******"
              },
              "siteAssignment": "all-sites"
            }
        - lang: An SSH public key credential
          source: |
            {
              "name": "SSH Public Key credential (permission elevation with sudo)",
              "description": "This is an SSH credential for a non-administrative user using a PEM-format private key. Credential is also configured to elevate permissions using sudo.",
              "account": {
                "service": "ssh-key",
                "username": "admin",
                "privateKeyPassword": "*******",
                "pemKey": "-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: AES-128-CBC,0D364155CB54D4B485BDB3B11B76BF59\n\nGLH7n9qeWzZ43g8d5ZNo9BcSWGXo7i8yd3ig9SLKXJd9GoxOrI4OepxZbhOJFDC9\nXer799R8M4+ZGUwIC14R4lfzgKjcqEBCzya/c99MxK9Haz8pt5BjTMtUQRWO5y+/\nyySosHRVebB05TuMhmLnJkNnDfTYwT+Hnvdhu/2ArEm2FN9Rr+guumwhQeGxUha5\n7zjjSimLYjuU2uayjgFLfnh9g/Fe24qmHCw80z+nuHsm9WMWeoeOdmMrMmxhLxUb\nb+zYZs/xRYjKgBMTRiXNSK9UIy21t2+7TUzeyDwfvHq0f5KpinhD1vzYSL+N0k/H\ndg6vqM1gD/DLb+eKoAGpXTE0gpHWcXLg526ivlyZEpAxbuyGPVQ+7IIGytjxN7lG\nJyvbk3fpKDwIJLDOFN4eb9DUaUoqyarqVl44BZhcs7mM0Cvn49IA7PfhcznLv4rJ\netAoZ2Tjt0AiM774+4X29EaYBGXKGC3SYKfiznoEEy1Jpi6Akwxz4FKCEazH1wce\nUaUS/N8VbquMPTqcLjCfoztdOgk65j4FczGt22CtGz4Ns8XB0KRM9fcVQFD4ZmRQ\ni9Sr2onZUAMuvg3R6ZNdpm7FtQhNEpqV432TJdNZEMbXlDmG61P2vgILugKmu56r\ngZfgI1QMUSUzZrnH+DXn0GY9KycRKTpY6L8PSUeTVyhDUFlTrTchvbnFf7LpVRRj\n0+99EUxQFIogXt2rNuj6qioEpabh6rGtIPjICEkue75n2Y4Eu+pdPpSFAPNXLuMB\nCcvoydmxWkBcq/wrCWcTKdKbGKXEj1xvHXAdUwcmlhXpn1igxcwRtcpwrN8cyRRB\nddc1dDX6X/6iEnnWdDDWHZYjaMLUWVO0pPXzSEsZMFhS3wPvY1lg1Ertiag6DD0Q\nwnJq19fJ5M8ehu9qMBdHgPIWdcZBMXSvaQqZ8gBtMO5UyuLA5BTP0yb6Jh3foXCq\nCPihqYSCGUtXzupJCr/oE+jOaYNWjL5icEU0llA6lr71WWdj3b1OwrUTlrmgA0nK\nxZu6LrqRT+nxbd4phYbkqmhXccq9H/d8pcZwKwPtF+z8HoZXSddaACYFAqY4eaxa\nNRk2Zt1JJ+tUsNT9LLV1tUrQ+q1JsKlJp7LW60loljiex8uadsvzwnKIdoom8q0I\nroXHdrwwqyubf4yYApRckbgzW9gLPbclKSqsVFGsDB+KysDYmg3QlTpkrgGl2555\naQ7Z2TWWvcVL3y7z1l1F238m11LxKUY8Uvu7enpQ/gTrqQ1qqIi2/yv+LvZmAXWV\nCFO2lMafpmmHjHEAI5ifXYzZlHCXYBHGHYJdGALFuhODiQqF4pOJI8CX/00msnlJ\nbMH0+dGnk2AviiaLXb7eCZ7mELCX+Ah+00UU75Vdv7O3vhGHpjuMULvbLW2uo+cw\n6rogJ4SfUBb0t+yS970Xty650DgpHYxCzDwZZzrQqPuX6SeOD8AnXuJL3cl3B5YU\n60IPVJPsONIwvJlvZuiij4V8L95usGtvDVsexBKQlj3sSVZ5egICMBjkduEyDl3O\nxOZtdnqktsWNF5XYUfa/8/HUYnN35g0UktpmKlg0yxhAxUAn4lENAY8xvhMGsSCO\n-----END RSA PRIVATE KEY-----",
                "permissionElevation": "sudo",
                "permissionElevationUserName": "root",
                "permissionElevationPassword": "*******"
              },
              "siteAssignment": "all-sites"
            }
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Credential
      summary: Shared Credentials
      description: Deletes all shared credentials.
      operationId: deleteAllSharedCredentials
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/shared_credentials/{id}:
    get:
      tags:
        - Credential
      summary: Shared Credential
      description: Retrieves the specified shared credential.
      operationId: getSharedCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the credential.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCredential'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Credential
      summary: Shared Credential
      description: Updates the specified shared credential.
      operationId: updateSharedCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the credential.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The specification of the shared credential to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SharedCredential'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Credential
      summary: Shared Credential
      description: Deletes the specified shared scan credential.
      operationId: deleteSharedCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the credential.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites:
    get:
      tags:
        - Site
      summary: Sites
      description: Retrieves a paged resource of accessible sites.
      operationId: getSites
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfSite'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Site
      summary: Sites
      description: Creates a new site with the specified configuration.
      operationId: createSite
      requestBody:
        description: Resource for creating a site configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCreateResource'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithSiteIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}:
    get:
      tags:
        - Site
      summary: Site
      description: Retrieves the site with the specified identifier.
      operationId: getSite
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site
      description: Updates the configuration of the site with the specified identifier.
      operationId: updateSite
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating a site configuration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteUpdateResource'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site
      description: site.delete.description
      operationId: deleteSite
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts:
    get:
      tags:
        - Site
      summary: Site Alerts
      description: Retrieve all alerts defined in the site.
      operationId: getSiteAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Site
      summary: Site Alerts
      description: Deletes all alerts from the site.
      operationId: deleteAllSiteAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/smtp:
    get:
      tags:
        - Site
      summary: Site SMTP Alerts
      description: Retrieves all SMTP alerts defined in the site.
      operationId: getSiteSmtpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSmtpAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site SMTP Alerts
      description: Updates all SMTP alerts for the specified site in a single request
        using the array of resources defined in the request body.
      operationId: setSiteSmtpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of resources for updating all SMTP alerts defined in the
          site. Alerts defined in the site that are omitted from this request will
          be deleted from the site.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SmtpAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    post:
      tags:
        - Site
      summary: Site SMTP Alerts
      description: Creates a new SMTP alert for the specified site.
      operationId: createSiteSmtpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for creating a new SMTP alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmtpAlert'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithAlertIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site SMTP Alerts
      description: Deletes all SMTP alerts from the site.
      operationId: deleteAllSiteSmtpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/smtp/{alertId}:
    get:
      tags:
        - Site
      summary: Site SMTP Alert
      description: Retrieves the specified SMTP alert.
      operationId: getSiteSmtpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmtpAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site SMTP Alert
      description: Updates the specified SMTP alert.
      operationId: updateSiteSmtpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating the specified SMTP alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmtpAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site SMTP Alert
      description: Deletes the specified SMTP alert from the site.
      operationId: deleteSiteSmtpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/snmp:
    get:
      tags:
        - Site
      summary: Site SNMP Alerts
      description: Retrieves all SNMP alerts defined in the site.
      operationId: getSiteSnmpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSnmpAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site SNMP Alerts
      description: Updates all SNMP alerts for the specified site in a single request
        using the array of resources defined in the request body.
      operationId: setSiteSnmpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of resources for updating all SNMP alerts defined in the
          site. Alerts defined in the site that are omitted from this request will
          be deleted from the site.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SnmpAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    post:
      tags:
        - Site
      summary: Site SNMP Alerts
      description: Creates a new SNMP alert for the specified site.
      operationId: createSiteSnmpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for creating a new SNMP alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnmpAlert'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithAlertIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site SNMP Alerts
      description: Deletes all SNMP alerts from the site.
      operationId: deleteAllSiteSnmpAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/snmp/{alertId}:
    get:
      tags:
        - Site
      summary: Site SNMP Alert
      description: Retrieves the specified SNMP alert.
      operationId: getSiteSnmpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SnmpAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site SNMP Alert
      description: Updates the specified SNMP alert.
      operationId: updateSiteSnmpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating the specified SNMP alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SnmpAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site SNMP Alert
      description: Deletes the specified SNMP alert from the site.
      operationId: deleteSiteSnmpAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/syslog:
    get:
      tags:
        - Site
      summary: Site Syslog Alerts
      description: Retrieves all Syslog alerts defined in the site.
      operationId: getSiteSyslogAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSyslogAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Syslog Alerts
      description: Updates all Syslog alerts for the specified site in a single request
        using the array of resources defined in the request body.
      operationId: setSiteSyslogAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of resources for updating all Syslog alerts defined in
          the site. Alerts defined in the site that are omitted from this request
          will be deleted from the site.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SyslogAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    post:
      tags:
        - Site
      summary: Site Syslog Alerts
      description: Creates a new Syslog alert for the specified site.
      operationId: createSiteSyslogAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for creating a new Syslog alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogAlert'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithAlertIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Syslog Alerts
      description: Deletes all Syslog alerts from the site.
      operationId: deleteAllSiteSyslogAlerts
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/alerts/syslog/{alertId}:
    get:
      tags:
        - Site
      summary: Site Syslog Alert
      description: Retrieves the specified Syslog alert.
      operationId: getSiteSyslogAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SyslogAlert'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Syslog Alert
      description: Updates the specified Syslog alert.
      operationId: updateSiteSyslogAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating the specified Syslog alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SyslogAlert'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Syslog Alert
      description: Deletes the specified Syslog alert from the site.
      operationId: deleteSiteSyslogAlert
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: alertId
          in: path
          description: The identifier of the alert.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/assets/{assetId}:
    delete:
      tags:
        - Site
      summary: Site Asset
      description: Removes an asset from a site. The asset will only be deleted if
        it belongs to no other sites.
      operationId: removeAssetFromSite
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/discovery_connection:
    get:
      tags:
        - Site
      summary: Site Discovery Connection
      description: Retrieves the discovery connection assigned to the site.
      operationId: getSiteDiscoveryConnection
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteDiscoveryConnection'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Discovery Connection
      description: Updates the discovery connection assigned to the site.
      operationId: setSiteDiscoveryConnection
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifier of the discovery connection.
        content:
          application/json:
            schema:
              type: integer
              format: int64
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/discovery_search_criteria:
    get:
      tags:
        - Site
      summary: Site Discovery Search Criteria
      description: Retrieve the search criteria of the dynamic site.
      operationId: getSiteDiscoverySearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscoverySearchCriteria'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Discovery Search Criteria
      description: Update the search criteria of the dynamic site.
      operationId: setSiteDiscoverySearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: param1
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscoverySearchCriteria'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/sites/{id}/excluded_asset_groups:
    get:
      tags:
        - Site
      summary: Site Excluded Asset Groups
      description: Retrieves the excluded asset groups in a static site.
      operationId: getExcludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAssetGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Excluded Asset Groups
      description: Updates the excluded asset groups in a static site.
      operationId: updateExcludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of asset group identifiers.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Excluded Asset Groups
      description: Removes all excluded asset groups from the specified static site.
      operationId: removeAllExcludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/excluded_asset_groups/{assetGroupId}:
    delete:
      tags:
        - Site
      summary: Site Excluded Asset Group
      description: Removes the specified asset group from the excluded asset groups
        configured in the static site.
      operationId: removeExcludedAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/excluded_targets:
    get:
      tags:
        - Site
      summary: Site Excluded Targets
      description: Retrieves the excluded targets in a static site.
      operationId: getExcludedTargets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanTargetsResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Excluded Targets
      description: Updates the excluded targets in a static site.
      operationId: updateExcludedTargets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: List of addresses to be the site's new excluded scan targets.
          Each address is a string that can represent either a hostname, ipv4 address,
          ipv4 address range, ipv6 address, or CIDR notation.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/included_asset_groups:
    get:
      tags:
        - Site
      summary: Site Included Asset Groups
      description: Retrieves the included asset groups in a static site.
      operationId: getIncludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesAssetGroup'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Included Asset Groups
      description: Updates the included asset groups in a static site.
      operationId: updateIncludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of asset group identifiers.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Included Asset Groups
      description: Removes all included asset groups from the specified static site.
      operationId: removeAllIncludedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/included_asset_groups/{assetGroupId}:
    delete:
      tags:
        - Site
      summary: Site Included Asset Group
      description: Removes the specified asset group from the included asset groups
        configured in the static site.
      operationId: removeIncludedAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/included_targets:
    get:
      tags:
        - Site
      summary: Site Included Targets
      description: Retrieves the included targets in a static site.
      operationId: getIncludedTargets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanTargetsResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Included Targets
      description: Updates the included targets in a static site.
      operationId: updateIncludedTargets
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: List of addresses to be the site's new included scan targets.
          Each address is a string that can represent either a hostname, ipv4 address,
          ipv4 address range, ipv6 address, or CIDR notation.
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/organization:
    get:
      tags:
        - Site
      summary: Site Organization Information
      description: Retrieves the site organization information.
      operationId: getSiteOrganization
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteOrganization'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Organization Information
      description: Updates the site organization information.
      operationId: updateSiteOrganization
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating the specified site's organization information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteOrganization'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/scan_engine:
    get:
      tags:
        - Site
      summary: Site Scan Engine
      description: Retrieves the resource of the scan engine assigned to the site.
      operationId: getSiteScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanEngine'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Engine
      description: Updates the assigned scan engine to the site.
      operationId: setSiteScanEngine
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifier of the scan engine.
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/scan_schedules:
    get:
      tags:
        - Site
      summary: Site Scan Schedules
      description: Returns all scan schedules for the site.
      operationId: getSiteScanSchedules
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesScanSchedule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Schedules
      description: Updates all scan schedules for the specified site in a single request
        using the array of resources defined in the request body.
      operationId: setSiteScanSchedules
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Array of resources for updating all scan schedules defined in
          the site. Scan schedules defined in the site that are omitted from this
          request will be deleted from the site.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScanSchedule'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    post:
      tags:
        - Site
      summary: Site Scan Schedules
      description: Creates a new scan schedule for the specified site.
      operationId: createSiteScanSchedule
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for a scan schedule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanSchedule'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithScanScheduleIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Scan Schedules
      description: Deletes all scan schedules from the site.
      operationId: deleteAllSiteScanSchedules
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/scan_schedules/{scheduleId}:
    get:
      tags:
        - Site
      summary: Site Scan Schedule
      description: Retrieves the specified scan schedule.
      operationId: getSiteScanSchedule
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: scheduleId
          in: path
          description: The identifier of the scan schedule.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanSchedule'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Schedule
      description: Updates the specified scan schedule.
      operationId: updateSiteScanSchedule
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: scheduleId
          in: path
          description: The identifier of the scan schedule.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Resource for updating the specified scan schedule.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScanSchedule'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Site
      summary: Site Scan Schedule
      description: Deletes the specified scan schedule from the site.
      operationId: deleteSiteScanSchedule
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: scheduleId
          in: path
          description: The identifier of the scan schedule.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/scan_template:
    get:
      tags:
        - Site
      summary: Site Scan Template
      description: Retrieves the resource of the scan template assigned to the site.
      operationId: getSiteScanTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScanTemplate'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Template
      description: Updates the assigned scan template to the site.
      operationId: setSiteScanTemplate
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifier of the scan template.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/scans:
    get:
      tags:
        - Scan
      summary: Site Scans
      description: Returns the scans for the specified site.
      operationId: getSiteScans
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: active
          in: query
          description: Return running scans or past scans (true/false value).
          schema:
            type: boolean
            default: false
            enum:
              - true
              - false
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfScan'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Scan
      summary: Site Scans
      description: Starts a scan for the specified site.
      operationId: startScan
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details for the scan.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdhocScan'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceScanIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/sites/{id}/shared_credentials:
    get:
      tags:
        - Site
      summary: Assigned Shared Credentials
      description: Retrieve all of the shared credentials assigned to the site. These
        shared credentials can be enabled/disabled for the site's scan.
      operationId: getSiteSharedCredentials
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSiteSharedCredential'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/shared_credentials/{credentialId}/enabled:
    put:
      tags:
        - Site
      summary: Assigned Shared Credential Enablement
      description: Enable or disable the shared credential for the site's scans.
      operationId: enableSharedCredentialOnSite
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: credentialId
          in: path
          description: The identifier of the shared credential.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Flag indicating whether the shared credential is enabled for
          the site's scans.
        content:
          application/json:
            schema:
              type: boolean
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/site_credentials:
    get:
      tags:
        - Site
      summary: Site Scan Credentials
      description: Retrieves all defined site credential resources.
      operationId: getSiteCredentials
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSiteCredential'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Credentials
      description: Updates multiple site credentials.
      operationId: setSiteCredentials
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A list of site credentials resources.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SiteCredential'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    post:
      tags:
        - Site
      summary: Site Scan Credentials
      description: Creates a new site credential.
      operationId: createSiteCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The specification of a site credential.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCredential'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceCredentialIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: A CIFS credential
          source: |-
            {
              "name": "CIFS Administrator",
              "description": "This is a cifs credential for an administrator. Credential is disabled for use in site scans and restricted to a single host for authentication.",
              "enabled": false,
              "account": {
                "service": "cifs",
                "username": "joe_smith@acme.com",
                "password": "******",
                "domain": "acme"
              },
              "hostRestriction": "machine1.acme.com"
            }
        - lang: A Microsoft SQL Server credential
          source: |
            {
              "name": "MS SQL Administrator",
              "description": "This is an administrator credential for a Microsoft SQL Server database. Configured to use windows authentication. Credential is disabled for use in site scans.",
              "enabled": false,
              "account": {
                "service": "ms-sql",
                "database": "usersdb",
                "useWindowsAuthentication": true,
                "domain": "acme",
                "username": "admin",
                "password": "******"
              },
              "hostRestriction": "machine1.acme.com"
            }
        - lang: An Oracle database credential
          source: |
            {
              "name": "Oracle DB Administrator",
              "description": "This is an administrator credential for an Oracle database. Credential is restricted to a single host and port for authentication.",
              "enabled": true,
              "account": {
                "service": "oracle",
                "sid": "usersdb",
                "username": "admin",
                "password": "******",
                "enumerateSids": true,
                "oracleListenerPassword": "******"
              },
              "hostRestriction": "192.168.1.1",
              "portRestriction": 1521
            }
        - lang: An SNMPv3 credential
          source: |
            {
              "name": "SNMP v3 Administator",
              "enabled": true,
              "account": {
                "service": "snmpv3",
                "authenticationType": "md5",
                "username": "admin",
                "password": "******",
                "privacyType": "aes-256",
                "privacyPassword": "******"
              }
            }
        - lang: An SSH credential
          source: |
            {
              "name": "SSH Administrator",
              "description": "This is an SSH credential for an administrator. Credential is enabled for use in site scans.",
              "enabled": true,
              "account": {
                "service": "ssh",
                "username": "admin",
                "password": "******"
              }
            }
        - lang: An SSH credential using sudo+su permission elevation
          source: |
            {
              "name": "SSH User (permission elevation with sudo+su)",
              "description": "This is an SSH credential for an non-administrative user. Credential is configured to perform permission elevation using sudo+su for additional access.",
              "enabled": true,
              "account": {
                "service": "ssh",
                "username": "jsmith",
                "password": "******",
                "permissionElevation": "sudosu",
                "permissionElevationUserName": "root",
                "permissionElevationPassword": "******"
              }
            }
        - lang: An SSH public key credential
          source: |
            {
              "name": "SSH Public Key credential (permission elevation with sudo)",
              "description": "This is an SSH credential for a non-administrative user using a PEM-format private key. Credential is also configured to elevate permissions using sudo.",
              "enabled": true,
              "account": {
                "service": "ssh-key",
                "username": "admin",
                "privateKeyPassword": "*******",
                "pemKey": "-----BEGIN RSA PRIVATE KEY-----\nProc-Type: 4,ENCRYPTED\nDEK-Info: AES-128-CBC,0D364155CB54D4B485BDB3B11B76BF59\n\nGLH7n9qeWzZ43g8d5ZNo9BcSWGXo7i8yd3ig9SLKXJd9GoxOrI4OepxZbhOJFDC9\nXer799R8M4+ZGUwIC14R4lfzgKjcqEBCzya/c99MxK9Haz8pt5BjTMtUQRWO5y+/\nyySosHRVebB05TuMhmLnJkNnDfTYwT+Hnvdhu/2ArEm2FN9Rr+guumwhQeGxUha5\n7zjjSimLYjuU2uayjgFLfnh9g/Fe24qmHCw80z+nuHsm9WMWeoeOdmMrMmxhLxUb\nb+zYZs/xRYjKgBMTRiXNSK9UIy21t2+7TUzeyDwfvHq0f5KpinhD1vzYSL+N0k/H\ndg6vqM1gD/DLb+eKoAGpXTE0gpHWcXLg526ivlyZEpAxbuyGPVQ+7IIGytjxN7lG\nJyvbk3fpKDwIJLDOFN4eb9DUaUoqyarqVl44BZhcs7mM0Cvn49IA7PfhcznLv4rJ\netAoZ2Tjt0AiM774+4X29EaYBGXKGC3SYKfiznoEEy1Jpi6Akwxz4FKCEazH1wce\nUaUS/N8VbquMPTqcLjCfoztdOgk65j4FczGt22CtGz4Ns8XB0KRM9fcVQFD4ZmRQ\ni9Sr2onZUAMuvg3R6ZNdpm7FtQhNEpqV432TJdNZEMbXlDmG61P2vgILugKmu56r\ngZfgI1QMUSUzZrnH+DXn0GY9KycRKTpY6L8PSUeTVyhDUFlTrTchvbnFf7LpVRRj\n0+99EUxQFIogXt2rNuj6qioEpabh6rGtIPjICEkue75n2Y4Eu+pdPpSFAPNXLuMB\nCcvoydmxWkBcq/wrCWcTKdKbGKXEj1xvHXAdUwcmlhXpn1igxcwRtcpwrN8cyRRB\nddc1dDX6X/6iEnnWdDDWHZYjaMLUWVO0pPXzSEsZMFhS3wPvY1lg1Ertiag6DD0Q\nwnJq19fJ5M8ehu9qMBdHgPIWdcZBMXSvaQqZ8gBtMO5UyuLA5BTP0yb6Jh3foXCq\nCPihqYSCGUtXzupJCr/oE+jOaYNWjL5icEU0llA6lr71WWdj3b1OwrUTlrmgA0nK\nxZu6LrqRT+nxbd4phYbkqmhXccq9H/d8pcZwKwPtF+z8HoZXSddaACYFAqY4eaxa\nNRk2Zt1JJ+tUsNT9LLV1tUrQ+q1JsKlJp7LW60loljiex8uadsvzwnKIdoom8q0I\nroXHdrwwqyubf4yYApRckbgzW9gLPbclKSqsVFGsDB+KysDYmg3QlTpkrgGl2555\naQ7Z2TWWvcVL3y7z1l1F238m11LxKUY8Uvu7enpQ/gTrqQ1qqIi2/yv+LvZmAXWV\nCFO2lMafpmmHjHEAI5ifXYzZlHCXYBHGHYJdGALFuhODiQqF4pOJI8CX/00msnlJ\nbMH0+dGnk2AviiaLXb7eCZ7mELCX+Ah+00UU75Vdv7O3vhGHpjuMULvbLW2uo+cw\n6rogJ4SfUBb0t+yS970Xty650DgpHYxCzDwZZzrQqPuX6SeOD8AnXuJL3cl3B5YU\n60IPVJPsONIwvJlvZuiij4V8L95usGtvDVsexBKQlj3sSVZ5egICMBjkduEyDl3O\nxOZtdnqktsWNF5XYUfa/8/HUYnN35g0UktpmKlg0yxhAxUAn4lENAY8xvhMGsSCO\n-----END RSA PRIVATE KEY-----",
                "permissionElevation": "sudo",
                "permissionElevationUserName": "root",
                "permissionElevationPassword": "*******"
              }
            }
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Site
      summary: Site Scan Credentials
      description: Deletes all site credentials from the site.
      operationId: deleteAllSiteCredentials
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/site_credentials/{credentialId}:
    get:
      tags:
        - Site
      summary: Site Scan Credential
      description: Retrieves the specified site credential.
      operationId: getSiteCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: credentialId
          in: path
          description: The identifier of the site credential.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteCredential'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Scan Credential
      description: Updates the specified site credential.
      operationId: updateSiteCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: credentialId
          in: path
          description: The identifier of the site credential.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The specification of the site credential to update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteCredential'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param2
    delete:
      tags:
        - Site
      summary: Site Scan Credential
      description: Deletes the specified site credential.
      operationId: deleteSiteCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: credentialId
          in: path
          description: The identifier of the site credential.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/site_credentials/{credentialId}/enabled:
    put:
      tags:
        - Site
      summary: Site Credential Enablement
      description: Enable or disable the site credential for scans.
      operationId: enableSiteCredential
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: credentialId
          in: path
          description: The identifier of the site credential.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Flag indicating whether the credential is enabled for use during
          the scan.
        content:
          application/json:
            schema:
              type: boolean
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/tags:
    get:
      tags:
        - Site
      summary: Site Tags
      description: Retrieves the list of tags added to the sites.
      operationId: getSiteTags
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesTag'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Tags
      description: Updates the site's list of tags.
      operationId: setSiteTags
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A list of tag identifiers to replace the site's tags.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/sites/{id}/tags/{tagId}:
    put:
      tags:
        - Site
      summary: Site Tag
      description: Adds a tag to the site.
      operationId: addSiteTag
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Site
      summary: Site Tag
      description: Removes the specified tag from the site's tags.
      operationId: removeSiteTag
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: tagId
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/users:
    get:
      tags:
        - Site
      summary: Site Users Access
      description: Retrieve the list of non-administrator users that have access to
        the site.
      operationId: getSiteUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Site
      summary: Site Users Access
      description: Updates the site's access list.
      operationId: setSiteUsers
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: A list of user identifiers to replace the site's access list.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    post:
      tags:
        - Site
      summary: Site Users Access
      description: Grants a non-administrator user access to the specified site.
      operationId: addSiteUser
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifier of the user.
        content:
          application/json:
            schema:
              type: integer
              format: int32
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithUserIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/sites/{id}/users/{userId}:
    delete:
      tags:
        - Site
      summary: Site User Access
      description: Removes the specified user from the site's access list.
      operationId: removeSiteUser
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
        - name: userId
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/web_authentication/html_forms:
    get:
      tags:
        - Site
      summary: Web Authentication HTML Forms
      description: Retrieves all HTML form authentications configured in the site.
      operationId: getWebAuthHtmlForms
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesWebFormAuthentication'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sites/{id}/web_authentication/http_headers:
    get:
      tags:
        - Site
      summary: Web Authentication HTTP Headers
      description: Retrieves all HTTP header authentications configured in the site.
      operationId: getWebAuthHTTPHeaders
      parameters:
        - name: id
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesWebHeaderAuthentication'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/software:
    get:
      tags:
        - Asset
      summary: Software
      description: Returns all software enumerated on any asset.
      operationId: getSoftwares
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfSoftware'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/software/{id}:
    get:
      tags:
        - Asset
      summary: Software
      description: Returns the details for software.
      operationId: getSoftware
      parameters:
        - name: id
          in: path
          description: The identifier of the software.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Software'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/solutions:
    get:
      tags:
        - Vulnerability
      summary: Solutions
      description: Returns the details for all solutions.
      operationId: getSolutions
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSolution'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/solutions/{id}:
    get:
      tags:
        - Vulnerability
      summary: Solution
      description: Returns the details for a solution that can remediate one or more
        vulnerabilities.
      operationId: getSolution
      parameters:
        - name: id
          in: path
          description: The identifier of the solution.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Solution'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/solutions/{id}/prerequisites:
    get:
      tags:
        - Vulnerability
      summary: Solution Prerequisites
      description: Returns the solutions that must be executed in order for a solution
        to resolve a vulnerability.
      operationId: getPrerequisiteSolutions
      parameters:
        - name: id
          in: path
          description: The identifier of the solution.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithSolutionNaturalIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/solutions/{id}/supersedes:
    get:
      tags:
        - Vulnerability
      summary: Superseded Solutions
      description: Returns the solutions that are superseded by this solution.
      operationId: getSupersededSolutions
      parameters:
        - name: id
          in: path
          description: The identifier of the solution.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSolution'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/solutions/{id}/superseding:
    get:
      tags:
        - Vulnerability
      summary: Superseding Solutions
      description: Returns the solutions that supersede this solution.
      operationId: getSupersedingSolutions
      parameters:
        - name: id
          in: path
          description: The identifier of the solution.
          required: true
          schema:
            type: string
        - name: rollup
          in: query
          description: Whether to return only highest-level "rollup" superseding solutions.
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSolution'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sonar_queries:
    get:
      tags:
        - Asset Discovery
      summary: Sonar Queries
      description: Returns all sonar queries.
      operationId: getSonarQueries
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesSonarQuery'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Asset Discovery
      summary: Sonar Queries
      description: Creates a sonar query.
      operationId: createSonarQuery
      requestBody:
        description: param0
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SonarQuery'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceDiscoveryQueryIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Assets in IP Range
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" }
                    ]
                },
                "name": "Assets In IP Range"
            }
        - lang: Recently Scanned Rapid7 Assets
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "domain-contains", "domain": "acme.com" },
                        { "type": "scan-date-within-the-last", "days": "30" }
                    ]
                },
                "name": "Recently Scanned ACME Assets"
            }
        - lang: Recently Scanned Assets in IP Range
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" },
                        { "type": "scan-date-within-the-last", "days": "30" }
                    ]
                },
                "name": "Recently Scanned Assets in IP Range"
            }
      x-codegen-request-body-name: param0
  /api/3/sonar_queries/search:
    post:
      tags:
        - Asset Discovery
      summary: Sonar Query Search
      description: Executes a Sonar query to discover assets with the given search
        criteria.
      operationId: sonarQuerySearch
      requestBody:
        description: param0
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SonarCriteria'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DiscoveryAsset'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Assets in IP Range
          source: |-
            {
                "filters": [
                    { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" }
                ]
            }
        - lang: Recently Scanned Rapid7 Assets
          source: |-
            {
                "filters": [
                    { "type": "domain-contains", "domain": "acme.com"},
                    { "type": "scan-date-within-the-last", "days": "30"}
                ]
            }
        - lang: Recently Scanned Assets in IP Range
          source: |-
            {
                "filters": [
                    { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" },
                    { "type": "scan-date-within-the-last", "days": "30" }
                ]
            }
      x-codegen-request-body-name: param0
  /api/3/sonar_queries/{id}:
    get:
      tags:
        - Asset Discovery
      summary: Sonar Query
      description: Returns a sonar query.
      operationId: getSonarQuery
      parameters:
        - name: id
          in: path
          description: The identifier of the Sonar query.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SonarQuery'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Asset Discovery
      summary: Sonar Query
      description: Updates a sonar query.
      operationId: updateSonarQuery
      parameters:
        - name: id
          in: path
          description: The identifier of the Sonar query.
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: param1
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SonarQuery'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-code-samples:
        - lang: Assets in IP Range
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" }
                    ]
                },
                "name": "Assets In IP Range"
            }
        - lang: Recently Scanned Rapid7 Assets
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "domain-contains", "domain": "acme.com" },
                        { "type": "scan-date-within-the-last", "days": "30" }
                    ]
                },
                "name": "Recently Scanned ACME Assets"
            }
        - lang: Recently Scanned Assets in IP Range
          source: |-
            {
                "criteria": {
                    "filters": [
                        { "type": "ip-address-range", "lower": "192.168.1.1", "upper": "192.168.1.254" },
                        { "type": "scan-date-within-the-last", "days": "30" }
                    ]
                },
                "name": "Recently Scanned Assets in IP Range"
            }
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Asset Discovery
      summary: Sonar Query
      description: Removes a sonar query.
      operationId: deleteSonarQuery
      parameters:
        - name: id
          in: path
          description: The identifier of the Sonar query.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/sonar_queries/{id}/assets:
    get:
      tags:
        - Asset Discovery
      summary: Sonar Query Assets
      description: Returns the assets that are discovered by a Sonar query.
      operationId: getSonarQueryAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the Sonar query.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourcesDiscoveryAsset'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags:
    get:
      tags:
        - Tag
      summary: Tags
      description: Returns all tags.
      operationId: getTags
      parameters:
        - name: name
          in: query
          description: name
          schema:
            type: string
        - name: type
          in: query
          description: type
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfTag'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Tag
      summary: Tags
      description: Creates a new tag.
      operationId: createTag
      requestBody:
        description: The details of the tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferenceWithTagIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/tags/{id}:
    get:
      tags:
        - Tag
      summary: Tag
      description: Returns a tag.
      operationId: getTag
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Tag
      summary: Tag
      description: Updates the details of a tag. For more information about accepted
        fields for the tag search criteria see the PUT /search_criteria documentation.
      operationId: updateTag
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the tag.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
    delete:
      tags:
        - Tag
      summary: Tag
      description: Deletes the tag.
      operationId: deleteTag
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/asset_groups:
    get:
      tags:
        - Tag
      summary: Tag Asset Groups
      description: Returns the asset groups associated with the tag.
      operationId: getTagAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithAssetGroupIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Tag
      summary: Tag Asset Groups
      description: Sets the asset groups associated with the tag.
      operationId: setTaggedAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The asset groups to add to the tag.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Tag
      summary: Tag Asset Groups
      description: Removes the associations between the tag and all asset groups.
      operationId: untagAllAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/asset_groups/{assetGroupId}:
    put:
      tags:
        - Tag
      summary: Tag Asset Group
      description: Adds an asset group to this tag.
      operationId: tagAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The asset group identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Tag
      summary: Tag Asset Group
      description: Removes an asset group from this tag.
      operationId: untagAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The asset group identifier.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/assets:
    get:
      tags:
        - Tag
      summary: Tag Assets
      description: Returns the assets tagged with a tag.
      operationId: getTaggedAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaggedAssetReferences'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/assets/{assetId}:
    put:
      tags:
        - Tag
      summary: Tag Asset
      description: Adds an asset to the tag.
      operationId: tagAsset
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Tag
      summary: Tag Asset
      description: 'Removes an asset from the tag. Note: The asset must be added through
        the asset or tag, if the asset is added using a site, asset group, or search
        criteria this will not remove the asset.'
      operationId: untagAsset
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetId
          in: path
          description: The identifier of the asset.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/search_criteria:
    get:
      tags:
        - Tag
      summary: Tag Search Criteria
      description: Returns the search criteria associated with the tag.
      operationId: getTagSearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchCriteria'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Tag
      summary: Tag Search Criteria
      description: |
        Updates the search criteria associated with the tag.

        The following table outlines the search criteria fields and the available operators:
        | Field | Operators |
        | ---------- | ---------------- |
        | asset name | is,is not,starts with,ends with,contains,does not contain,is empty,is not empty,is like,not like |
        | asset risk score | is,is not,in range,greater than,less than |
        | container image | is,is not,starts with,ends with,contains,does not contain,is like,not like |
        | container status | is,is not |
        | containers | are |
        | CVE IDs | is,is not,contains,does not contain |
        | CVSS Access Complexity | is,is not |
        | CVSS Authentication Required | is,is not |
        | CVSS Access Vector | is,is not |
        | CVSS Availability Impact | is,is not |
        | CVSS Confidentiality Impact | is,is not |
        | CVSS Integrity Impact | is,is not |
        | CVSS Access Complexity | is,is not |
        | host type | in,not in |
        | asset IP Address | is,is not,in range,not in range,is like,not like |
        | asset IP Address Type | in,not in |
        | asset last scan date | is on or before,is on or after,is between,is earlier than,is within the last |
        | mobile device last sync time | is within the last,is earlier than |
        | open ports | is,is not,in range |
        | asset operating system | contains,does not contain,is empty,is not empty |
        | asset alternate address type | in |
        | asset PCI compliance | is |
        | asset service name | contains,does not contain |
        | asset site ID | in,not in |
        | asset software | contains,does not contain|
        | asset Criticality tag | is,is not,is greater than,is less than,is applied,is not applied |
        | asset Custom tag | is,is not,starts with, ends with,contains,does not contain,is applied,is not applied |
        | asset Location tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |
        | asset Owner tag | is,is not,starts with,ends with,contains,does not contain,is applied,is not applied |
        | asset vulnerability validated status | are |
        | asset VAsset cluster | is,is not,contains,does not contain,starts with |
        | asset VAsset datacenter | is,is not |
        | asset VAsset host name | is,is not,contains,does not contain,starts with |
        | asset VAsset power state | in,not in |
        | asset VAsset resource pool path | contains,does not contain |
        | asset vulnerability assessed | is on or before,is on or after,is between,is earlier than,is within the last |
        | asset vulnerability category | is,is not,starts with,ends with,contains,does not contain|
        | asset vulnerability CVSS score | is,is not,in range,is greater than,is less than |
        | asset vulnerability exposures | includes,does not include |
        | asset vulnerability title | contains,does not contain,is,is not,starts with,ends with |

        The following table outlines the operators and the values associated with them:
        | Operator | Values |
        | -------- | ------ |
        | are | A single string property named "value" |
        | is between | A number property named "lower" and a number property named "upper" |
        | contains | A single string property named "value" |
        | does not contain | A single string property named "value" |
        | is earlier than | A single number property named "value" |
        | ends with | A single string property named "value" |
        | is greater than | A single number property named "value" |
        | in | An array property named "values" |
        | not in | An array property named "values" |
        | in range | A number property named "lower" and a number property named "upper" |
        | includes | An array property named "values" |
        | is | A single string property named "value" |
        | is not | A single string property named "value" |
        | is applied | No value |
        | is not applied | No value |
        | is empty | No value |
        | is not empty | No value |
        | less than | A single number property named "value" |
        | like | A single string property named "value" |
        | not contains | A single string property named "value" |
        | not in range | A number property named "lower" and a number property named "upper" |
        | not like | A single string property named "value" |
        | is on or after | A single string property named "value", which is the date in ISO8601 format (yyyy-MM-dd) |
        | is on or before | A single string property named "value", which is the date in ISO8601 format (yyyy-MM-dd) |
        | starts with | A single string property named "value" |
        | is within the last | A single number property named "value" |

        The following fields have enumerated values:
        | Field | Acceptable Values |
        | ----- | ----------------- |
        | containers | 0=present, 1=not present |
        | asset vulnerability validated status | 0=present, 1=not present |
        | asset PCI compliance | 0=fail, 1=pass |
        | asset alternate address type | 0=IPv4, 1=IPv6 |
        | asset IP Address Type | 0=IPv4, 1=IPv6 |
        | host type | 0=Unknown, 1=Guest, 2=Hypervisor, 3=Physical, 4=Mobile |
        | CVSS Access Complexity | L=Low, M=Medium, H=High |
        | CVSS Integrity Impact | N=None, P=Partial, C=Complete |
        | CVSS Confidentiality Impact | N=None, P=Partial, C=Complete |
        | CVSS Availability Impact | N=None, P=Partial, C=Complete |
        | CVSS Access Vector | L=Local, A=Adjacent, N=Network |
        | CVSS Authentication Required | N=None, S=Single, M=Multiple |
        | CVSS Access Complexity | L=Low, M=Medium, H=High |
        | container status | created, running, paused, restarting, exited, dead, unknown |
      operationId: updateTagSearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the search criteria.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchCriteria'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Tag
      summary: Tag Search Criteria
      description: Removes the search criteria associated with the tag.
      operationId: removeTagSearchCriteria
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/sites:
    get:
      tags:
        - Tag
      summary: Tag Sites
      description: Returns the sites associated with the tag.
      operationId: getTaggedSites
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithSiteIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Tag
      summary: Tag Sites
      description: Sets the sites associated with the tag.
      operationId: setTaggedSites
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The sites to add to the tag.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - Tag
      summary: Tag Sites
      description: Removes the associations between the tag and the sites.
      operationId: removeTaggedSites
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/tags/{id}/sites/{siteId}:
    put:
      tags:
        - Tag
      summary: Tag Site
      description: Adds a site to this tag.
      operationId: tagSite
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: siteId
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Tag
      summary: Tag Site
      description: Removes a site from this tag.
      operationId: untagSite
      parameters:
        - name: id
          in: path
          description: The identifier of the tag.
          required: true
          schema:
            type: integer
            format: int32
        - name: siteId
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users:
    get:
      tags:
        - User
      summary: Users
      description: Returns all defined users. <span class="authorization">Global Administrator</span>
      operationId: getUsers
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfUser'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - User
      summary: Users
      description: Creates a new user. <span class="authorization">Global Administrator</span>
      operationId: createUser
      requestBody:
        description: The details of the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceUserIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/users/{id}:
    get:
      tags:
        - User
      summary: User
      description: Returns the details for a user.<span class="authorization">Global
        Administrator, Current User</span>
      operationId: getUser
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - User
      summary: User
      description: Updates the details of a user. <span class="authorization">Global
        Administrator</span>
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The details of the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/users/{id}/2FA:
    get:
      tags:
        - User
      summary: Two-Factor Authentication
      description: Retrieves the current authentication token seed (key) for the user,
        if configured.
      operationId: getTwoFactorAuthenticationKey
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResource'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - User
      summary: Two-Factor Authentication
      description: Sets the authentication token seed (key) for the user. This key
        may be then be used in the appropriate 2FA authenticator.
      operationId: setTwoFactorAuthentication
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The authentication token seed (key) to use for the user.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    post:
      tags:
        - User
      summary: Two-Factor Authentication
      description: Regenerates a new authentication token seed (key) and updates it
        for the user. This key may be then be used in the appropriate 2FA authenticator.
      operationId: regenerateTwoFactorAuthentication
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResource'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/asset_groups:
    get:
      tags:
        - User
      summary: Asset Groups Access
      description: Returns the asset groups to which the user has access.
      operationId: getUserAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithAssetGroupIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - User
      summary: Asset Groups Access
      description: Updates the asset groups to which the user has access. Individual
        asset group access cannot be granted to users with the `allAssetGroups` permission.
        <span class="authorization">Global Administrator</span>
      operationId: setUserAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifiers of the asset groups to grant the user access
          to. Ignored if user has access to `allAssetGroups`.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - User
      summary: Asset Groups Access
      description: Revokes access to all asset groups from the user.
      operationId: removeAllUserAssetGroups
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/asset_groups/{assetGroupId}:
    put:
      tags:
        - User
      summary: Asset Group Access
      description: Grants the user access to the asset group. Individual asset group
        access cannot be granted to users with the `allAssetGroups` permission. <span
        class="authorization">Global Administrator</span>
      operationId: addUserAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - User
      summary: Asset Group Access
      description: Grants the user access to the asset group. Individual asset group
        access cannot be granted to users with the `allAssetGroups` permission. <span
        class="authorization">Global Administrator</span>
      operationId: removeUserAssetGroup
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
        - name: assetGroupId
          in: path
          description: The identifier of the asset group.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/lock:
    delete:
      tags:
        - User
      summary: Unlock Account
      description: Unlocks a locked user account that has too many failed authentication
        attempts. Disabled accounts may not be unlocked.
      operationId: unlockUser
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/password:
    put:
      tags:
        - User
      summary: Password Reset
      description: Changes the password for the user. Users may only change their
        own password.
      operationId: resetPassword
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The new password to set.
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/users/{id}/privileges:
    get:
      tags:
        - User
      summary: User Privileges
      description: Returns the privileges granted to the user by their role. <span
        class="authorization">Global Administrator</span>
      operationId: getUserPrivileges
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Privileges'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/sites:
    get:
      tags:
        - User
      summary: Sites Access
      description: Returns the sites to which the user has access.
      operationId: getUserSites
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithSiteIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - User
      summary: Sites Access
      description: Updates the sites to which the user has access. Individual site
        access cannot be granted to users with the `allSites` permission. <span class="authorization">Global
        Administrator</span>
      operationId: setUserSites
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: The identifiers of the sites to grant the user access to. Ignored
          if the user has access to `allSites`.
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
    delete:
      tags:
        - User
      summary: Sites Access
      description: Revokes access to all sites from the user.
      operationId: removeAllUserSites
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/users/{id}/sites/{siteId}:
    put:
      tags:
        - User
      summary: Site Access
      description: Grants the user access to the site. Individual site access cannot
        be granted to users with the `allSites` permission. <span class="authorization">Global
        Administrator</span>
      operationId: addUserSite
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
        - name: siteId
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - User
      summary: Site Access
      description: Grants the user access to the site. Individual site access cannot
        be granted to users with the `allSites` permission. <span class="authorization">Global
        Administrator</span>
      operationId: removeUserSite
      parameters:
        - name: id
          in: path
          description: The identifier of the user.
          required: true
          schema:
            type: integer
            format: int32
        - name: siteId
          in: path
          description: The identifier of the site.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities:
    get:
      tags:
        - Vulnerability
      summary: Vulnerabilities
      description: Returns all vulnerabilities that can be assessed during a scan.
      operationId: getVulnerabilities
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerability'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability
      description: Returns the details for a vulnerability.
      operationId: getVulnerability
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vulnerability'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/assets:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability Affected Assets
      description: Get the assets affected by the vulnerability.
      operationId: getAffectedAssets
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithAssetIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/checks:
    get:
      tags:
        - Vulnerability Check
      summary: Vulnerability Checks
      description: Returns the vulnerability checks that assess for a specific vulnerability
        during a scan.
      operationId: getVulnerabilityChecksForVulnerability
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithVulnerabilityCheckIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/exploits:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability Exploits
      description: Returns the exploits that can be used to exploit a vulnerability.
      operationId: getVulnerabilityExploits
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfExploit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/malware_kits:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability Malware Kits
      description: Returns the malware kits that are known to be used to exploit the
        vulnerability.
      operationId: getVulnerabilityMalwareKits
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfMalwareKit'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/references:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability References
      description: Returns the external references that may be associated to a vulnerability.
      operationId: getVulnerabilityReferences_1
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityReference'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerabilities/{id}/solutions:
    get:
      tags:
        - Vulnerability
      summary: Vulnerability Solutions
      description: Returns all solutions (across all platforms) that may be used to
        remediate this vulnerability.
      operationId: getVulnerabilitySolutions
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithSolutionNaturalIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_categories:
    get:
      tags:
        - Vulnerability
      summary: Categories
      description: Returns all vulnerabilities categories that can be assigned to
        a vulnerability. These categories group and label vulnerabilities by general
        purpose, affected systems, vendor, etc.
      operationId: getVulnerabilityCategories
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityCategory'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_categories/{id}:
    get:
      tags:
        - Vulnerability
      summary: Category
      description: Returns the details for a vulnerability category.
      operationId: getVulnerabilityCategory
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability category.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityCategory'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_categories/{id}/vulnerabilities:
    get:
      tags:
        - Vulnerability
      summary: Category Vulnerabilities
      description: Returns hypermedia links to the vulnerabilities that are in a vulnerability
        category.
      operationId: getVulnerabilityCategoryVulnerabilities
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability category.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithVulnerabilityNaturalIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_checks:
    get:
      tags:
        - Vulnerability Check
      summary: Checks
      description: Returns vulnerability checks. Optional search and filtering parameters
        may be supplied to refine the results. Searching allows full text search of
        the vulnerability details a check is related to.
      operationId: getVulnerabilityChecks
      parameters:
        - name: search
          in: query
          description: Vulnerability search term to find vulnerability checks for. e.g.
            `"ssh"`.
          schema:
            type: string
        - name: safe
          in: query
          description: Whether to return vulnerability checks that are considered "safe"
            to run. Defaults to return safe and unsafe checks.
          schema:
            type: boolean
        - name: potential
          in: query
          description: Whether to only return checks that result in potentially vulnerable
            results. Defaults to return all checks.
          schema:
            type: boolean
        - name: requiresCredentials
          in: query
          description: Whether to only return checks that require credentials in order
            to successfully execute. Defaults to return all checks.
          schema:
            type: boolean
        - name: unique
          in: query
          description: Whether to only return checks that guarantee to be executed once-and-only
            once on a host resulting in a unique result. False returns checks that can
            result in multiple occurrences of the same vulnerability on a host.
          schema:
            type: boolean
        - name: type
          in: query
          description: The type of vulnerability checks to return. See <a href="#operation/vulnerabilityCheckTypesUsingGET">Check
            Types</a> for all available types.
          schema:
            type: string
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityCheck'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_checks/{id}:
    get:
      tags:
        - Vulnerability Check
      summary: Check
      description: Returns the vulnerability check.
      operationId: vulnerabilityCheck
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability check.
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityCheck'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_checks_types:
    get:
      tags:
        - Vulnerability Check
      summary: Check Types
      description: Returns the vulnerability check types. The type groups related
        vulnerability checks by their purpose, property, or related characteristic.
      operationId: getVulnerabilityCheckTypes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReferencesWithVulnerabilityCheckTypeIDLink'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_exceptions:
    get:
      tags:
        - Vulnerability Exception
      summary: Exceptions
      description: Returns all exceptions defined on vulnerabilities.
      operationId: getVulnerabilityExceptions
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityException'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    post:
      tags:
        - Vulnerability Exception
      summary: Exceptions
      description: Creates a vulnerability exception.
      operationId: createVulnerabilityException
      requestBody:
        description: The vulnerability exception to create.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VulnerabilityException'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedReferenceVulnerabilityExceptionIDLink'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param0
  /api/3/vulnerability_exceptions/{id}:
    get:
      tags:
        - Vulnerability Exception
      summary: Exception
      description: Returns an exception made on a vulnerability.
      operationId: getVulnerabilityException
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability exception.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityException'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    delete:
      tags:
        - Vulnerability Exception
      summary: Exception
      description: Removes an exception made on a vulnerability.
      operationId: removeVulnerabilityException
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_exceptions/{id}/expires:
    get:
      tags:
        - Vulnerability Exception
      summary: Exception Expiration
      description: Get the expiration date for a vulnerability exception.
      operationId: getVulnerabilityExceptionExpiration
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
    put:
      tags:
        - Vulnerability Exception
      summary: Exception Expiration
      description: Set the expiration date for a vulnerability exception. This must
        be a valid date in the future.
      operationId: updateVulnerabilityExceptionExpiration
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: param1
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param1
  /api/3/vulnerability_exceptions/{id}/{status}:
    post:
      tags:
        - Vulnerability Exception
      summary: Exception Status
      description: 'Update the status of the vulnerability exception. The status can
        be one of: `"recall"`, `"approve"`, or `"reject"`.'
      operationId: updateVulnerabilityExceptionStatus
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: status
          in: path
          description: Exception Status
          required: true
          schema:
            type: string
            enum:
              - recall
              - approve
              - reject
      requestBody:
        description: param2
        content:
          application/json:
            schema:
              type: string
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Links'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestError'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
      x-codegen-request-body-name: param2
  /api/3/vulnerability_references:
    get:
      tags:
        - Vulnerability
      summary: References
      description: Returns the external references that may be associated to a vulnerability.
      operationId: getVulnerabilityReferences
      parameters:
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerabilityReference'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_references/{id}:
    get:
      tags:
        - Vulnerability
      summary: Reference
      description: Returns an external vulnerability reference.
      operationId: getVulnerabilityReference
      parameters:
        - name: id
          in: path
          description: The identifier of the vulnerability reference.
          required: true
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VulnerabilityReference'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
  /api/3/vulnerability_references/{id}/vulnerabilities:
    get:
      tags:
        - Vulnerability
      summary: Reference Vulnerabilities
      description: Returns the vulnerabilities that are referenced by an external
        reference.
      operationId: getVulnerabilityReferenceVulnerabilities
      parameters:
        - name: id
          in: path
          description: id
          required: true
          schema:
            type: integer
            format: int32
        - name: page
          in: query
          description: The index of the page (zero-based) to retrieve.
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of records per page to retrieve.
          schema:
            type: integer
            format: int32
            default: 10
        - name: sort
          in: query
          description: 'The criteria to sort the records by, in the format: `property[,ASC|DESC]`.
          The default sort order is ascending. Multiple sort criteria can be specified
          using multiple sort query parameters.'
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfVulnerability'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
        503:
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableError'
components:
  schemas:
    Account:
      type: object
      properties:
        service:
          type: string
      description: ""
      discriminator:
        propertyName: ""
    AdditionalInformation:
      type: object
      properties:
        html:
          type: string
          description: Hypertext Markup Language (HTML) representation of the content.
          example: ""
        text:
          type: string
          description: Textual representation of the content.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    Address:
      type: object
      properties:
        ip:
          type: string
          description: The IPv4 or IPv6 address.
          example: 123.245.34.235
        mac:
          type: string
          description: The Media Access Control (MAC) address. The format is six groups
            of two hexadecimal digits separated by colons.
          example: 12:34:56:78:90:AB
      description: ""
      discriminator:
        propertyName: ""
    AdhocScan:
      type: object
      properties:
        engineId:
          type: integer
          description: The identifier of the scan engine.
          format: int32
        hosts:
          type: array
          description: The hosts that should be included as a part of the scan. This
            should be a mixture of IP Addresses and Hostnames as a String array.
          items:
            type: string
        name:
          type: string
          description: The user-driven scan name for the scan.
          example: ""
        templateId:
          type: string
          description: The identifier of the scan template
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    AdvisoryLink:
      type: object
      properties:
        href:
          type: string
          description: The hypertext reference for the vulnerability reference.
          example: https://support.microsoft.com/en-us/kb/4041689
        rel:
          type: string
          description: The relation of the hypermedia link, `"Advisory"`.
          example: Advisory
      description: ""
      discriminator:
        propertyName: ""
    Alert:
      required:
        - enabled
        - name
        - notification
      type: object
      properties:
        enabled:
          type: boolean
          description: Flag indicating the alert is enabled.
          example: false
        enabledScanEvents:
          $ref: '#/components/schemas/ScanEvents'
        enabledVulnerabilityEvents:
          $ref: '#/components/schemas/VulnerabilityEvents'
        id:
          type: integer
          description: The identifier of the alert.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        maximumAlerts:
          minimum: 1
          type: integer
          description: The maximum number of alerts that will be issued. To disable
            maximum alerts, omit the property in the request or specify the property
            with a value of `null`.
          format: int32
        name:
          type: string
          description: The name of the alert.
          example: ""
        notification:
          type: string
          description: The type of alert.
          example: ""
          enum:
            - SMTP
            - SNMP
            - Syslog
      description: ""
      discriminator:
        propertyName: ""
    AssessmentResult:
      required:
        - status
      type: object
      properties:
        checkId:
          type: string
          description: The identifier of the vulnerability check.
          example: ssh-openssh-x11uselocalhost-x11-forwarding-session-hijack
        exceptions:
          type: array
          description: If the result is vulnerable with exceptions applied, the identifier(s)
            of the exceptions actively applied to the result.
          items:
            type: integer
            format: int32
        key:
          type: string
          description: An additional discriminating key used to uniquely identify
            between multiple instances of results on the same finding.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        port:
          type: integer
          description: The port of the service the result was discovered on.
          format: int32
          example: 22
        proof:
          type: string
          description: The proof explaining why the result was found vulnerable. The
            proof may container embedded HTML formatting markup.
          example: <p><p>OpenBSD OpenSSH 4.3 on Linux</p></p>
        protocol:
          type: string
          description: The protocol of the service the result was discovered on.
          example: tcp
          enum:
            - ip
            - icmp
            - igmp
            - ggp
            - tcp
            - pup
            - udp
            - idp
            - esp
            - nd
            - raw
        status:
          type: string
          description: The status of the vulnerability check result.
          example: vulnerable-version
          enum:
            - unknown
            - not-vulnerable
            - vulnerable
            - vulnerable-version
            - vulnerable-potential
            - vulnerable-with-exception-applied
            - vulnerable-version-with-exception-applied
            - vulnerable-potential-with-exception-applied
      description: ""
      discriminator:
        propertyName: ""
    Asset:
      type: object
      properties:
        addresses:
          type: array
          description: All addresses discovered on the asset.
          items:
            $ref: '#/components/schemas/Address'
        assessedForPolicies:
          type: boolean
          description: Whether the asset has been assessed for policies at least once.
          readOnly: true
          example: false
        assessedForVulnerabilities:
          type: boolean
          description: Whether the asset has been assessed for vulnerabilities at
            least once.
          readOnly: true
          example: true
        configurations:
          type: array
          description: Configuration key-values pairs enumerated on the asset.
          items:
            $ref: '#/components/schemas/Configuration'
        databases:
          type: array
          description: The databases enumerated on the asset.
          items:
            $ref: '#/components/schemas/Database'
        files:
          type: array
          description: The files discovered with searching on the asset.
          items:
            $ref: '#/components/schemas/File'
        history:
          type: array
          description: The history of changes to the asset over time.
          readOnly: true
          items:
            $ref: '#/components/schemas/AssetHistory'
        hostName:
          type: string
          description: The primary host name (local or FQDN) of the asset.
          example: corporate-workstation-1102DC.acme.com
        hostNames:
          type: array
          description: All host names or aliases discovered on the asset.
          items:
            $ref: '#/components/schemas/HostName'
        id:
          type: integer
          description: The identifier of the asset.
          format: int64
          example: 282
        ids:
          type: array
          description: Unique identifiers found on the asset, such as hardware or
            operating system identifiers.
          items:
            $ref: '#/components/schemas/UniqueId'
        ip:
          type: string
          description: The primary IPv4 or IPv6 address of the asset.
          example: 182.34.74.202
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        mac:
          type: string
          description: The primary Media Access Control (MAC) address of the asset.
            The format is six groups of two hexadecimal digits separated by colons.
          example: AB:12:CD:34:EF:56
        os:
          type: string
          description: The full description of the operating system of the asset.
          example: Microsoft Windows Server 2008 Enterprise Edition SP1
        osFingerprint:
          $ref: '#/components/schemas/OperatingSystem'
        rawRiskScore:
          type: number
          description: The base risk score of the asset.
          format: double
          readOnly: true
          example: 31214.3
        riskScore:
          type: number
          description: The risk score (with criticality adjustments) of the asset.
          format: double
          readOnly: true
          example: 37457.16
        services:
          type: array
          description: The services discovered on the asset.
          items:
            $ref: '#/components/schemas/Service'
        software:
          type: array
          description: The software discovered on the asset.
          items:
            $ref: '#/components/schemas/Software'
        type:
          type: string
          description: The type of asset.
          example: ""
          enum:
            - unknown
            - guest
            - hypervisor
            - physical
            - mobile
        userGroups:
          type: array
          description: The group accounts enumerated on the asset.
          items:
            $ref: '#/components/schemas/GroupAccount'
        users:
          type: array
          description: The user accounts enumerated on the asset.
          items:
            $ref: '#/components/schemas/UserAccount'
        vulnerabilities:
          $ref: '#/components/schemas/AssetVulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    AssetCreate:
      required:
        - date
      type: object
      properties:
        addresses:
          type: array
          description: All addresses discovered on the asset.
          items:
            $ref: '#/components/schemas/Address'
        assessedForPolicies:
          type: boolean
          description: Whether the asset has been assessed for policies at least once.
          readOnly: true
          example: false
        assessedForVulnerabilities:
          type: boolean
          description: Whether the asset has been assessed for vulnerabilities at
            least once.
          readOnly: true
          example: true
        configurations:
          type: array
          description: Configuration key-values pairs enumerated on the asset.
          items:
            $ref: '#/components/schemas/Configuration'
        cpe:
          type: string
          description: The Common Platform Enumeration (CPE) of the operating system.
            This is the tertiary means of specifying the operating system fingerprint.
            Use `"osFingerprint"` or `"os"` as a more accurate means of defining the
            operating system.
          example: ""
        databases:
          type: array
          description: The databases enumerated on the asset.
          items:
            $ref: '#/components/schemas/Database'
        date:
          type: string
          description: The date the data was collected on the asset.
          example: ""
        description:
          type: string
          description: The description of the source or collection of information
            on the asset. This description will appear in the history of the asset
            for future auditing purposes.
          example: ""
        files:
          type: array
          description: The files discovered with searching on the asset.
          items:
            $ref: '#/components/schemas/File'
        history:
          type: array
          description: The history of changes to the asset over time.
          readOnly: true
          items:
            $ref: '#/components/schemas/AssetHistory'
        hostName:
          $ref: '#/components/schemas/HostName'
        hostNames:
          type: array
          description: Additional host names for the asset.
          items:
            $ref: '#/components/schemas/HostName'
        id:
          type: integer
          description: The identifier of the asset.
          format: int64
          example: 282
        ids:
          type: array
          description: Unique identifiers found on the asset, such as hardware or
            operating system identifiers.
          items:
            $ref: '#/components/schemas/UniqueId'
        ip:
          type: string
          description: The primary IPv4 or IPv6 address of the asset.
          example: 182.34.74.202
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        mac:
          type: string
          description: The primary Media Access Control (MAC) address of the asset.
            The format is six groups of two hexadecimal digits separated by colons.
          example: AB:12:CD:34:EF:56
        os:
          type: string
          description: Free-form textual description of the operating system of the
            asset, typically from a fingerprinting source. This input will be parsed
            to produce a full fingerprint. This is the secondary means of specifying
            the operating system. Use `osFingerprint` for a more accurate definition.
          example: ""
        osFingerprint:
          $ref: '#/components/schemas/OperatingSystem'
        rawRiskScore:
          type: number
          description: The base risk score of the asset.
          format: double
          readOnly: true
          example: 31214.3
        riskScore:
          type: number
          description: The risk score (with criticality adjustments) of the asset.
          format: double
          readOnly: true
          example: 37457.16
        services:
          type: array
          description: The services discovered on the asset.
          items:
            $ref: '#/components/schemas/Service'
        software:
          type: array
          description: The software discovered on the asset.
          items:
            $ref: '#/components/schemas/Software'
        type:
          type: string
          description: The type of asset.
          example: ""
        userGroups:
          type: array
          description: The group accounts enumerated on the asset.
          items:
            $ref: '#/components/schemas/GroupAccount'
        users:
          type: array
          description: The user accounts enumerated on the asset.
          items:
            $ref: '#/components/schemas/UserAccount'
        vulnerabilities:
          $ref: '#/components/schemas/AssetVulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    AssetCreatedOrUpdatedReference:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/ReferenceWithAssetIDLink'
        statusCode:
          type: string
          enum:
            - "100"
            - "101"
            - "102"
            - "103"
            - "200"
            - "201"
            - "202"
            - "203"
            - "204"
            - "205"
            - "206"
            - "207"
            - "208"
            - "226"
            - "300"
            - "301"
            - "302"
            - "303"
            - "304"
            - "305"
            - "307"
            - "308"
            - "400"
            - "401"
            - "402"
            - "403"
            - "404"
            - "405"
            - "406"
            - "407"
            - "408"
            - "409"
            - "410"
            - "411"
            - "412"
            - "413"
            - "414"
            - "415"
            - "416"
            - "417"
            - "418"
            - "419"
            - "420"
            - "421"
            - "422"
            - "423"
            - "424"
            - "426"
            - "428"
            - "429"
            - "431"
            - "500"
            - "501"
            - "502"
            - "503"
            - "504"
            - "505"
            - "506"
            - "507"
            - "508"
            - "509"
            - "510"
            - "511"
      description: ""
      discriminator:
        propertyName: ""
    AssetGroup:
      required:
        - name
        - type
      type: object
      properties:
        assets:
          type: integer
          description: The number of assets that belong to the asset group.
          format: int32
          readOnly: true
          example: 768
        description:
          type: string
          description: The description of the asset group.
          example: Assets with unacceptable high risk required immediate remediation.
        id:
          type: integer
          description: The identifier of the asset group.
          format: int32
          readOnly: true
          example: 61
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the asset group.
          example: High Risk Assets
        riskScore:
          type: number
          description: The total risk score of all assets that belong to the asset
            group.
          format: double
          readOnly: true
          example: 4457823.78
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        type:
          type: string
          description: The type of the asset group.
          example: dynamic
          enum:
            - static
            - dynamic
        vulnerabilities:
          $ref: '#/components/schemas/Vulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    AssetHistory:
      type: object
      properties:
        date:
          type: string
          description: The date the asset information was collected or changed.
          example: 2018-04-09T06:23:49Z
        description:
          type: string
          description: Additional information describing the change.
          example: ""
        scanId:
          type: integer
          description: If a scan-oriented change, the identifier of the corresponding
            scan the asset was scanned in.
          format: int64
          example: 12
        type:
          type: string
          description: |-
            The type of change. May be one of:
            | Type                                | Source of Data                                              |
            | ----------------------------------- | ----------------------------------------------------------- |
            | `ASSET-IMPORT`, `EXTERNAL-IMPORT`   | External source such as the API                             |
            | `EXTERNAL-IMPORT-APPSPIDER`         | Rapid7 InsightAppSec (previously known as AppSpider)        |
            | `SCAN`                              | Scan engine scan                                            |
            | `ACTIVE-SYNC`                       | ActiveSync                                                  |
            | `SCAN-LOG-IMPORT`                   | Manual import of a scan log                                 |
            | `VULNERABILITY_EXCEPTION_APPLIED`   | Vulnerability exception applied                             |
            | `VULNERABILITY_EXCEPTION_UNAPPLIED` | Vulnerability exception unapplied                           |
          example: SCAN
        user:
          type: string
          description: If a vulnerability exception change, the login name of the
            user that performed the operation.
          example: ""
        version:
          type: integer
          description: 'The version number of the change (a chronological incrementing
            number starting from 1). '
          format: int32
          example: 8
        vulnerabilityExceptionId:
          type: integer
          description: If a vulnerability exception change, the identifier of the
            vulnerability exception that caused the change.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    AssetPolicy:
      type: object
      properties:
        benchmarkName:
          type: string
          description: The name of the policy's benchmark.
          example: ""
        benchmarkVersion:
          type: string
          description: The version number of the benchmark that includes the policy.
          example: ""
        category:
          type: string
          description: A grouping of similar benchmarks based on their source, purpose,
            or other criteria. Examples include FDCC, USGCB, and CIS.
          example: ""
        description:
          type: string
          description: The description of the policy.
          example: ""
        failedAssetsCount:
          type: integer
          description: The number of assets that are not compliant with the policy.
            The assets considered in the calculation are based on the user's list
            of accessible assets.
          format: int32
        failedRulesCount:
          type: integer
          description: The number of rules in the policy that are not compliant with
            any scanned assets. The assets considered in the calculation are based
            on the user's list of accessible assets.
          format: int32
        id:
          type: string
          description: The textual representation of the policy identifier.
          example: ""
        isCustom:
          type: boolean
          description: A flag indicating whether the policy is custom.
          example: false
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        notApplicableAssetsCount:
          type: integer
          description: The number of assets that were attempted to be scanned, but
            are not applicable to the policy. The assets considered in the calculation
            are based on the user's list of accessible assets.
          format: int32
        notApplicableRulesCount:
          type: integer
          description: The number of rules in the policy that are not applicable with
            any scanned assets. The assets considered in the calculation are based
            on the user's list of accessible assets.
          format: int32
        passedAssetsCount:
          type: integer
          description: The number of assets that are compliant with the policy. The
            assets considered in the calculation are based on the user's list of accessible
            assets.
          format: int32
        passedRulesCount:
          type: integer
          description: The number of rules in the policy that are compliant with all
            scanned assets. The assets considered in the calculation are based on
            the user's list of accessible assets.
          format: int32
        policyName:
          type: string
          description: The name of the policy.
          example: ""
        ruleCompliance:
          type: number
          description: The ratio of PASS results for the rules to the total number
            of rules in each policy.
          format: double
        ruleComplianceDelta:
          type: number
          description: The change in rule compliance between the last two scans of
            all assets. The list of scanned policies is based on the user's list of
            accessible assets.
          format: double
        scope:
          type: string
          description: The textual representation of the policy scope. Policies that
            are automatically available have `"Built-in"` scope, whereas policies
            created by users have scope as `"Custom"`.
          example: ""
        status:
          type: string
          description: The overall compliance status of the policy.
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
        surrogateId:
          type: integer
          description: The identifier of the policy
          format: int64
        title:
          type: string
          description: The title of the policy as visible to the user.
          example: ""
        unscoredRules:
          type: integer
          description: The number of rules defined in the policy with a role of "unscored".
            These rules will not affect rule compliance scoring for the policy.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    AssetPolicyAssessment:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        total:
          type: integer
          description: The total number of assets.
          format: int32
        totalFailed:
          type: integer
          description: The total number of assets that are not compliant.
          format: int32
        totalNotApplicable:
          type: integer
          description: The total number of assets that are not applicable.
          format: int32
        totalPassed:
          type: integer
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    AssetPolicyItem:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/AssetPolicyAssessment'
        description:
          type: string
          description: A description of the policy rule or group.
          example: ""
        hasOverride:
          type: boolean
          description: 'A flag indicating whether the policy rule has an active override
            applied to it. This field only applies to resources representing policy
            rules. '
          example: false
        id:
          type: integer
          description: The identifier of the policy rule or group.
          format: int64
        isUnscored:
          type: boolean
          description: A flag indicating whether the policy rule has a role of `"unscored"`.
            This field only applies to resources representing policy rules.
          example: false
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the policy rule or group.
          example: ""
        policy:
          $ref: '#/components/schemas/PolicyMetadataResource'
        rules:
          $ref: '#/components/schemas/PolicyRuleAssessmentResource'
        scope:
          type: string
          description: The textual representation of the policy rule/group scope.
            Policy rules or groups that are automatically available have `"Built-in"`
            scope, whereas policy rules or groups created by users have scope as `"Custom"`.
          example: ""
        status:
          type: string
          description: The asset's rule compliance status.
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
        title:
          type: string
          description: The title of the policy rule, or group, as visible to the user.
          example: ""
        type:
          type: string
          description: Indicates whether the resource represents either a policy rule
            or group.
          example: ""
          enum:
            - rule
            - group
      description: ""
      discriminator:
        propertyName: ""
    AssetTag:
      required:
        - name
        - type
      type: object
      properties:
        color:
          type: string
          description: The color to use when rendering the tag in a user interface.
          example: default
          enum:
            - default
            - blue
            - green
            - orange
            - red
            - purple
        created:
          type: string
          description: The date and time the tag was created.
          example: 2017-10-07T23:50:01.205Z
        id:
          type: integer
          description: The identifier of the tag.
          format: int32
          readOnly: true
          example: 6
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name (label) of the tab.
          example: Very High
        riskModifier:
          type: object
          properties: {}
          description: 'The amount to adjust risk of an asset tagged with this tag. '
          example: "2.0"
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        source:
          type: string
          description: The source of the tag.
          readOnly: true
          example: built-in
          enum:
            - built-in
            - custom
        sources:
          type: array
          description: The source(s) by which a tag is applied to an asset.
          items:
            $ref: '#/components/schemas/TagAssetSource'
        type:
          type: string
          description: The type of the tag.
          example: criticality
          enum:
            - custom
            - location
            - owner
            - criticality
      description: ""
      discriminator:
        propertyName: ""
    AssetVulnerabilities:
      type: object
      properties:
        critical:
          type: integer
          description: The number of critical vulnerabilities.
          format: int64
          readOnly: true
          example: 16
        exploits:
          type: integer
          description: The number of distinct exploits that can exploit any of the
            vulnerabilities on the asset.
          format: int64
          readOnly: true
          example: 4
        malwareKits:
          type: integer
          description: The number of distinct malware kits that vulnerabilities on
            the asset are susceptible to.
          format: int64
          readOnly: true
          example: 0
        moderate:
          type: integer
          description: The number of moderate vulnerabilities.
          format: int64
          readOnly: true
          example: 3
        severe:
          type: integer
          description: The number of severe vulnerabilities.
          format: int64
          readOnly: true
          example: 76
        total:
          type: integer
          description: The total number of vulnerabilities.
          format: int64
          readOnly: true
          example: 95
      description: ""
      discriminator:
        propertyName: ""
    AuthenticationSettings:
      type: object
      properties:
        '2fa':
          type: boolean
          description: Whether two-factor authentication is enabled.
          example: false
        loginLockThreshold:
          type: integer
          description: The maximum number of failed login attempts for an account
            becomes locked.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    AuthenticationSource:
      type: object
      properties:
        external:
          type: boolean
          description: Whether the authentication source is external (true) or internal
            (false).
          example: false
        id:
          type: integer
          description: The identifier of the authentication source.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the authentication source.
          example: ""
        type:
          type: string
          description: The type of the authentication source.
          example: ""
          enum:
            - normal
            - kerberos
            - ldap
            - admin
      description: ""
      discriminator:
        propertyName: ""
    AvailableReportFormat:
      type: object
      properties:
        format:
          type: string
          description: The output file-format of a report.
          example: pdf
          enum:
            - arf-xml
            - csv-export
            - cyberscope-xml
            - database-export
            - pdf
            - html
            - nexpose-simple-xml
            - oval-xml
            - qualys-xml
            - rtf
            - scap-xml
            - sql-query
            - text
            - xccdf-xml
            - xccdf-csv
            - xml
            - xml-export
            - xml-export-v2
        templates:
          type: array
          description: The report template identifiers that can be used within a report
            format.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    BackupsSize:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 0
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 0 bytes
      description: ""
      discriminator:
        propertyName: ""
    BadRequestError:
      required:
        - status
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: "400"
          enum:
            - "400"
      description: ""
      discriminator:
        propertyName: ""
    CPUInfo:
      type: object
      properties:
        clockSpeed:
          type: integer
          description: The clock speed of the host, in MHz.
          format: int32
          example: 2600
        count:
          type: integer
          description: The number of CPUs.
          format: int32
          example: 8
      description: ""
      discriminator:
        propertyName: ""
    Configuration:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the configuration value.
          example: <name>
        value:
          type: string
          description: The configuration value.
          example: <value>
      description: ""
      discriminator:
        propertyName: ""
    ConsoleCommandOutput:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        output:
          type: string
          description: The output of the command that was executed.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    ContentDescription:
      type: object
      properties:
        html:
          type: string
          description: Hypertext Markup Language (HTML) representation of the content.
          example: A remote code execution vulnerability exists in the way that the
            scripting engine handles objects in memory in Microsoft Edge. ...
        text:
          type: string
          description: Textual representation of the content.
          example: <p>A remote code execution vulnerability exists in the way that
            the scripting engine handles objects in memory in Microsoft Edge. ...</p>
      description: ""
      discriminator:
        propertyName: ""
    CreateAuthenticationSource:
      type: object
      properties:
        type:
          type: string
          description: The type of the authentication source to use to authenticate
            the user. Defaults to `normal`.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    CreatedOrUpdatedReference:
      type: object
      properties:
        id:
          type: object
          properties: {}
          description: The identifier of the resource created or updated.
          example: "3"
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReference:
      type: object
      properties:
        id:
          type: object
          properties: {}
          description: The identifier of the resource created.
          example: "1"
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceAssetGroupIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceCredentialIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceDiscoveryQueryIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int64
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceEngineIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferencePolicyOverrideIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int64
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceScanIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int64
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceScanTemplateIDLink:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the resource created.
          example: "1"
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceUserIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceVulnerabilityExceptionIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceVulnerabilityValidationIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int64
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    CreatedReferenceintLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource created.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    Criterion:
      type: object
      properties:
        extras:
          type: object
          properties: {}
        metaData:
          $ref: '#/components/schemas/IMetaData'
        metadata:
          $ref: '#/components/schemas/MetadataContainer'
        operator:
          type: string
          enum:
            - IS
            - IS_NOT
            - IS_APPLIED
            - IS_NOT_APPLIED
            - IN
            - NOT_IN
            - STARTS_WITH
            - ENDS_WITH
            - CONTAINS
            - NOT_CONTAINS
            - LESS_THAN
            - GREATER_THAN
            - IN_RANGE
            - NOT_IN_RANGE
            - INCLUDE
            - DO_NOT_INCLUDE
            - ON_OR_BEFORE
            - ON_OR_AFTER
            - BETWEEN
            - EARLIER_THAN
            - WITHIN_THE_LAST
            - IS_EMPTY
            - IS_NOT_EMPTY
            - ARE
            - LIKE
            - NOT_LIKE
        values:
          type: array
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    Database:
      required:
        - name
      type: object
      properties:
        description:
          type: string
          description: The description of the database instance.
          example: Microsoft SQL Server
        id:
          type: integer
          description: The identifier of the database.
          format: int32
          example: 13
        name:
          type: string
          description: The name of the database instance.
          example: MSSQL
      description: ""
      discriminator:
        propertyName: ""
    DatabaseConnectionSettings:
      type: object
      properties:
        maximumAdministrationPoolSize:
          type: integer
          description: The maximum number of administrative connections in the connection
            pool. -1 means unlimited.
          format: int32
          example: -1
        maximumPoolSize:
          type: integer
          description: ${settings.database.connection.max}
          format: int32
          example: -1
        maximumPreparedStatementPoolSize:
          type: integer
          description: The maximum number of prepared statements in the prepared statement
            pool. -1 means unlimited.
          format: int32
          example: 256
      description: ""
      discriminator:
        propertyName: ""
    DatabaseSettings:
      type: object
      properties:
        connection:
          $ref: '#/components/schemas/DatabaseConnectionSettings'
        host:
          type: string
          description: The database host.
          example: 127.0.0.1
        maintenanceThreadPoolSize:
          type: integer
          description: The maximum number of parallel tasks when executing maintenance
            tasks.
          format: int32
          example: 20
        port:
          type: integer
          description: The database port.
          format: int32
          example: 5432
        url:
          type: string
          description: The database connection URL.
          example: //127.0.0.1:5432/nexpose
        user:
          type: string
          description: The database user.
          example: nxpgsql
        vendor:
          type: string
          description: The database vendor.
          example: postgresql
      description: ""
      discriminator:
        propertyName: ""
    DatabaseSize:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 5364047843
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 5 GB
      description: ""
      discriminator:
        propertyName: ""
    DiscoveryAsset:
      type: object
      properties:
        address:
          type: string
          description: The IP address of a discovered asset.
          readOnly: true
          example: 12.83.99.203
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The host name of a discovered asset.
          readOnly: true
          example: desktop-27.acme.com
      description: ""
      discriminator:
        propertyName: ""
    DiscoveryConnection:
      type: object
      properties:
        accessKeyId:
          type: string
          description: The AWS credential access key identifier (only used for the
            AWS connection).
          example: ""
        address:
          type: string
          description: ${discovery.connection.address}
          example: ""
        arn:
          type: string
          description: The AWS credential ARN (only used for the AWS connection).
          example: ""
        awsSessionName:
          type: string
          description: The AWS credential session name (only used for the AWS connection).
          example: ""
        connectionType:
          type: string
          description: The type of the discovery connection.
          example: ""
        eventSource:
          type: string
          description: The event source type to use.
          example: ""
        exchangeServerHostname:
          type: string
          description: The hostname of the exchange server to connect to.
          example: ""
        exchangeUser:
          type: string
          description: The username used to connect to the exchange server.
          example: ""
        folderPath:
          type: string
          description: The folder path to pull logs from.
          example: ""
        id:
          type: integer
          description: The identifier of the discovery connection.
          format: int64
          readOnly: true
        ldapServer:
          type: string
          description: The LDAP server to connect to.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The discovery connection name.
          example: Connection 1
        port:
          type: integer
          description: The address used to connect to the discovery connection source.
          format: int32
        protocol:
          type: string
          description: The protocol used to connect to the discovery connection source.
          example: ""
        region:
          type: string
          description: The AWS region (only used for the AWS connection).
          example: ""
        scanEngineIsInsideAWS:
          type: boolean
          description: Flag denoting whether the scan engine is in AWS, this is used
            for AWS discovery connections for scanning purposes (only used for the
            AWS connection).
          example: false
        secretAccessKey:
          type: string
          description: The AWS credential secret access key (only used for the AWS
            connection).
          example: ""
        status:
          type: string
          description: The status of the discovery connection.
          example: ""
        username:
          type: string
          description: The username used to authenticate to the discovery connection
            source.
          example: ""
        winRMServer:
          type: string
          description: 'The WinRM server to connect to. '
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    DiscoverySearchCriteria:
      type: object
      properties:
        connectionType:
          type: string
          description: The type of discovery connection configured for the site. This
            property only applies to dynamic sites.
          example: ""
          enum:
            - activesync-ldap
            - activesync-office365
            - activesync-powershell
            - aws
            - dhcp
            - sonar
            - vsphere
        filters:
          type: array
          description: Filters used to match assets from a discovery connection. See
            <a href="#section/Responses/DiscoverySearchCriteria">Discovery Connection
            Search Criteria</a> for more information on the structure and format.
          items:
            $ref: '#/components/schemas/SwaggerDiscoverySearchCriteriaFilter'
        match:
          type: string
          description: Operator to determine how to match filters. `all` requires
            that all filters match for an asset to be included. `any` requires only
            one filter to match for an asset to be included.
          example: all
          enum:
            - any
            - all
      description: ""
      discriminator:
        propertyName: ""
    DiskFree:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 166532222976
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 155.1 GB
      description: ""
      discriminator:
        propertyName: ""
    DiskInfo:
      type: object
      properties:
        free:
          $ref: '#/components/schemas/DiskFree'
        installation:
          $ref: '#/components/schemas/InstallSize'
        total:
          $ref: '#/components/schemas/DiskTotal'
      description: ""
      discriminator:
        propertyName: ""
    DiskTotal:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 499004735488
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 464.7 GB
      description: ""
      discriminator:
        propertyName: ""
    DynamicSite:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the discovery connection.
          format: int64
      description: ""
      discriminator:
        propertyName: ""
    EnginePool:
      required:
        - id
        - name
      type: object
      properties:
        engines:
          type: array
          description: The identifiers of the scan engines in the engine pool.
          items:
            type: integer
            format: int32
        id:
          type: integer
          description: The identifier of the scan engine.
          format: int32
          example: 6
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the scan engine.
          example: Corporate Scan Engine 001
      description: ""
      discriminator:
        propertyName: ""
    EnvironmentProperties:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        properties:
          type: object
          properties: {}
          description: Key-value pairs for system and environment properties that
            are currently defined.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    Error:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: ""
          enum:
            - "100"
            - "101"
            - "102"
            - "103"
            - "200"
            - "201"
            - "202"
            - "203"
            - "204"
            - "205"
            - "206"
            - "207"
            - "208"
            - "226"
            - "300"
            - "301"
            - "302"
            - "303"
            - "304"
            - "305"
            - "307"
            - "308"
            - "400"
            - "401"
            - "402"
            - "403"
            - "404"
            - "405"
            - "406"
            - "407"
            - "408"
            - "409"
            - "410"
            - "411"
            - "412"
            - "413"
            - "414"
            - "415"
            - "416"
            - "417"
            - "418"
            - "419"
            - "420"
            - "421"
            - "422"
            - "423"
            - "424"
            - "426"
            - "428"
            - "429"
            - "431"
            - "500"
            - "501"
            - "502"
            - "503"
            - "504"
            - "505"
            - "506"
            - "507"
            - "508"
            - "509"
            - "510"
            - "511"
      description: ""
      discriminator:
        propertyName: ""
    ExceptionScope:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the vulnerability to which the exception
            applies.
          format: int64
        key:
          type: string
          description: If the scope type is `"Instance"`, an optional key to discriminate
            the instance the exception applies to.
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        port:
          type: integer
          description: If the scope type is `"Instance"` and the vulnerability is
            detected on a service, the port on which the exception applies.
          format: int32
        type:
          type: string
          description: 'The type of the exception scope. One of: `"Global"`, `"Site"`,
            `"Asset"`, `"Asset Group"`, `"Instance"`'
          example: ""
        vulnerability:
          type: string
          description: The identifier of the vulnerability to which the exception
            applies.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    ExcludedAssetGroups:
      type: object
      properties:
        assetGroupIDs:
          type: array
          description: List of asset group identifiers. Each element is an integer.
          items:
            type: integer
            format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ExcludedScanTargets:
      type: object
      properties:
        addresses:
          type: array
          description: List of addresses. Each address is a string that can represent
            either a hostname, ipv4 address, ipv4 address range, ipv6 address, or
            CIDR notation.
          items:
            type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    Exploit:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the exploit.
          format: int32
          example: 4924
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        skillLevel:
          type: string
          description: The level of skill required to use the exploit.
          example: expert
          enum:
            - novice
            - intermediate
            - expert
        source:
          $ref: '#/components/schemas/ExploitSource'
        title:
          type: string
          description: The title (short summary) of the exploit.
          example: Microsoft IIS WebDav ScStoragePathFromUrl Overflow
      description: ""
      discriminator:
        propertyName: ""
    ExploitSource:
      type: object
      properties:
        key:
          type: string
          description: The identifier of the exploit in the source library.
          example: exploit/windows/iis/iis_webdav_scstoragepathfromurl
        link:
          $ref: '#/components/schemas/ExploitSourceLink'
        name:
          type: string
          description: The source library of the exploit, typically the name of the
            vendor that maintains and/or defined the exploit.
          example: metasploit
          enum:
            - metasploit
            - exploitdb
      description: ""
      discriminator:
        propertyName: ""
    ExploitSourceLink:
      type: object
      properties:
        href:
          type: string
          description: The hypertext reference for the exploit source.
          example: http://www.metasploit.com/modules/exploit/windows/iis/iis_webdav_scstoragepathfromurl
        id:
          type: string
          description: Hypermedia link to the destination of the exploit source.
          example: exploit/windows/iis/iis_webdav_scstoragepathfromurl
        rel:
          type: string
          description: The relation of the hypermedia link, `"Source"`.
          example: Source
      description: ""
      discriminator:
        propertyName: ""
    Features:
      type: object
      properties:
        adaptiveSecurity:
          type: boolean
          description: Whether Adaptive Security features are available.
          example: false
        agents:
          type: boolean
          description: Whether the use of agents is allowed.
          example: true
        dynamicDiscovery:
          type: boolean
          description: Whether dynamic discovery sources may be used.
          example: true
        earlyAccess:
          type: boolean
          description: Whether early-access features are available prior to general
            availability.
          example: false
        enginePool:
          type: boolean
          description: Whether scan engine pools may be used.
          example: true
        insightPlatform:
          type: boolean
          description: Whether the usage of the Insight Platform is allowed.
          example: true
        mobile:
          type: boolean
          description: Whether mobile features are allowed.
          example: true
        multitenancy:
          type: boolean
          description: Whether multitenancy is allowed.
          example: false
        policyEditor:
          type: boolean
          description: Whether the editing of policies is allowed.
          example: true
        policyManager:
          type: boolean
          description: Whether the policy manager is allowed.
          example: true
        remediationAnalytics:
          type: boolean
          description: Whether Remediation Analytics features are available.
          example: true
        reporting:
          $ref: '#/components/schemas/LicenseReporting'
        scanning:
          $ref: '#/components/schemas/LicenseScanning'
      description: ""
      discriminator:
        propertyName: ""
    File:
      required:
        - name
        - type
      type: object
      properties:
        attributes:
          type: array
          description: Attributes detected on the file.
          items:
            $ref: '#/components/schemas/Configuration'
        name:
          type: string
          description: The name of the file.
          example: ADMIN$
        size:
          type: integer
          description: The size of the regular file (in bytes). If the file is a directory,
            no value is returned.
          format: int64
          example: -1
        type:
          type: string
          description: The type of the file.
          example: directory
          enum:
            - file
            - directory
      description: ""
      discriminator:
        propertyName: ""
    Fingerprint:
      type: object
      properties:
        description:
          type: string
          description: The description of the matched fingerprint.
          example: Ubuntu libexpat1 2.1.0-4ubuntu1.2
        family:
          type: string
          description: The family of the matched fingerprint.
          example: ""
        product:
          type: string
          description: The product of the matched fingerprint.
          example: libexpat1
        vendor:
          type: string
          description: The description of the matched fingerprint.
          example: Ubuntu
        version:
          type: string
          description: The version of the matched fingerprint.
          example: 2.1.0-4ubuntu1.2
      description: ""
      discriminator:
        propertyName: ""
    GlobalScan:
      type: object
      properties:
        assets:
          type: integer
          description: The number of assets found in the scan.
          format: int32
        duration:
          type: string
          description: The duration of the scan in ISO8601 format.
          example: ""
        endTime:
          type: string
          format: date-time
          description: The end time of the scan in ISO8601 format.
          example: ""
        engineId:
          type: integer
          description: The identifier of the scan engine.
          format: int32
        engineName:
          type: string
          description: The name of the scan engine.
          example: ""
        id:
          type: integer
          description: The identifier of the scan.
          format: int64
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The reason for the scan status.
          example: ""
        scanName:
          type: string
          description: The user-driven scan name for the scan.
          example: ""
        scanType:
          type: string
          description: 'The scan type (automated, manual, scheduled). '
          example: ""
        siteId:
          type: integer
          format: int32
        siteName:
          type: string
        startTime:
          type: string
          format: date-time
          description: The start time of the scan in ISO8601 format.
          example: ""
        startedBy:
          type: string
          description: The name of the user that started the scan.
          example: ""
        status:
          type: string
          description: The scan status.
          example: ""
          enum:
            - aborted
            - unknown
            - running
            - finished
            - stopped
            - error
            - paused
            - dispatched
            - integrating
        vulnerabilities:
          $ref: '#/components/schemas/Vulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    GroupAccount:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the user group.
          format: int32
          example: 972
        name:
          type: string
          description: The name of the user group.
          example: Administrators
      description: ""
      discriminator:
        propertyName: ""
    HostName:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The host name (local or FQDN).
          example: corporate-workstation-1102DC.acme.com
        source:
          type: string
          description: The source used to detect the host name. `user` indicates the
            host name source is user-supplied (e.g. in a site target definition).
          example: DNS
          enum:
            - user
            - dns
            - netbios
            - dce
            - epsec
            - ldap
            - other
      description: ""
      discriminator:
        propertyName: ""
    IMetaData:
      type: object
      properties:
        fieldName:
          type: string
        supportedOperators:
          type: array
          items:
            type: string
            enum:
              - IS
              - IS_NOT
              - IS_APPLIED
              - IS_NOT_APPLIED
              - IN
              - NOT_IN
              - STARTS_WITH
              - ENDS_WITH
              - CONTAINS
              - NOT_CONTAINS
              - LESS_THAN
              - GREATER_THAN
              - IN_RANGE
              - NOT_IN_RANGE
              - INCLUDE
              - DO_NOT_INCLUDE
              - ON_OR_BEFORE
              - ON_OR_AFTER
              - BETWEEN
              - EARLIER_THAN
              - WITHIN_THE_LAST
              - IS_EMPTY
              - IS_NOT_EMPTY
              - ARE
              - LIKE
              - NOT_LIKE
        type:
          type: string
          enum:
            - NUMERIC
            - STRING
            - SET
            - SET_STRING
            - SINGLE
            - DATE
      description: ""
      discriminator:
        propertyName: ""
    IncludedAssetGroups:
      type: object
      properties:
        assetGroupIDs:
          type: array
          description: List of asset group identifiers. Each element is an integer.
          items:
            type: integer
            format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    IncludedScanTargets:
      type: object
      properties:
        addresses:
          type: array
          description: List of addresses. Each address is a string that can represent
            either a hostname, ipv4 address, ipv4 address range, ipv6 address, or
            CIDR notation.
          items:
            type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    Info:
      type: object
      properties:
        cpu:
          $ref: '#/components/schemas/CPUInfo'
        disk:
          $ref: '#/components/schemas/DiskInfo'
        distinguishedName:
          type: string
          description: The distinguished name of the console.
          example: CN=Rapid7 Security Console/ O=Rapid7
        fqdn:
          type: string
          description: The fully-qualified domain name of the local host the service
            is running on.
          example: server.acme.com
        host:
          type: string
          description: The name of the local host the service is running on.
          example: SERVER
        ip:
          type: string
          description: The IP address of the local host the service is running on.
          example: 192.168.1.99
        jvm:
          $ref: '#/components/schemas/JVMInfo'
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        memory:
          $ref: '#/components/schemas/MemoryInfo'
        operatingSystem:
          type: string
          description: The operating system of the host the service is running on.
          example: Ubuntu Linux 16.04
        serial:
          type: string
          description: The serial number of the console.
          example: 729F31B1C92F3C91DFA8A649F4D5C883C269BD45
        superuser:
          type: boolean
          description: Whether the service is running a super-user.
          example: true
        user:
          type: string
          description: The user running the service.
          example: root
        version:
          $ref: '#/components/schemas/VersionInfo'
      description: ""
      discriminator:
        propertyName: ""
    InstallSize:
      type: object
      properties:
        backups:
          $ref: '#/components/schemas/BackupsSize'
        database:
          $ref: '#/components/schemas/DatabaseSize'
        directory:
          $ref: '#/components/schemas/File'
        reports:
          $ref: '#/components/schemas/ReportSize'
        scans:
          $ref: '#/components/schemas/ScanSize'
        total:
          $ref: '#/components/schemas/InstallationTotalSize'
      description: ""
      discriminator:
        propertyName: ""
    InstallationTotalSize:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 12125933077
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 11.3 GB
      description: ""
      discriminator:
        propertyName: ""
    InternalServerError:
      required:
        - status
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: "500"
          enum:
            - "500"
      description: ""
      discriminator:
        propertyName: ""
    JVMInfo:
      type: object
      properties:
        name:
          type: string
          description: The name of the Java Virtual Machine.
          example: OpenJDK 64-Bit Server VM
        startTime:
          type: string
          description: The date and time the Java Virtual Machine last started.
          example: 2018-02-13T20:35:35.076Z
        uptime:
          type: string
          description: 'Total up-time of the Java Virtual Machine, in ISO 8601 format.
            For example: `"PT1H4M24.214S"`.'
          example: PT8H21M7.978S
        vendor:
          type: string
          description: The vendor of the Java Virtual Machine.
          example: Azul Systems, Inc.
        version:
          type: string
          description: The version of the Java Virtual Machine.
          example: 25.102-b14
      description: ""
      discriminator:
        propertyName: ""
    JsonNode:
      type: object
      properties:
        array:
          type: boolean
        bigDecimal:
          type: boolean
        bigInteger:
          type: boolean
        binary:
          type: boolean
        boolean:
          type: boolean
        containerNode:
          type: boolean
        double:
          type: boolean
        float:
          type: boolean
        floatingPointNumber:
          type: boolean
        int:
          type: boolean
        integralNumber:
          type: boolean
        long:
          type: boolean
        missingNode:
          type: boolean
        nodeType:
          type: string
          enum:
            - ARRAY
            - BINARY
            - BOOLEAN
            - MISSING
            - NULL
            - NUMBER
            - OBJECT
            - POJO
            - STRING
        'null':
          type: boolean
        number:
          type: boolean
        object:
          type: boolean
        pojo:
          type: boolean
        short:
          type: boolean
        textual:
          type: boolean
        valueNode:
          type: boolean
      description: ""
      discriminator:
        propertyName: ""
    License:
      type: object
      properties:
        edition:
          type: string
          description: The edition of the product.
          example: InsightVM
        evaluation:
          type: boolean
          description: Whether the license is a time-restricted evaluation.
          example: false
        expires:
          type: string
          format: date-time
          description: The date and time the license expires.
          example: 2018-12-31T23:59:59.999Z
        features:
          $ref: '#/components/schemas/Features'
        limits:
          $ref: '#/components/schemas/LicenseLimits'
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        perpetual:
          type: boolean
          description: Whether the license is perpetual.
          example: false
        status:
          type: string
          description: The status of the license.
          example: Activated
          enum:
            - Activated
            - Unlicensed
            - Expired
            - Evaluation Mode
            - Revoked
            - Unknown
      description: ""
      discriminator:
        propertyName: ""
    LicenseLimits:
      type: object
      properties:
        assets:
          type: integer
          description: The maximum number of assets that can be assessed.
          format: int32
          example: 100000
        assetsWithHostedEngine:
          type: integer
          description: The maximum number of assets that may be scanned with the hosted
            scan engine.
          format: int32
          example: 1000
        scanEngines:
          type: integer
          description: The maximum number of scan engines that may be used.
          format: int32
          example: 100
        users:
          type: integer
          description: The maximum number of users allowed.
          format: int32
          example: 1000
      description: ""
      discriminator:
        propertyName: ""
    LicensePolicyScanning:
      type: object
      properties:
        benchmarks:
          $ref: '#/components/schemas/LicensePolicyScanningBenchmarks'
        scanning:
          type: boolean
          description: Whether policy scanning is allowed.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    LicensePolicyScanningBenchmarks:
      type: object
      properties:
        cis:
          type: boolean
          description: Whether policy scanning for CIS benchmarks is allowed.
          example: true
        custom:
          type: boolean
          description: Whether custom benchmarks can be used during scanning.
          example: true
        disa:
          type: boolean
          description: Whether policy scanning for DISA benchmarks is allowed.
          example: true
        fdcc:
          type: boolean
          description: Whether policy scanning for FDCC benchmarks is allowed.
          example: true
        usgcb:
          type: boolean
          description: Whether policy scanning for USGCB benchmarks is allowed.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    LicenseReporting:
      type: object
      properties:
        advanced:
          type: boolean
          description: Whether advanced reporting is available.
          example: true
        customizableCSVExport:
          type: boolean
          description: Whether customizable CSV Export is available.
          example: true
        pci:
          type: boolean
          description: Whether PCI reporting is available.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    LicenseScanning:
      type: object
      properties:
        discovery:
          type: boolean
          description: Whether discovery scanning may be used.
          example: true
        policy:
          $ref: '#/components/schemas/LicensePolicyScanning'
        scada:
          type: boolean
          description: Whether SCADA scanning may be used.
          example: true
        virtual:
          type: boolean
          description: Whether virtual scanning may be used.
          example: true
        webApplication:
          type: boolean
          description: Whether web scanning may be used.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    Link:
      type: object
      properties:
        href:
          type: string
          description: 'A hypertext reference, which is either a URI (see <a target="_blank"
            href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>) or URI template
            (see <a target="_blank" href="https://tools.ietf.org/html/rfc6570">RFC
            6570</a>). '
          example: https://hostname:3780/api/3/...
        rel:
          type: string
          description: The link relation type. This value is one from the <a target="_blank"
            href="https://tools.ietf.org/html/rfc5988#section-6.2">Link Relation Type
            Registry</a> or is the type of resource being linked to.
          example: self
      description: ""
      discriminator:
        propertyName: ""
    Links:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    LocalePreferences:
      type: object
      properties:
        default:
          type: string
          description: The default language to use. The format is a <a target="_blank"
            href="https://tools.ietf.org/html/bcp47">IETF BCP 47</a> language tag.
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        reports:
          type: string
          description: The language to use to generate reports. The format is a <a
            target="_blank" href="https://tools.ietf.org/html/bcp47">IETF BCP 47</a>
            language tag.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    MalwareKit:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the malware kit.
          format: int32
          example: 152
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the malware kit.
          example: Alpha Pack
        popularity:
          type: string
          description: 'The name of the malware kit. One of: `"Rare"`, `"Uncommon"`,
            `"Occasional"`, `"Common"`, `"Popular"`, `"Favored"`, `"Unknown"`'
          example: Rare
      description: ""
      discriminator:
        propertyName: ""
    MatchedSolution:
      type: object
      properties:
        additionalInformation:
          $ref: '#/components/schemas/AdditionalInformation'
        appliesTo:
          type: string
          description: The systems or software the solution applies to.
          example: libexpat1 on Ubuntu Linux
        confidence:
          type: string
          description: The confidence of the matching process for the solution.
          example: ""
          enum:
            - exact
            - partial
            - none
        estimate:
          type: string
          description: 'The estimated duration to apply the solution, in ISO 8601
            format. For example: `"PT5M"`.'
          example: PT10M
        id:
          type: string
          description: The identifier of the solution.
          example: ubuntu-upgrade-libexpat1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        matches:
          type: array
          description: The raw matches that were performed in order to select the
            best solution(s).
          items:
            $ref: '#/components/schemas/SolutionMatch'
        steps:
          $ref: '#/components/schemas/Steps'
        summary:
          $ref: '#/components/schemas/Summary'
        type:
          type: string
          description: 'The type of the solution. One of: `"Configuration"`, `"Rollup
            patch"`, `"Patch"`'
          example: configuration
          enum:
            - configuration
            - rollup-patch
            - patch
            - unknown
      description: ""
      discriminator:
        propertyName: ""
    MemoryFree:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 45006848
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 42.9 MB
      description: ""
      discriminator:
        propertyName: ""
    MemoryInfo:
      type: object
      properties:
        free:
          $ref: '#/components/schemas/MemoryFree'
        total:
          $ref: '#/components/schemas/MemoryTotal'
      description: ""
      discriminator:
        propertyName: ""
    MemoryTotal:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 17179869184
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 16 GB
      description: ""
      discriminator:
        propertyName: ""
    MetadataContainer:
      type: object
      properties:
        fieldName:
          $ref: '#/components/schemas/IMetaData'
      description: ""
      discriminator:
        propertyName: ""
    NotFoundError:
      required:
        - status
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: "404"
          enum:
            - "404"
      description: ""
      discriminator:
        propertyName: ""
    OperatingSystem:
      type: object
      properties:
        architecture:
          type: string
          description: The architecture of the operating system.
          example: x86
        configurations:
          type: array
          description: Configuration key-values pairs enumerated on the operating
            system.
          items:
            $ref: '#/components/schemas/Configuration'
        cpe:
          $ref: '#/components/schemas/OperatingSystemCpe'
        description:
          type: string
          description: The description of the operating system (containing vendor,
            family, product, version and architecture in a single string).
          example: Microsoft Windows Server 2008 Enterprise Edition SP1
        family:
          type: string
          description: The family of the operating system.
          example: Windows
        id:
          type: integer
          description: The identifier of the operating system.
          format: int64
          example: 35
        product:
          type: string
          description: The name of the operating system.
          example: Windows Server 2008 Enterprise Edition
        systemName:
          type: string
          description: A combination of vendor and family (with redundancies removed),
            suitable for grouping.
          example: Microsoft Windows
        type:
          type: string
          description: The type of operating system.
          example: Workstation
        vendor:
          type: string
          description: The vendor of the operating system.
          example: Microsoft
        version:
          type: string
          description: The version of the operating system.
          example: SP1
      description: ""
      discriminator:
        propertyName: ""
    OperatingSystemCpe:
      required:
        - part
      type: object
      properties:
        edition:
          type: string
          description: 'Edition-related terms applied by the vendor to the product. '
          example: enterprise
        language:
          type: string
          description: Defines the language supported in the user interface of the
            product being described. The format is of the language tag adheres to
            <a target="_blank" href="https://tools.ietf.org/html/rfc5646">RFC5646</a>.
          example: ""
        other:
          type: string
          description: 'Captures any other general descriptive or identifying information
            which is vendor- or product-specific and which does not logically fit
            in any other attribute value. '
          example: ""
        part:
          type: string
          description: A single letter code that designates the particular platform
            part that is being identified.
          example: o
          enum:
            - o
            - a
            - h
        product:
          type: string
          description: the most common and recognizable title or name of the product.
          example: windows_server_2008
        swEdition:
          type: string
          description: 'Characterizes how the product is tailored to a particular
            market or class of end users. '
          example: ""
        targetHW:
          type: string
          description: 'Characterize the instruction set architecture on which the
            product operates. '
          example: ""
        targetSW:
          type: string
          description: Characterize the software computing environment within which
            the product operates.
          example: ""
        update:
          type: string
          description: Vendor-specific alphanumeric strings characterizing the particular
            update, service pack, or point release of the product.
          example: sp1
        v2.2:
          type: string
          description: The full CPE string in the <a target="_blank" href="https://cpe.mitre.org/files/cpe-specification_2.2.pdf">CPE
            2.2</a> format.
          example: cpe:/o:microsoft:windows_server_2008:-:sp1:enterprise
        v2.3:
          type: string
          description: The full CPE string in the <a target="_blank" href="http://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf">CPE
            2.3</a> format.
          example: cpe:2.3:o:microsoft:windows_server_2008:-:sp1:enterprise:*:*:*:*:*
        vendor:
          type: string
          description: The person or organization that manufactured or created the
            product.
          example: microsoft
        version:
          type: string
          description: Vendor-specific alphanumeric strings characterizing the particular
            release version of the product.
          example: '-'
      description: ""
      discriminator:
        propertyName: ""
    PCI:
      type: object
      properties:
        adjustedCVSSScore:
          type: integer
          description: The CVSS score of the vulnerability, adjusted for PCI rules
            and exceptions, on a scale of 0-10.
          format: int32
          example: 4
        adjustedSeverityScore:
          type: integer
          description: The severity score of the vulnerability, adjusted for PCI rules
            and exceptions, on a scale of 0-10.
          format: int32
          example: 3
        fail:
          type: boolean
          description: Whether if present on a host this vulnerability would cause
            a PCI failure. `true` if "status" is `"Fail"`, `false` otherwise.
          example: true
        specialNotes:
          type: string
          description: Any special notes or remarks about the vulnerability that pertain
            to PCI compliance.
          example: ""
        status:
          type: string
          description: 'The PCI compliance status of the vulnerability. One of: `"Pass"`,
            `"Fail"`.'
          example: Fail
      description: ""
      discriminator:
        propertyName: ""
    PageInfo:
      type: object
      properties:
        number:
          type: integer
          description: The index (zero-based) of the current page returned.
          format: int64
          example: 6
        size:
          type: integer
          description: The maximum size of the page returned.
          format: int64
          example: 10
        totalPages:
          type: integer
          description: The total number of pages available.
          format: int64
          example: 13
        totalResources:
          type: integer
          description: The total number of resources available across all pages.
          format: int64
          example: 123
      description: ""
      discriminator:
        propertyName: ""
    PageOfAssetGroup:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/AssetGroup'
      description: ""
      discriminator:
        propertyName: ""
    PageOfAssetPolicyItem:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/AssetPolicyItem'
      description: ""
      discriminator:
        propertyName: ""
    PageOfAssetPolicy:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/AssetPolicy'
      description: ""
      discriminator:
        propertyName: ""
    PageOfAsset:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Asset'
      description: ""
      discriminator:
        propertyName: ""
    PageOfDiscoveryConnection:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/DiscoveryConnection'
      description: ""
      discriminator:
        propertyName: ""
    PageOfExploit:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Exploit'
      description: ""
      discriminator:
        propertyName: ""
    PageOfGlobalScan:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/GlobalScan'
      description: ""
      discriminator:
        propertyName: ""
    PageOfMalwareKit:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/MalwareKit'
      description: ""
      discriminator:
        propertyName: ""
    PageOfOperatingSystem:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/OperatingSystem'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyAsset:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyAsset'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyControl:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyControl'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyGroup:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyGroup'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyItem:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyItem'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyOverride:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyOverride'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicyRule:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/PolicyRule'
      description: ""
      discriminator:
        propertyName: ""
    PageOfPolicy:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Policy'
      description: ""
      discriminator:
        propertyName: ""
    PageOfReport:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Report'
      description: ""
      discriminator:
        propertyName: ""
    PageOfScan:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Scan'
      description: ""
      discriminator:
        propertyName: ""
    PageOfSite:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Site'
      description: ""
      discriminator:
        propertyName: ""
    PageOfSoftware:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Software'
      description: ""
      discriminator:
        propertyName: ""
    PageOfTag:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Tag'
      description: ""
      discriminator:
        propertyName: ""
    PageOfUser:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/User'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerabilityCategory:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityCategory'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerabilityCheck:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityCheck'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerabilityException:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityException'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerabilityFinding:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityFinding'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerabilityReference:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityReference'
      description: ""
      discriminator:
        propertyName: ""
    PageOfVulnerability:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        page:
          $ref: '#/components/schemas/PageInfo'
        resources:
          type: array
          description: The page of resources returned.
          items:
            $ref: '#/components/schemas/Vulnerability'
      description: ""
      discriminator:
        propertyName: ""
    Policy:
      type: object
      properties:
        enabled:
          type: array
          description: The identifiers of the policies enabled to be checked during
            a scan. No policies are enabled by default.
          items:
            type: integer
            format: int64
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        recursiveWindowsFSSearch:
          type: boolean
          description: Whether recursive windows file searches are enabled, if your
            internal security practices require this capability. Recursive file searches
            can increase scan times by several hours, depending on the number of files
            and other factors, so this setting is disabled for Windows systems by
            default. Defaults to `false`.
          example: false
        storeSCAP:
          type: boolean
          description: Whether Asset Reporting Format (ARF) results are stored. If
            you are required to submit reports of your policy scan results to the
            U.S. government in ARF for SCAP certification, you will need to store
            SCAP data so that it can be exported in this format. Note that stored
            SCAP data can accumulate rapidly, which can have a significant impact
            on file storage. Defaults to `false`.
          example: false
      description: ""
      discriminator:
        propertyName: ""
    PolicyAsset:
      type: object
      properties:
        hostname:
          type: string
          description: The primary host name (local or FQDN) of the asset.
          example: ""
        id:
          type: integer
          description: The identifier of the asset.
          format: int64
        ip:
          type: string
          description: The primary IPv4 or IPv6 address of the asset.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        os:
          $ref: '#/components/schemas/OperatingSystem'
        status:
          type: string
          description: 'The overall compliance status of the asset. '
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
      description: ""
      discriminator:
        propertyName: ""
    PolicyBenchmark:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the policy's benchmark.
          example: ""
        title:
          type: string
          description: The title of the policy benchmark.
          example: ""
        version:
          type: string
          description: The version number of the benchmark that includes the policy.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    PolicyControl:
      type: object
      properties:
        cceItemId:
          type: string
          description: The identifier of the CCE item.
          example: ""
        ccePlatform:
          type: string
          description: The platform of the CCE.
          example: ""
        controlName:
          type: string
          description: The name of the control mapping.
          example: ""
        id:
          type: string
          description: The textual representation of the control identifier.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        publishedDate:
          type: integer
          description: The published date of the control mapping.
          format: int64
      description: ""
      discriminator:
        propertyName: ""
    PolicyGroup:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/AssetPolicyAssessment'
        benchmark:
          $ref: '#/components/schemas/PolicyBenchmark'
        description:
          type: string
          description: A description of the policy group.
          example: ""
        id:
          type: string
          description: The textual representation of the policy group identifier.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the policy group.
          example: ""
        policy:
          $ref: '#/components/schemas/PolicyMetadataResource'
        scope:
          type: string
          description: The textual representation of the policy group scope. Policy
            groups that are automatically available have `"Built-in"` scope, whereas
            policy groups created by users have scope as `"Custom"`.
          example: ""
        status:
          type: string
          description: The overall compliance status of the policy group.
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
        surrogateId:
          type: integer
          description: The identifier of the policy group.
          format: int64
        title:
          type: string
          description: The title of the policy group as visible to the user.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    PolicyItem:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/AssetPolicyAssessment'
        description:
          type: string
          description: A description of the policy rule or group.
          example: ""
        hasOverride:
          type: boolean
          description: 'A flag indicating whether the policy rule has an active override
            applied to it. This field only applies to resources representing policy
            rules. '
          example: false
        id:
          type: integer
          description: The identifier of the policy rule or group.
          format: int64
        isUnscored:
          type: boolean
          description: A flag indicating whether the policy rule has a role of `"unscored"`.
            This field only applies to resources representing policy rules.
          example: false
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the policy rule or group.
          example: ""
        policy:
          $ref: '#/components/schemas/PolicyMetadataResource'
        rules:
          $ref: '#/components/schemas/PolicyRuleAssessmentResource'
        scope:
          type: string
          description: The textual representation of the policy rule/group scope.
            Policy rules or groups that are automatically available have `"Built-in"`
            scope, whereas policy rules or groups created by users have scope as `"Custom"`.
          example: ""
        status:
          type: string
          description: The overall compliance status of the policy rule or group.
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
        title:
          type: string
          description: The title of the policy rule, or group, as visible to the user.
          example: ""
        type:
          type: string
          description: Indicates whether the resource represents either a policy rule
            or group.
          example: ""
          enum:
            - rule
            - group
      description: ""
      discriminator:
        propertyName: ""
    PolicyMetadataResource:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the policy.
          example: ""
        title:
          type: string
          description: The title of the policy as visible to the user.
          example: ""
        version:
          type: string
          description: The version of the policy.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    PolicyOverride:
      required:
        - scope
        - state
        - submit
      type: object
      properties:
        expires:
          type: string
          description: The date the policy override is set to expire. Date is represented
            in ISO 8601 format.
          example: ""
        id:
          type: integer
          description: The identifier of the policy override.
          format: int64
          readOnly: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        review:
          $ref: '#/components/schemas/PolicyOverrideReviewer'
        scope:
          $ref: '#/components/schemas/PolicyOverrideScope'
        state:
          type: string
          description: |
            The state of the policy override. Can be one of the following values:
            | Value            | Description                                                                         | Affects Compliance Results |
            | ---------------- | ----------------------------------------------------------------------------------- |:--------------------------:|
            | `"deleted"`      | The policy override has been deleted.                                               |                            |
            | `"expired"`      | The policy override had an expiration date and it has expired.                      |                            |
            | `"approved"`     | The policy override was submitted and approved.                                     | &check;                    |
            | `"rejected"`     | The policy override was rejected by the reviewer.                                   |                            |
            | `"under-review"` | The policy override was submitted but not yet approved or rejected by the reviewer. |                            |
          example: ""
        submit:
          $ref: '#/components/schemas/PolicyOverrideSubmitter'
      description: ""
      discriminator:
        propertyName: ""
    PolicyOverrideReviewer:
      type: object
      properties:
        comment:
          type: string
          description: A comment from the reviewer detailing the review. Cannot exceed
            1024 characters.
          readOnly: true
          example: ""
        date:
          type: string
          description: The date the review took place.
          readOnly: true
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The identifier of the user that reviewed the policy override.
          readOnly: true
          example: ""
        user:
          type: integer
          description: The login name of the user that reviewed the policy override.
          format: int32
          readOnly: true
      description: ""
      discriminator:
        propertyName: ""
    PolicyOverrideScope:
      required:
        - newResult
        - rule
        - type
      type: object
      properties:
        asset:
          type: integer
          description: The identifier of the asset whose compliance results are to
            be overridden. Property is required if the property `scope` is set to
            either `"specific-asset"` or `"specific-asset-until-next-scan"`.
          format: int64
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        newResult:
          type: string
          description: The new policy rule result after the override is applied.
          example: ""
          enum:
            - pass
            - fail
            - not-applicable
            - fixed
        originalResult:
          type: string
          description: The original policy rule result before the override was applied.
            This property only applies to overrides with a scope of either `"specific-asset"`
            or `"specific-asset-until-next-scan"`.
          readOnly: true
          example: ""
          enum:
            - pass
            - fail
            - error
            - unknown
            - not-applicable
            - not-checked
            - not-selected
            - informational
            - fixed
        rule:
          type: integer
          description: The identifier of the policy rule whose compliance results
            are to be overridden.
          format: int64
        type:
          type: string
          description: |
            The scope of assets affected by the policy override. Can be one of the following values:
            | Value                              | Description                                                                                                                                                 |
            | ---------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- |
            | `"all-assets"`                     | Overrides the compliance result of all assets evaluated with the specified policy rule.                                                                     |
            | `"specific-asset"`                 | Overrides the compliance result of a single asset evaluated with the specified policy rule.                                                                 |
            | `"specific-asset-until-next-scan"` | Overrides the compliance result of a single asset evaluated with the specified policy rule until the next time asset is evaluated against that policy rule. |
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    PolicyOverrideSubmitter:
      required:
        - comment
      type: object
      properties:
        comment:
          type: string
          description: A comment from the submitter as to why the policy override
            was submitted. Cannot exceed 1024 characters.
          example: ""
        date:
          type: string
          description: The date the policy override was submitted.
          readOnly: true
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The login name of the user that submitted the policy override.
          readOnly: true
          example: ""
        user:
          type: integer
          description: The identifier of the user that submitted the policy override.
          format: int32
          readOnly: true
      description: ""
      discriminator:
        propertyName: ""
    PolicyRule:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/AssetPolicyAssessment'
        benchmark:
          $ref: '#/components/schemas/PolicyBenchmark'
        description:
          type: string
          description: A description of the rule.
          example: ""
        id:
          type: string
          description: The textual representation of the policy rule identifier.
          example: ""
        isCustom:
          type: boolean
          description: A flag indicating whether the policy rule is custom.
          example: false
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the rule.
          example: ""
        role:
          type: string
          description: The role of the policy rule. It's value determines how it's
            results affect compliance.
          example: ""
          enum:
            - full
            - unscored
            - unchecked
        scope:
          type: string
          description: The textual representation of the policy rule scope. Policy
            rules that are automatically available have `"Built-in"` scope, whereas
            policy rules created by users have scope as `"Custom"`.
          example: ""
        status:
          type: string
          description: The overall compliance status of the policy rule.
          example: ""
          enum:
            - PASS
            - FAIL
            - NOT_APPLICABLE
        surrogateId:
          type: integer
          description: The identifier of the policy rule.
          format: int64
        title:
          type: string
          description: The title of the policy rule as visible to the user.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    PolicyRuleAssessmentResource:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        total:
          type: integer
          description: The total number of policy rules.
          format: int32
        totalFailed:
          type: integer
          description: The total number of policy rules that are not compliant against
            all assets.
          format: int32
        totalNotApplicable:
          type: integer
          description: The total number of policy rules that are not applicable against
            all assets.
          format: int32
        totalPassed:
          type: integer
          description: The total number of policy rules that are compliant against
            all assets.
          format: int32
        unscored:
          type: integer
          description: The total number of policy rules that have a role of `"unscored"`.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    PolicySummaryResource:
      type: object
      properties:
        decreasedCompliance:
          type: integer
          description: The total number of policies whose overall compliance has decreased
            between the last two scans of all assets. The list of scanned policies
            is based on the user's list of accessible assets.
          format: int32
        increasedCompliance:
          type: integer
          description: The total number of policies whose overall compliance has increased
            between the last two scans of all assets. The list of scanned policies
            is based on the user's list of accessible assets.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        numberOfPolicies:
          type: integer
          description: The total number of policies available in the Security Console.
          format: int32
        overallCompliance:
          type: number
          description: The ratio of compliant rules to the total number of rules across
            all policies.
          format: float
        scannedPolicies:
          type: integer
          description: The total number of policies that were evaluated against assets
            and have applicable results. The assets considered in the calculation
            are based on the user's list of accessible assets.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    Privileges:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          items:
            type: string
            enum:
              - all-permissions
              - create-reports
              - configure-global-settings
              - manage-sites
              - manage-tags
              - manage-static-asset-groups
              - manage-dynamic-asset-groups
              - manage-scan-templates
              - manage-report-templates
              - manage-scan-engines
              - submit-vulnerability-exceptions
              - approve-vulnerability-exceptions
              - delete-vulnerability-exceptions
              - create-tickets
              - close-tickets
              - assign-ticket-assignee
              - manage-site-access
              - manage-asset-group-access
              - manage-report-access
              - use-restricted-report-sections
              - manage-policies
              - view-asset-group-asset-data
              - manage-asset-group-assets
              - view-site-asset-data
              - specify-site-metadata
              - purge-site-asset-data
              - specify-scan-targets
              - assign-scan-engine
              - assign-scan-template
              - manage-site-credentials
              - manage-scan-alerts
              - schedule-automatic-scans
              - start-unscheduled-scans
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithEndpointIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        port:
          type: integer
          description: The port of the service.
          format: int32
          example: 22
        protocol:
          type: string
          description: The protocol of the service.
          example: tcp
          enum:
            - ip
            - icmp
            - igmp
            - ggp
            - tcp
            - pup
            - udp
            - idp
            - esp
            - nd
            - raw
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithReportIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the report instance.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithAlertIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithAssetIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int64
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithEngineIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithScanScheduleIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithSiteIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithTagIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferenceWithUserIDLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the resource.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithAssetGroupIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithAssetIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int64
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithEngineIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithReferenceWithEndpointIDLinkServiceLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/ServiceLink'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            $ref: '#/components/schemas/ReferenceWithEndpointIDLink'
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithSiteIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithSolutionNaturalIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithTagIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithUserIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithVulnerabilityCheckIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithVulnerabilityCheckTypeIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithVulnerabilityNaturalIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    ReferencesWithWebApplicationIDLink:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            type: integer
            format: int64
      description: ""
      discriminator:
        propertyName: ""
    RepeatResource:
      required:
        - every
        - interval
      type: object
      properties:
        dayOfWeek:
          type: string
          description: The day of the week the scheduled task should repeat. This
            property only applies to schedules with a `every` value of `"day-of-month"`.
          example: ""
        every:
          type: string
          description: |
            The frequency schedule repeats. Each value represents a different unit of time and is used in conjunction with the property `interval`. For example, a schedule can repeat hourly, daily, monthly, etc. The following table describes each supported value:
            | Value | Description |
            | ---------- | ---------------- |
            | hour | Specifies the schedule repeats in hourly increments. |
            | day | Specifies the schedule repeats in daily increments. |
            | week | Specifies the schedule repeats in weekly increments. |
            | date-of-month | Specifies the schedule repeats nth day of the `interval` month. Requires the property `dateOfMonth` to be specified. For example, if `dateOfMonth` is `17` and the `interval` is `2`, then the schedule will repeat every 2 months on the 17th day of the month. |
            | day-of-month | Specifies the schedule repeats on a monthly interval but instead of a specific date being specified, the day of the week and week of the month are specified. Requires the properties `dayOfWeek` and `weekOfMonth` to be specified. For example, if `dayOfWeek` is `"friday"`, `weekOfMonth` is `3`, and the `interval` is `4`, then the schedule will repeat every 4 months on the 3rd Friday of the month. |
          example: date-of-month
        interval:
          minimum: 1
          type: integer
          description: The interval time the schedule should repeat. The is depends
            on the value set in `every`. For example, if the value in property `every`
            is set to `"day"` and `interval` is set to `2`, then the schedule will
            repeat every 2 days.
          format: int32
          example: 1
        lastDayOfMonth:
          type: boolean
          description: ${schedule.repeat.last.day.of.month}
          example: false
        weekOfMonth:
          maximum: 6
          minimum: 1
          type: integer
          description: The week of the month the scheduled task should repeat. For
            This property only applies to schedules with a `every` value of `"day-of-month"`.
            Each week of the month is counted in 7-day increments. For example, week
            1 consists of days 1-7 of the month while week 2 consists of days 8-14
            of the month and so forth.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    RepeatSchedule:
      required:
        - every
        - interval
      type: object
      properties:
        dayOfWeek:
          type: string
          description: The day of the week the scheduled task should repeat. This
            property only applies to schedules with a `every` value of `"day-of-month"`.
          example: ""
        every:
          type: string
          description: |
            The frequency schedule repeats. Each value represents a different unit of time and is used in conjunction with the property `interval`. For example, a schedule can repeat hourly, daily, monthly, etc. The following table describes each supported value:
            | Value | Description |
            | ---------- | ---------------- |
            | hour | Specifies the schedule repeats in hourly increments. |
            | day | Specifies the schedule repeats in daily increments. |
            | week | Specifies the schedule repeats in weekly increments. |
            | date-of-month | Specifies the schedule repeats nth day of the `interval` month. Requires the property `dateOfMonth` to be specified. For example, if `dateOfMonth` is `17` and the `interval` is `2`, then the schedule will repeat every 2 months on the 17th day of the month. |
            | day-of-month | Specifies the schedule repeats on a monthly interval but instead of a specific date being specified, the day of the week and week of the month are specified. Requires the properties `dayOfWeek` and `weekOfMonth` to be specified. For example, if `dayOfWeek` is `"friday"`, `weekOfMonth` is `3`, and the `interval` is `4`, then the schedule will repeat every 4 months on the 3rd Friday of the month. |
          example: date-of-month
        interval:
          minimum: 1
          type: integer
          description: The interval time the schedule should repeat. The is depends
            on the value set in `every`. For example, if the value in property `every`
            is set to `"day"` and `interval` is set to `2`, then the schedule will
            repeat every 2 days.
          format: int32
          example: 1
        lastDayOfMonth:
          type: boolean
        weekOfMonth:
          maximum: 6
          minimum: 1
          type: integer
          description: The week of the month the scheduled task should repeat. For
            This property only applies to schedules with a `every` value of `"day-of-month"`.
            Each week of the month is counted in 7-day increments. For example, week
            1 consists of days 1-7 of the month while week 2 consists of days 8-14
            of the month and so forth.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    Report:
      type: object
      properties:
        bureau:
          type: string
          description: The name of the bureau for a CyberScope report. Only used when
            the format is `"cyberscope-xml"`.
          example: Bureau
        component:
          type: string
          description: The name of the component for a CyberScope report. Only used
            when the format is `"cyberscope-xml"`.
          example: Component
        database:
          $ref: '#/components/schemas/ReportConfigDatabaseResource'
        email:
          $ref: '#/components/schemas/ReportEmail'
        enclave:
          type: string
          description: The name of the enclave for a CyberScope report. Only used
            when the format is `"cyberscope-xml"`.
          example: Enclave
        filters:
          $ref: '#/components/schemas/ReportConfigFiltersResource'
        format:
          type: string
          description: The output format of the report. The format will restrict the
            available templates and parameters that can be specified.
          example: pdf
        frequency:
          $ref: '#/components/schemas/ReportFrequency'
        id:
          type: integer
          description: The identifier of the report.
          format: int32
          readOnly: true
          example: 17
        language:
          type: string
          description: The locale (language) in which the report is generated
          example: en-US
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the report.
          example: Monthly Corporate Site Summary
        organization:
          type: string
          description: The organization used for a XCCDF XML report. Only used when
            the format is `"xccdf-xml"`.
          example: Acme, Inc.
        owner:
          type: integer
          description: The identifier of the report owner.
          format: int32
          example: 1
        policy:
          type: integer
          description: The policy to report on. Only used when the format is `"oval-xml"`,
            `""xccdf-csv"`, or `"xccdf-xml"`.
          format: int64
          example: 789
        query:
          type: string
          description: SQL query to run against the Reporting Data Model. Only used
            when the format is `"sql-query"`.
          example: SELECT * FROM dim_asset ORDER BY ip_address ASC
        scope:
          $ref: '#/components/schemas/ReportConfigScopeResource'
        storage:
          $ref: '#/components/schemas/ReportStorage'
        template:
          type: string
          description: The template for the report (only required if the format is
            templatized).
          example: executive-overview
        timezone:
          type: string
          description: The timezone the report generates in, such as `"America/Los_Angeles"`.
          example: America/Los_Angeles
        users:
          type: array
          description: The identifiers of the users granted explicit access to the
            report.
          example: "7"
          items:
            type: integer
            format: int32
        version:
          type: string
          description: The version of the report Data Model to report against. Only
            used when the format is `"sql-query"`.
          example: 2.3.0
      description: ""
      discriminator:
        propertyName: ""
    ReportConfigCategoryFilters:
      type: object
      properties:
        excluded:
          type: array
          description: The vulnerability categories to exclude. Defaults to no categories.
          items:
            type: string
        included:
          type: array
          description: The vulnerability categories to include. Defaults to all categories.
          items:
            type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ReportConfigDatabaseCredentialsResource:
      type: object
      properties:
        password:
          type: string
          description: ${report.config.database.credential.password.description}
          readOnly: true
          example: '******'
        username:
          type: string
          description: ${report.config.database.credential.username.description}
          example: admin
      description: ""
      discriminator:
        propertyName: ""
    ReportConfigDatabaseResource:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/ReportConfigDatabaseCredentialsResource'
        host:
          type: string
          description: The database server host to export to.
          example: database.acme.com
        name:
          type: string
          description: The name of the database to export to.
          example: database
        port:
          type: integer
          description: The database server port to export to.
          format: int32
          example: 3306
        vendor:
          type: string
          description: The type of the database server.
          example: mysql
          enum:
            - oracle
            - mssql
            - mysql
      description: ""
      discriminator:
        propertyName: ""
    ReportConfigFiltersResource:
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/ReportConfigCategoryFilters'
        severity:
          type: string
          description: The vulnerability severities to include. Defaults to `all`.
          example: ""
          enum:
            - all
            - critical
            - critical-and-severe
        statuses:
          type: array
          description: The vulnerability statuses to include. Defaults to [ `vulnerable`,
            `vulnerable-version`, `potentially-vulnerable` ].
          items:
            type: string
            enum:
              - vulnerable
              - vulnerable-version
              - potentially-vulnerable
              - vulnerable-and-validated
      description: ""
      discriminator:
        propertyName: ""
    ReportConfigScopeResource:
      type: object
      properties:
        assetGroups:
          type: array
          description: ${report.config.asset.groups.description}
          items:
            type: integer
            format: int32
        assets:
          type: array
          description: ${report.config.assets.description}
          items:
            type: integer
            format: int64
        scan:
          type: integer
          description: ${report.config.scans.description}
          format: int64
          example: 68
        sites:
          type: array
          description: ${report.config.sites.description}
          items:
            type: integer
            format: int32
        tags:
          type: array
          description: ${report.config.tags.description}
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ReportEmail:
      type: object
      properties:
        access:
          type: string
          description: The format to distribute the report in when sending to users
            who have explicit access to the report.
          example: zip
          enum:
            - file
            - zip
            - url
            - none
        additional:
          type: string
          description: The format to distribute the report to additional recipients.
          example: file
          enum:
            - file
            - zip
            - none
        additionalRecipients:
          type: array
          description: The email address of additional recipients to distribute the
            report to.
          items:
            type: string
        assetAccess:
          type: boolean
          description: ${report.config.email.additional.asset.access.description}
          example: true
        owner:
          type: string
          description: The format to distribute the report to the owner.
          example: file
          enum:
            - file
            - url
            - zip
            - none
        smtp:
          $ref: '#/components/schemas/ReportEmailSmtp'
      description: ""
      discriminator:
        propertyName: ""
    ReportEmailSmtp:
      type: object
      properties:
        global:
          type: boolean
          description: Whether to use global SMTP settings. If enabled, `sender` and
            `relay` may not be specified.
          example: true
        relay:
          type: string
          description: SMTP relay host or IP address.
          example: mail.acme.com
        sender:
          type: string
          description: SMTP sender address.
          example: john_smith@acme.com
      description: ""
      discriminator:
        propertyName: ""
    ReportFilters:
      type: object
      description: ""
      discriminator:
        propertyName: ""
    ReportFrequency:
      required:
        - repeat
        - start
      type: object
      properties:
        nextRuntimes:
          type: array
          description: 'List the next 10 dates in the future the schedule will launch. '
          readOnly: true
          items:
            type: string
        repeat:
          $ref: '#/components/schemas/RepeatSchedule'
        start:
          type: string
          description: The scheduled start date and time. Date is represented in ISO
            8601 format. Repeating schedules will determine the next schedule to begin
            based on this date and time.
          example: 2018-03-01T04:31:56Z
      description: ""
      discriminator:
        propertyName: ""
    ReportInstance:
      type: object
      properties:
        generated:
          type: string
          description: The date the report finished generation.
          example: 2018-06-01T18:56:03Z
        id:
          type: integer
          description: The identifier of the report instance.
          format: int32
          example: 5
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        size:
          $ref: '#/components/schemas/ReportSize'
        status:
          type: string
          description: The status of the report generation process.
          example: complete
          enum:
            - aborted
            - failed
            - complete
            - running
            - unknown
        uri:
          type: string
          description: The URI of the report accessible through the web console. Refer
            to the `Download` relation hyperlink for a download URI.
          example: https://hostname:3780/reports/...
      description: ""
      discriminator:
        propertyName: ""
    ReportScope:
      type: object
      description: ""
      discriminator:
        propertyName: ""
    ReportSize:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 24789050
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 23.6 MB
      description: ""
      discriminator:
        propertyName: ""
    ReportStorage:
      type: object
      properties:
        location:
          type: string
          description: The location to storage an additional copy of the report. This
            is a sub-path post-fixed to `$(install_dir)/nsc/reports/$(user)/`.
          example: monthly_reports/site/corporate
        path:
          type: string
          description: The full path to the additional copy storage location.
          readOnly: true
          example: $(install_dir)/nsc/reports/$(user)/monthly_reports/site/corporate
      description: ""
      discriminator:
        propertyName: ""
    ReportTemplate:
      type: object
      properties:
        builtin:
          type: boolean
          description: Whether the report template is builtin.
          example: true
        description:
          type: string
          description: The description of the report template.
          example: Provides comprehensive details about discovered assets, vulnerabilities,
            and users.
        id:
          type: string
          description: The identifier of the report template;
          example: audit-report
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the report template.
          example: Audit Report
        sections:
          type: array
          description: The sections that comprise the `document` report template.
          items:
            type: string
        type:
          type: string
          description: The type of the report template. `document` is a templatized,
            typically printable, report that has various sections of content. `export`
            is data-oriented output, typically CSV. `file` is a printable report template
            using a report template file.
          example: document
          enum:
            - document
            - export
            - file
      description: ""
      discriminator:
        propertyName: ""
    ResourcesAlert:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Alert'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesAssetGroup:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/AssetGroup'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesAssetTag:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/AssetTag'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesAuthenticationSource:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/AuthenticationSource'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesAvailableReportFormat:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/AvailableReportFormat'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesConfiguration:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Configuration'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesDatabase:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Database'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesDiscoveryAsset:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/DiscoveryAsset'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesEnginePool:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/EnginePool'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesFile:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/File'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesGroupAccount:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/GroupAccount'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesMatchedSolution:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/MatchedSolution'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesPolicyOverride:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/PolicyOverride'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesReportInstance:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/ReportInstance'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesReportTemplate:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/ReportTemplate'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesRole:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Role'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesScanEngine:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/ScanEngine'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesScanSchedule:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/ScanSchedule'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesScanTemplate:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/ScanTemplate'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSharedCredential:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SharedCredential'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSiteCredential:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SiteCredential'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSiteSharedCredential:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SiteSharedCredential'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSmtpAlert:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SmtpAlert'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSnmpAlert:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SnmpAlert'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSoftware:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Software'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSolution:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Solution'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSonarQuery:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SonarQuery'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesSyslogAlert:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/SyslogAlert'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesTag:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/Tag'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesUserAccount:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/UserAccount'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesUser:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/User'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesVulnerabilityValidationResource:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/VulnerabilityValidationResource'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesWebFormAuthentication:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/WebFormAuthentication'
      description: ""
      discriminator:
        propertyName: ""
    ResourcesWebHeaderAuthentication:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The resources returned.
          items:
            $ref: '#/components/schemas/WebHeaderAuthentication'
      description: ""
      discriminator:
        propertyName: ""
    Review:
      type: object
      properties:
        comment:
          type: string
          description: 'A comment from the reviewer detailing the review. '
          readOnly: true
          example: ""
        date:
          type: string
          description: The date and time the review took place.
          readOnly: true
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The identifier of the user that reviewed the vulnerability
            exception.
          readOnly: true
          example: ""
        user:
          type: integer
          description: The login name of the user that reviewed the vulnerability
            exception.
          format: int32
          readOnly: true
      description: ""
      discriminator:
        propertyName: ""
    RiskModifierSettings:
      type: object
      properties:
        high:
          type: number
          description: ${settings.risk.modifier.high}
          format: double
          example: 1.5
        low:
          type: number
          description: ${settings.risk.modifier.low}
          format: double
          example: 0.75
        medium:
          type: number
          description: ${settings.risk.modifier.medium}
          format: double
          example: 1.0
        veryHigh:
          type: number
          description: ${settings.risk.modifier.veryHigh}
          format: double
          example: 2.0
        veryLow:
          type: number
          description: ${settings.risk.modifier.veryLow}
          format: double
          example: 0.5
      description: ""
      discriminator:
        propertyName: ""
    RiskSettings:
      type: object
      properties:
        adjustWithCriticality:
          type: boolean
          description: Whether risk is adjusted using criticality tags.
          example: true
        criticalityModifiers:
          $ref: '#/components/schemas/RiskModifierSettings'
        model:
          type: string
          description: The risk model used to compute risk.
          example: real_risk
      description: ""
      discriminator:
        propertyName: ""
    Role:
      required:
        - description
        - id
        - name
      type: object
      properties:
        description:
          type: string
          description: The description of the role.
          example: ""
        id:
          type: string
          description: The identifier of the role.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The human readable name of the role.
          example: ""
        privileges:
          type: array
          description: The privileges granted to the role.
          items:
            type: string
            enum:
              - all-permissions
              - create-reports
              - configure-global-settings
              - manage-sites
              - manage-tags
              - manage-static-asset-groups
              - manage-dynamic-asset-groups
              - manage-scan-templates
              - manage-report-templates
              - manage-scan-engines
              - submit-vulnerability-exceptions
              - approve-vulnerability-exceptions
              - delete-vulnerability-exceptions
              - create-tickets
              - close-tickets
              - assign-ticket-assignee
              - manage-site-access
              - manage-asset-group-access
              - manage-report-access
              - use-restricted-report-sections
              - manage-policies
              - view-asset-group-asset-data
              - manage-asset-group-assets
              - view-site-asset-data
              - specify-site-metadata
              - purge-site-asset-data
              - specify-scan-targets
              - assign-scan-engine
              - assign-scan-template
              - manage-site-credentials
              - manage-scan-alerts
              - schedule-automatic-scans
              - start-unscheduled-scans
      description: ""
      discriminator:
        propertyName: ""
    Scan:
      type: object
      properties:
        assets:
          type: integer
          description: The number of assets found in the scan.
          format: int32
        duration:
          type: string
          description: The duration of the scan in ISO8601 format.
          example: ""
        endTime:
          type: string
          description: The end time of the scan in ISO8601 format.
          example: ""
        engineId:
          type: integer
          description: The identifier of the scan engine.
          format: int32
        engineName:
          type: string
          description: The name of the scan engine.
          example: ""
        id:
          type: integer
          description: The identifier of the scan.
          format: int64
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The reason for the scan status.
          example: ""
        scanName:
          type: string
          description: The user-driven scan name for the scan.
          example: ""
        scanType:
          type: string
          description: 'The scan type (automated, manual, scheduled). '
          example: ""
        startTime:
          type: string
          description: The start time of the scan in ISO8601 format.
          example: ""
        startedBy:
          type: string
          description: The name of the user that started the scan.
          example: ""
        status:
          type: string
          description: The scan status.
          example: ""
          enum:
            - aborted
            - unknown
            - running
            - finished
            - stopped
            - error
            - paused
            - dispatched
            - integrating
        vulnerabilities:
          $ref: '#/components/schemas/Vulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    ScanEngine:
      required:
        - address
        - id
        - name
        - port
      type: object
      properties:
        address:
          type: string
          description: The address the scan engine is hosted.
          example: corporate-scan-engine-001.acme.com
        contentVersion:
          type: string
          description: The content version of the scan engine.
          readOnly: true
          example: ""
        enginePools:
          type: array
          description: A list of identifiers of engine pools this engine is included
            in.
          readOnly: true
          items:
            type: integer
            format: int32
        id:
          type: integer
          description: The identifier of the scan engine.
          format: int32
          example: 6
        lastRefreshedDate:
          type: string
          description: The date the engine was last refreshed. Date format is in ISO
            8601.
          readOnly: true
          example: ""
        lastUpdatedDate:
          type: string
          description: The date the engine was last updated. Date format is in ISO
            8601.
          readOnly: true
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the scan engine.
          example: Corporate Scan Engine 001
        port:
          type: integer
          description: The port used by the scan engine to communicate with the Security
            Console.
          format: int32
          example: 40894
        productVersion:
          type: string
          description: The product version of the scan engine.
          readOnly: true
          example: ""
        sites:
          type: array
          description: A list of identifiers of each site the scan engine is assigned
            to.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ScanEvents:
      required:
        - failed
        - paused
        - started
        - stopped
      type: object
      properties:
        failed:
          type: boolean
          description: Generates an alert when a scan fails. Default value is `false`.
          example: false
        paused:
          type: boolean
          description: Generates an alert when a scan pauses. Default value is `false`.
          example: false
        resumed:
          type: boolean
          description: Generates an alert when a scan resumes. Default value is `false`.
          example: false
        started:
          type: boolean
          description: Generates an alert when a scan starts. Default value is `false`.
          example: false
        stopped:
          type: boolean
          description: Generates an alert when a scan stops. Default value is `false`.
          example: false
      description: ""
      discriminator:
        propertyName: ""
    ScanSchedule:
      required:
        - enabled
        - onScanRepeat
        - start
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/ScheduledScanTargets'
        duration:
          type: string
          description: |
            Specifies the maximum duration the scheduled scan is allowed to run. Scheduled scans that do not complete within specified duration will be paused. The scan duration are represented by the format `"P[n]DT[n]H[n]M"`. In these representations, the [n] is replaced by a value for each of the date and time elements that follow the [n].The following table describes each supported value:
            | Value | Description |
            | ---------- | ---------------- |
            | P | The duration designator. It must be placed at the start of the duration representation. |
            | D | The day designator that follows the value for the number of days. |
            | T | The time designator that precedes the time portion of the representation. |
            | H | The hour designator that follows the value for the number of hours. |
            | M | The minute designator that follows the value for the number of minutes. |
            For example, `"P5DT10H30M"` represents a duration of "5 days, 10 hours, and 30 minutes". Each duration designator is optional; however, at least one must be specified and it must be preceded by the `"P"` designator.
          example: ""
        enabled:
          type: boolean
          description: Flag indicating whether the scan schedule is enabled.
          example: false
        id:
          type: integer
          description: The identifier of the scan schedule.
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        nextRuntimes:
          type: array
          description: 'List the next 10 dates in the future the schedule will launch. '
          readOnly: true
          items:
            type: string
        onScanRepeat:
          type: string
          description: |
            Specifies the desired behavior of a repeating scheduled scan when the previous scan was paused due to reaching is maximum duration. The following table describes each supported value:
            | Value | Description |
            | ---------- | ---------------- |
            | restart-scan | Stops the previously-paused scan and launches a new scan if the previous scan did not complete within the specified duration. If the previous scheduled scan was not paused, then a new scan is launched. |
            | resume-scan | Resumes the previously-paused scan if the previous scan did not complete within the specified duration. If the previous scheduled scan was not paused, then a new scan is launched. |
          example: ""
        repeat:
          $ref: '#/components/schemas/RepeatResource'
        scanEngineId:
          type: integer
          description: The identifier of the scan engine to be used for this scan
            schedule. If not set, the site's assigned scan engine will be used.
          format: int32
        scanName:
          type: string
          description: A user-defined name for the scan launched by the schedule.
            If not explicitly set in the schedule, the scan name will be generated
            prior to the scan launching. Names must be unique.
          example: ""
        scanTemplateId:
          type: string
          description: The identifier of the scan template to be used for this scan
            schedule. If not set, the site's assigned scan template will be used.
          example: ""
        start:
          type: string
          description: The scheduled start date and time. Date is represented in ISO
            8601 format. Repeating schedules will determine the next schedule to begin
            based on this date and time.
          example: 2018-03-01T04:31:56Z
      description: ""
      discriminator:
        propertyName: ""
    ScanScope:
      type: object
      properties:
        assets:
          $ref: '#/components/schemas/StaticSite'
        connection:
          $ref: '#/components/schemas/DynamicSite'
      description: ""
      discriminator:
        propertyName: ""
    ScanSettings:
      type: object
      properties:
        connectionTimeout:
          type: string
          description: 'The connection timeout when establishing connections to remote
            scan engines, in ISO 8601 format. For example: `"PT15S"`.'
          example: PT15S
        incremental:
          type: boolean
          description: Whether incremental scan results is enabled.
          example: true
        maximumThreads:
          type: integer
          description: The maximum number of scan threads to use in any scan. -1 means
            this is set by the scan template.
          format: int32
          example: -1
        readTimeout:
          type: string
          description: 'The read timeout when establishing connections to remote scan
            engines, in ISO 8601 format. For example: `"PT15M"`.'
          example: PT15M
        statusIdleTimeout:
          type: string
          description: 'The idle timeout when checking the status of running scans,
            in ISO 8601 format. For example: `"PT3M"`.'
          example: PT3M
        statusThreads:
          type: integer
          description: The number of threads to use when checking the status of running
            scans.
          format: int32
          example: 3
      description: ""
      discriminator:
        propertyName: ""
    ScanSize:
      type: object
      properties:
        bytes:
          type: integer
          description: The raw value in bytes.
          format: int64
          example: 1370433223
        formatted:
          type: string
          description: The value formatted in human-readable notation (e.g. GB, MB,
            KB, bytes).
          example: 1.3 GB
      description: ""
      discriminator:
        propertyName: ""
    ScanTargetsResource:
      type: object
      properties:
        addresses:
          type: array
          description: List of addresses. Each address is a string that can represent
            either a hostname, ipv4 address, ipv4 address range, ipv6 address, or
            CIDR notation.
          items:
            type: string
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplate:
      type: object
      properties:
        checks:
          $ref: '#/components/schemas/ScanTemplateVulnerabilityChecks'
        database:
          $ref: '#/components/schemas/ScanTemplateDatabase'
        description:
          type: string
          description: A verbose description of the scan template..
          example: Performs a full network audit of all systems using only safe checks...
        discovery:
          $ref: '#/components/schemas/ScanTemplateDiscovery'
        discoveryOnly:
          type: boolean
          description: Whether only discovery is performed during a scan.
          example: false
        enableWindowsServices:
          type: boolean
          description: Whether Windows services are enabled during a scan. Windows
            services will be temporarily reconfigured when this option is selected.
            Original settings will be restored after the scan completes, unless it
            is interrupted.
          example: false
        enhancedLogging:
          type: boolean
          description: Whether enhanced logging is gathered during scanning. Collection
            of enhanced logs may greatly increase the disk space used by a scan.
          example: false
        id:
          type: string
          description: The identifier of the scan template
          readOnly: true
          example: full-audit-without-web-spider
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        maxParallelAssets:
          type: integer
          description: The maximum number of assets scanned simultaneously per scan
            engine during a scan.
          format: int32
          example: 10
        maxScanProcesses:
          type: integer
          description: The maximum number of scan processes simultaneously allowed
            against each asset during a scan.
          format: int32
          example: 10
        name:
          type: string
          description: A concise name for the scan template.
          example: Full audit
        policy:
          $ref: '#/components/schemas/Policy'
        policyEnabled:
          type: boolean
          description: Whether policy assessment is performed during a scan.
          example: true
        telnet:
          $ref: '#/components/schemas/Telnet'
        vulnerabilityEnabled:
          type: boolean
          description: Whether vulnerability assessment is performed during a scan.
          example: true
        web:
          $ref: '#/components/schemas/ScanTemplateWebSpider'
        webEnabled:
          type: boolean
          description: Whether web spidering and assessment are performed during a
            scan.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateAssetDiscovery:
      type: object
      properties:
        collectWhoisInformation:
          type: boolean
          description: Whether to query Whois during discovery. Defaults to `false`.
          example: false
        fingerprintMinimumCertainty:
          maximum: 1
          minimum: 0
          type: number
          description: The minimum certainty required for a fingerprint to be considered
            valid during a scan. Defaults to `0.16`.
          format: double
          example: 0.16
        fingerprintRetries:
          maximum: 1E+3
          minimum: 0
          type: integer
          description: The number of fingerprinting attempts made to determine the
            operating system fingerprint. Defaults to `4`.
          format: int32
          example: 0
        ipFingerprintingEnabled:
          type: boolean
          description: Whether to fingerprint TCP/IP stacks for hardware, operating
            system and software information.
          example: true
        sendArpPings:
          type: boolean
          description: Whether ARP pings are sent during asset discovery. Defaults
            to `true`.
          example: true
        sendIcmpPings:
          type: boolean
          description: Whether ICMP pings are sent during asset discovery. Defaults
            to `false`.
          example: true
        tcpPorts:
          type: array
          description: TCP ports to send packets and perform discovery. Defaults to
            no ports.
          items:
            type: integer
            format: int32
        treatTcpResetAsAsset:
          type: boolean
          description: Whether TCP reset responses are treated as live assets. Defaults
            to `true`.
          example: true
        udpPorts:
          type: array
          description: UDP ports to send packets and perform discovery. Defaults to
            no ports.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDatabase:
      type: object
      properties:
        db2:
          type: string
          description: Database name for DB2 database instance.
          example: database
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        oracle:
          type: array
          description: Database name (SID) for an Oracle database instance.
          example: default
          items:
            type: string
        postgres:
          type: string
          description: Database name for PostgesSQL database instance.
          example: postgres
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscovery:
      type: object
      properties:
        asset:
          $ref: '#/components/schemas/ScanTemplateAssetDiscovery'
        perfomance:
          $ref: '#/components/schemas/ScanTemplateDiscoveryPerformance'
        service:
          $ref: '#/components/schemas/ScanTemplateServiceDiscovery'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscoveryPerformance:
      type: object
      properties:
        packetRate:
          $ref: '#/components/schemas/ScanTemplateDiscoveryPerformancePacketsRate'
        parallelism:
          $ref: '#/components/schemas/ScanTemplateDiscoveryPerformanceParallelism'
        retryLimit:
          maximum: 15
          minimum: 1
          type: integer
          description: The maximum number of attempts to contact target assets. If
            the limit is exceeded with no response, the given asset is not scanned.
            Defaults to `3`.
          format: int32
          example: 3
        scanDelay:
          $ref: '#/components/schemas/ScanTemplateDiscoveryPerformanceScanDelay'
        timeout:
          $ref: '#/components/schemas/ScanTemplateDiscoveryPerformanceTimeout'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscoveryPerformancePacketsRate:
      type: object
      properties:
        defeatRateLimit:
          type: boolean
          description: Whether defeat rate limit (defeat-rst-ratelimit) is enforced
            on the minimum packet setting, which can improve scan speed. If it is
            disabled, the minimum packet rate setting may be ignored when a target
            limits its rate of RST (reset) responses to a port scan. This can increase
            scan accuracy by preventing the scan from missing ports. Defaults to `true`.
          example: true
        maximum:
          maximum: 1.5E+4
          minimum: 0
          type: integer
          description: The minimum number of packets to send each second during discovery
            attempts. Defaults to `0`.
          format: int32
          example: 15000
        minimum:
          maximum: 1.5E+4
          minimum: 0
          type: integer
          description: The minimum number of packets to send each second during discovery
            attempts. Defaults to `0`.
          format: int32
          example: 450
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscoveryPerformanceParallelism:
      type: object
      properties:
        maximum:
          maximum: 1E+3
          minimum: 0
          type: integer
          description: The maximum number of discovery connection requests send in
            parallel. Defaults to `0`.
          format: int32
          example: 0
        minimum:
          maximum: 1E+3
          minimum: 0
          type: integer
          description: The minimum number of discovery connection requests send in
            parallel. Defaults to `0`.
          format: int32
          example: 0
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscoveryPerformanceScanDelay:
      type: object
      properties:
        maximum:
          type: string
          description: The minimum duration to wait between sending packets to each
            target host. The value is specified as a ISO8601 duration and can range
            from `PT0S` (0ms) to `P30S` (30s). Defaults to `PT0S`.
          example: PT0S
        minimum:
          type: string
          description: The maximum duration to wait between sending packets to each
            target host. The value is specified as a ISO8601 duration and can range
            from `PT0S` (0ms) to `P30S` (30s). Defaults to `PT0S`.
          example: PT0S
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateDiscoveryPerformanceTimeout:
      type: object
      properties:
        initial:
          type: string
          description: The initial timeout to wait between retry attempts. The value
            is specified as a ISO8601 duration and can range from `PT0.5S` (500ms)
            to `P30S` (30s). Defaults to `PT0.5S`.
          example: PT0.5S
        maximum:
          type: string
          description: The maximum time to wait between retries. The value is specified
            as a ISO8601 duration and can range from `PT0.5S` (500ms) to `P30S` (30s).
            Defaults to `PT3S`.
          example: PT3S
        minimum:
          type: string
          description: The minimum time to wait between retries. The value is specified
            as a ISO8601 duration and can range from `PT0.5S` (500ms) to `P30S` (30s).
            Defaults to `PT0.5S`.
          example: PT0S
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateServiceDiscovery:
      type: object
      properties:
        serviceNameFile:
          type: string
          description: An optional file that lists each port and the service that
            commonly resides on it. If scans cannot identify actual services on ports,
            service names will be derived from this file in scan results. Defaults
            to empty.
          example: ""
        tcp:
          $ref: '#/components/schemas/ScanTemplateServiceDiscoveryTcp'
        udp:
          $ref: '#/components/schemas/ScanTemplateServiceDiscoveryUdp'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateServiceDiscoveryTcp:
      type: object
      properties:
        additionalPorts:
          type: array
          description: Additional TCP ports to scan. Individual ports can be specified
            as numbers or a string, but port ranges must be strings (e.g. `"7892-7898"`).
            Defaults to empty.
          example: 3078,8000-8080
          items:
            type: object
            properties: {}
        excludedPorts:
          type: array
          description: TCP ports to exclude from scanning. Individual ports can be
            specified as numbers or a string, but port ranges must be strings (e.g.
            `"7892-7898"`). Defaults to empty.
          example: "1024"
          items:
            type: object
            properties: {}
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        method:
          type: string
          description: The method of TCP discovery. Defaults to `SYN`.
          example: SYN
          enum:
            - SYN
            - SYN+RST
            - SYN+FIN
            - SYN+ECE
            - Full
        ports:
          type: string
          description: The TCP ports to scan. Defaults to `well-known`.
          example: well-known
          enum:
            - all
            - well-known
            - custom
            - none
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateServiceDiscoveryUdp:
      type: object
      properties:
        additionalPorts:
          type: array
          description: Additional UDP ports to scan. Individual ports can be specified
            as numbers or a string, but port ranges must be strings (e.g. `"7892-7898"`).
            Defaults to empty.
          example: 4020-4032
          items:
            type: object
            properties: {}
        excludedPorts:
          type: array
          description: UDP ports to exclude from scanning. Individual ports can be
            specified as numbers or a string, but port ranges must be strings (e.g.
            `"7892-7898"`). Defaults to empty.
          example: "9899"
          items:
            type: object
            properties: {}
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        ports:
          type: string
          description: The UDP ports to scan. Defaults to `well-known`.
          example: well-known
          enum:
            - all
            - well-known
            - custom
            - none
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateVulnerabilityCheckCategories:
      type: object
      properties:
        disabled:
          type: array
          description: The categories of vulnerability checks to disable during a
            scan.
          items:
            type: string
        enabled:
          type: array
          description: The categories of vulnerability checks to enable during a scan.
          items:
            type: string
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateVulnerabilityCheckIndividual:
      type: object
      properties:
        disabled:
          type: array
          description: The individual vulnerability checks to disable during a scan.
          items:
            type: string
        enabled:
          type: array
          description: The individual vulnerability checks to enable during a scan.
          items:
            type: string
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateVulnerabilityChecks:
      type: object
      properties:
        categories:
          $ref: '#/components/schemas/ScanTemplateVulnerabilityCheckCategories'
        correlate:
          type: boolean
          description: Whether an extra step is performed at the end of the scan where
            more trust is put in OS patch checks to attempt to override the results
            of other checks which could be less reliable.
          example: false
        individual:
          $ref: '#/components/schemas/ScanTemplateVulnerabilityCheckIndividual'
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        potential:
          type: boolean
          description: Whether checks that result in potential vulnerabilities are
            assessed during a scan.
          example: false
        types:
          $ref: '#/components/schemas/VulnerabilityCheckType'
        unsafe:
          type: boolean
          description: Whether checks considered "unsafe" are assessed during a scan.
          example: false
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateWebSpider:
      type: object
      properties:
        dontScanMultiUseDevices:
          type: boolean
          description: Whether scanning of multi-use devices, such as printers or
            print servers should be avoided.
          example: true
        includeQueryStrings:
          type: boolean
          description: Whether query strings are using in URLs when web spidering.
            This causes the web spider to make many more requests to the Web server.
            This will increase overall scan time and possibly affect the Web server's
            performance for legitimate users.
          example: false
        paths:
          $ref: '#/components/schemas/ScanTemplateWebSpiderPaths'
        patterns:
          $ref: '#/components/schemas/ScanTemplateWebSpiderPatterns'
        performance:
          $ref: '#/components/schemas/ScanTemplateWebSpiderPerformance'
        testCommonUsernamesAndPasswords:
          type: boolean
          description: Whether to determine if discovered logon forms accept commonly
            used user names or passwords. The process may cause authentication services
            with certain security policies to lock out accounts with these credentials.
          example: false
        testXssInSingleScan:
          type: boolean
          description: Whether to test for persistent cross-site scripting during
            a single scan. This test helps to reduce the risk of dangerous attacks
            via malicious code stored on Web servers. Enabling it may increase Web
            spider scan times.
          example: false
        userAgent:
          type: string
          description: The `User-Agent` to use when web spidering. Defaults to `"Mozilla/5.0
            (compatible; MSIE 7.0; Windows NT 6.0; .NET CLR 1.1.4322; .NET CLR 2.0.50727)"`.
          example: Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 6.0; .NET CLR 1.1.4322;
            .NET CLR 2.0.50727)
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateWebSpiderPaths:
      type: object
      properties:
        boostrap:
          type: string
          description: Paths to bootstrap spidering with.
          example: /root
        excluded:
          type: string
          description: Paths excluded from spidering.
          example: /root/sensitive.html
        honorRobotDirectives:
          type: boolean
          description: ${scan.template.web.spider.paths.robot.directives.description}
          example: false
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateWebSpiderPatterns:
      type: object
      properties:
        sensitiveContent:
          type: string
          description: A regular expression that is used to find sensitive content
            on a page.
          example: ""
        sensitiveField:
          type: string
          description: A regular expression that is used to find fields that may contain
            sensitive input. Defaults to `"(p|pass)(word|phrase|wd|code)"`.
          example: (p|pass)(word|phrase|wd|code)
      description: ""
      discriminator:
        propertyName: ""
    ScanTemplateWebSpiderPerformance:
      type: object
      properties:
        httpDaemonsToSkip:
          type: array
          description: The names of HTTP Daemons (HTTPd) to skip when spidering. For
            example, `"CUPS"`.
          items:
            type: string
        maximumDirectoryLevels:
          maximum: 1E+2
          minimum: 1
          type: integer
          description: The directory depth limit for web spidering. Limiting directory
            depth can save significant time, especially with large sites. A value
            of `0` signifies unlimited directory traversal. Defaults to `6`.
          format: int32
          example: 6
        maximumForeignHosts:
          type: integer
          description: The maximum number of unique host names that the spider may
            resolve. This function adds substantial time to the spidering process,
            especially with large Web sites, because of frequent cross-link checking
            involved. Defaults to `100`.
          format: int32
          example: 100
        maximumLinkDepth:
          maximum: 1E+2
          minimum: 0
          type: integer
          description: The maximum depth of links to traverse when spidering. Defaults
            to `6`.
          format: int32
          example: 6
        maximumPages:
          maximum: 1E+6
          minimum: 0
          type: integer
          description: The maximum the number of pages that are spidered. This is
            a time-saving measure for large sites. Defaults to `3000`.
          format: int32
          example: 3000
        maximumRetries:
          maximum: 999
          minimum: 0
          type: integer
          description: The maximum the number of times to retry a request after a
            failure. A value of `0` means no retry attempts are made. Defaults to
            `2`.
          format: int32
          example: 2
        maximumTime:
          type: string
          description: The maximum length of time to web spider. This limit prevents
            scans from taking longer than the allotted scan schedule. A value of `PT0S`
            means no limit is applied. The acceptable range is `PT1M` to `PT16666.6667H`.
          example: PT0S
        responseTimeout:
          type: string
          description: The duration to wait for a response from a target web server.
            The value is specified as a ISO8601 duration and can range from `PT0S`
            (0ms) to `P1H` (1 hour). Defaults to `PT2M`.
          example: PT2M
        threadsPerServer:
          maximum: 999
          minimum: 0
          type: integer
          description: The number of threads to use per web server being spidered.
            Defaults to `3`.
          format: int32
          example: 3
      description: ""
      discriminator:
        propertyName: ""
    ScheduledScanTargets:
      type: object
      properties:
        excludedAssetGroups:
          $ref: '#/components/schemas/ExcludedAssetGroups'
        excludedTargets:
          $ref: '#/components/schemas/ExcludedScanTargets'
        includedAssetGroups:
          $ref: '#/components/schemas/IncludedAssetGroups'
        includedTargets:
          $ref: '#/components/schemas/IncludedScanTargets'
      description: ""
      discriminator:
        propertyName: ""
    SearchCriteria:
      type: object
      properties:
        filters:
          type: array
          description: Filters used to match assets. See <a href="#section/Responses/SearchCriteria">Search
            Criteria</a> for more information on the structure and format.
          items:
            $ref: '#/components/schemas/SwaggerSearchCriteriaFilter'
        match:
          type: string
          description: Operator to determine how to match filters. `all` requires
            that all filters match for an asset to be included. `any` requires only
            one filter to match for an asset to be included.
          example: all
          enum:
            - any
            - all
      description: ""
      discriminator:
        propertyName: ""
    Service:
      required:
        - port
        - protocol
      type: object
      properties:
        configurations:
          type: array
          description: Configuration key-values pairs enumerated on the service.
          items:
            $ref: '#/components/schemas/Configuration'
        databases:
          type: array
          description: The databases enumerated on the service.
          items:
            $ref: '#/components/schemas/Database'
        family:
          type: string
          description: The family of the service.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the service.
          example: CIFS Name Service
        port:
          type: integer
          description: The port of the service.
          format: int32
          example: 139
        product:
          type: string
          description: The product running the service.
          example: Samba
        protocol:
          type: string
          description: The protocol of the service.
          example: tcp
          enum:
            - ip
            - icmp
            - igmp
            - ggp
            - tcp
            - pup
            - udp
            - idp
            - esp
            - nd
            - raw
        userGroups:
          type: array
          description: The group accounts enumerated on the service.
          items:
            $ref: '#/components/schemas/GroupAccount'
        users:
          type: array
          description: The user accounts enumerated on the service.
          items:
            $ref: '#/components/schemas/UserAccount'
        vendor:
          type: string
          description: The vendor of the service.
          example: ""
        version:
          type: string
          description: The version of the service.
          example: 3.5.11
        webApplications:
          type: array
          description: The web applications found on the service.
          items:
            $ref: '#/components/schemas/WebApplication'
      description: ""
      discriminator:
        propertyName: ""
    ServiceLink:
      type: object
      properties:
        href:
          type: string
          description: 'A hypertext reference, which is either a URI (see <a target="_blank"
            href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>) or URI template
            (see <a target="_blank" href="https://tools.ietf.org/html/rfc6570">RFC
            6570</a>). '
          example: https://hostname:3780/api/3/...
        port:
          type: integer
          description: The port of the service.
          format: int32
          example: 22
        protocol:
          type: string
          description: The protocol of the service.
          example: tcp
          enum:
            - ip
            - icmp
            - igmp
            - ggp
            - tcp
            - pup
            - udp
            - idp
            - esp
            - nd
            - raw
        rel:
          type: string
          description: The link relation type. This value is one from the <a target="_blank"
            href="https://tools.ietf.org/html/rfc5988#section-6.2">Link Relation Type
            Registry</a> or is the type of resource being linked to.
          example: Service
      description: ""
      discriminator:
        propertyName: ""
    ServiceUnavailableError:
      required:
        - status
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: "503"
          enum:
            - "503"
      description: ""
      discriminator:
        propertyName: ""
    Settings:
      type: object
      properties:
        assetLinking:
          type: boolean
          description: Whether asset linking is enabled.
          example: true
        authentication:
          $ref: '#/components/schemas/AuthenticationSettings'
        database:
          $ref: '#/components/schemas/DatabaseSettings'
        directory:
          type: string
          description: The root directory of the console.
          example: /opt/rapid7/nexpose
        insightPlatform:
          type: boolean
          description: Whether the usage of the Insight Platform is enabled.
          example: true
        insightPlatformRegion:
          type: string
          description: The region used for the Insight Platform, if enabled.
          example: us-east-1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        risk:
          $ref: '#/components/schemas/RiskSettings'
        scan:
          $ref: '#/components/schemas/ScanSettings'
        serialNumber:
          type: string
          description: The console serial number.
          example: 729F31B1C92F3C91DFA8A649F4D5C883C269BD45
        smtp:
          $ref: '#/components/schemas/SmtpSettings'
        updates:
          $ref: '#/components/schemas/UpdateSettings'
        uuid:
          type: string
          description: The universally unique identifier (UUID) of the console.
          example: 7231036a-e052-11e7-80c1-9a214cf093ae
        web:
          $ref: '#/components/schemas/WebSettings'
      description: ""
      discriminator:
        propertyName: ""
    SharedCredential:
      required:
        - account
        - name
        - siteAssignment
      type: object
      properties:
        account:
          $ref: '#/components/schemas/SharedCredentialAccount'
        description:
          type: string
          description: The description of the credential.
          example: ""
        hostRestriction:
          type: string
          description: The host name or IP address that you want to restrict the credentials
            to.
          example: ""
        id:
          type: integer
          description: The identifier of the credential.
          format: int32
        name:
          type: string
          description: The name of the credential.
          example: ""
        portRestriction:
          maximum: 65535
          minimum: 1
          type: integer
          description: Further restricts the credential to attempt to authenticate
            on a specific port. The port can only be restricted if the property `hostRestriction`
            is specified.
          format: int32
        siteAssignment:
          type: string
          description: |-
            Assigns the shared scan credential either to be available to all sites or to a specific list of sites.
            The following table describes each supported value:
            | Value | Description |
            | ---------- | ---------------- |
            | `"all-sites"` | The shared scan credential is assigned to all current and future sites. |
            | `"specific-sites"` | The shared scan credential is assigned to zero sites by default. Administrators must explicitly assign sites to the shared credential. |
            Shared scan credentials assigned to a site can disabled within the site configuration, if needed.
          example: ""
        sites:
          type: array
          description: List of site identifiers. These sites are explicitly assigned
            access to the shared scan credential, allowing the site to use the credential
            for authentication during a scan. This property can only be set if the
            value of property `siteAssignment` is set to `"specific-sites"`. When
            the property `siteAssignment` is set to `"all-sites"`, this property will
            be `null`.
          items:
            type: integer
            format: int32
      description: ""
      discriminator:
        propertyName: ""
    SharedCredentialAccount:
      type: object
      properties:
        authenticationType:
          type: string
        communityName:
          type: string
        database:
          type: string
        domain:
          type: string
        enumerateSids:
          type: boolean
        notesIDPassword:
          type: string
        ntlmHash:
          type: string
        oracleListenerPassword:
          type: string
        password:
          type: string
        pemKey:
          type: string
        permissionElevation:
          type: string
        permissionElevationPassword:
          type: string
        permissionElevationUserName:
          type: string
        privacyPassword:
          type: string
        privacyType:
          type: string
        privateKeyPassword:
          type: string
        realm:
          type: string
        service:
          type: string
        sid:
          type: string
        useWindowsAuthentication:
          type: boolean
        username:
          type: string
      description: ""
      discriminator:
        propertyName: ""
    Site:
      type: object
      properties:
        assets:
          type: integer
          description: The number of assets that belong to the site.
          format: int32
          readOnly: true
          example: 768
        connectionType:
          type: string
          description: The type of discovery connection configured for the site. This
            property only applies to dynamic sites.
          readOnly: true
          example: ""
          enum:
            - activesync-ldap
            - activesync-office365
            - activesync-powershell
            - aws
            - dhcp
            - sonar
            - vsphere
        description:
          type: string
          description: The site description.
          example: ""
        id:
          type: integer
          description: The identifier of the site.
          format: int32
        importance:
          type: string
          description: The site importance.
          example: ""
        lastScanTime:
          type: string
          description: The date and time of the site's last scan.
          readOnly: true
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The site name.
          example: ""
        riskScore:
          type: number
          description: The risk score (with criticality adjustments) of the site.
          format: double
          readOnly: true
          example: 4457823.78
        scanEngine:
          type: integer
          description: The identifier of the scan engine configured in the site.
          format: int32
        scanTemplate:
          type: string
          description: The identifier of the scan template configured in the site.
          example: ""
        type:
          type: string
          description: The type of the site.
          readOnly: true
          example: ""
          enum:
            - agent
            - dynamic
            - static
        vulnerabilities:
          $ref: '#/components/schemas/Vulnerabilities'
      description: ""
      discriminator:
        propertyName: ""
    SiteCreateResource:
      required:
        - name
      type: object
      properties:
        description:
          type: string
          description: The site's description.
          example: ""
        engineId:
          type: integer
          description: The identifier of a scan engine. Default scan engine is selected
            when not specified.
          format: int32
        importance:
          type: string
          description: The site importance. Defaults to `"normal"` if not specified.
          example: ""
          enum:
            - very_low
            - low
            - normal
            - high
            - very_high
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The site name. Name must be unique.
          example: ""
        scan:
          $ref: '#/components/schemas/ScanScope'
        scanTemplateId:
          type: string
          description: The identifier of a scan template. Default scan template is
            selected when not specified.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    SiteCredential:
      required:
        - account
        - name
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
        description:
          type: string
          description: The description of the credential.
          example: ""
        enabled:
          type: boolean
          description: Flag indicating whether the credential is enabled for use during
            the scan.
          example: false
        hostRestriction:
          type: string
          description: The host name or IP address that you want to restrict the credentials
            to.
          example: ""
        id:
          type: integer
          description: The identifier of the credential.
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the credential.
          example: ""
        portRestriction:
          maximum: 65535
          minimum: 1
          type: integer
          description: Further restricts the credential to attempt to authenticate
            on a specific port. The port can only be restricted if the property `hostRestriction`
            is specified.
          format: int32
      description: ""
      discriminator:
        propertyName: ""
    SiteDiscoveryConnection:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the discovery connection.
          format: int64
          readOnly: true
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the discovery connection.
          readOnly: true
          example: ""
        type:
          type: string
          description: The type of discovery connection configured for the site. This
            property only applies to dynamic sites.
          readOnly: true
          example: ""
          enum:
            - activesync-ldap
            - activesync-office365
            - activesync-powershell
            - aws
            - dhcp
            - sonar
            - vsphere
      description: ""
      discriminator:
        propertyName: ""
    SiteOrganization:
      type: object
      properties:
        address:
          type: string
          description: The address.
          example: ""
        city:
          type: string
          description: The city.
          example: ""
        contact:
          type: string
          description: The contact person name.
          example: ""
        country:
          type: string
          description: The country.
          example: ""
        email:
          type: string
          description: The e-mail address.
          example: ""
        jobTitle:
          type: string
          description: The job title.
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The organization name.
          example: ""
        phone:
          type: string
          description: The phone number.
          example: ""
        state:
          type: string
          description: The state.
          example: ""
        url:
          type: string
          description: The organization URL.
          example: ""
        zipCode:
          type: string
          description: The zip or region code.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    SiteSharedCredential:
      type: object
      properties:
        enabled:
          type: boolean
          description: Flag indicating whether the shared credential is enabled for
            the site's scans.
          readOnly: true
          example: false
        id:
          type: integer
          description: The identifier of the shared credential.
          format: int32
          readOnly: true
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the shared credential.
          readOnly: true
          example: ""
        service:
          type: string
          description: The type of service the credential is configured to authenticate
            with.
          readOnly: true
          example: ""
          enum:
            - as400
            - cifs
            - cifshash
            - cvs
            - db2
            - ftp
            - http
            - ms-sql
            - mysql
            - notes
            - oracle
            - pop
            - postgresql
            - remote-exec
            - snmp
            - snmpv3
            - ssh
            - ssh-key
            - sybase
            - telnet
      description: ""
      discriminator:
        propertyName: ""
    SiteUpdateResource:
      required:
        - engineId
        - importance
        - name
        - scanTemplateId
      type: object
      properties:
        description:
          type: string
          description: The site's description.
          example: ""
        engineId:
          type: integer
          description: The identifier of a scan engine.
          format: int32
        importance:
          type: string
          description: The site importance.
          example: ""
          enum:
            - very_low
            - low
            - normal
            - high
            - very_high
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The site name. Name must be unique.
          example: ""
        scanTemplateId:
          type: string
          description: The identifier of a scan template.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    SmtpAlert:
      required:
        - enabled
        - name
        - notification
        - recipients
        - relayServer
      type: object
      properties:
        enabled:
          type: boolean
          description: Flag indicating the alert is enabled.
          example: false
        enabledScanEvents:
          $ref: '#/components/schemas/ScanEvents'
        enabledVulnerabilityEvents:
          $ref: '#/components/schemas/VulnerabilityEvents'
        id:
          type: integer
          description: The identifier of the alert.
          format: int32
        limitAlertText:
          type: boolean
          description: Reports basic information in the alert, if enabled.
          example: false
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        maximumAlerts:
          minimum: 1
          type: integer
          description: The maximum number of alerts that will be issued. To disable
            maximum alerts, omit the property in the request or specify the property
            with a value of `null`.
          format: int32
        name:
          type: string
          description: The name of the alert.
          example: ""
        notification:
          type: string
          description: The type of alert.
          example: ""
          enum:
            - SMTP
            - SNMP
            - Syslog
        recipients:
          type: array
          description: The recipient list. At least one recipient must be specified.
            Each recipient must be a valid e-mail address.
          items:
            type: string
        relayServer:
          type: string
          description: The SMTP server/relay to send messages through.
          example: ""
        senderEmailAddress:
          type: string
          description: The sender e-mail address that will appear in the from field.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    SmtpSettings:
      type: object
      properties:
        host:
          type: string
          description: The host to send to.
          example: mail@acme.com
        port:
          type: integer
          description: The port to send to.
          format: int32
          example: 25
        sender:
          type: string
          description: The sender to send from.
          example: security@acme.com
      description: ""
      discriminator:
        propertyName: ""
    SnmpAlert:
      required:
        - community
        - enabled
        - name
        - notification
        - server
      type: object
      properties:
        community:
          type: string
          description: The SNMP community name.
          example: ""
        enabled:
          type: boolean
          description: Flag indicating the alert is enabled.
          example: false
        enabledScanEvents:
          $ref: '#/components/schemas/ScanEvents'
        enabledVulnerabilityEvents:
          $ref: '#/components/schemas/VulnerabilityEvents'
        id:
          type: integer
          description: The identifier of the alert.
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        maximumAlerts:
          minimum: 1
          type: integer
          description: The maximum number of alerts that will be issued. To disable
            maximum alerts, omit the property in the request or specify the property
            with a value of `null`.
          format: int32
        name:
          type: string
          description: The name of the alert.
          example: ""
        notification:
          type: string
          description: The type of alert.
          example: ""
          enum:
            - SMTP
            - SNMP
            - Syslog
        server:
          type: string
          description: The SNMP management server.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    Software:
      type: object
      properties:
        configurations:
          type: array
          description: ${software.attributes.description}
          items:
            $ref: '#/components/schemas/Configuration'
        cpe:
          $ref: '#/components/schemas/SoftwareCpe'
        description:
          type: string
          description: The description of the software.
          example: Microsoft Outlook 2013 15.0.4867.1000
        family:
          type: string
          description: The family of the software.
          example: Office 2013
        id:
          type: integer
          format: int64
        product:
          type: string
          description: The product of the software.
          example: Outlook 2013
        type:
          type: string
          description: The version of the software.
          example: Productivity
        vendor:
          type: string
          description: The vendor of the software.
          example: Microsoft
        version:
          type: string
          description: The version of the software.
          example: 15.0.4867.1000
      description: ""
      discriminator:
        propertyName: ""
    SoftwareCpe:
      required:
        - part
      type: object
      properties:
        edition:
          type: string
          description: 'Edition-related terms applied by the vendor to the product. '
          example: enterprise
        language:
          type: string
          description: Defines the language supported in the user interface of the
            product being described. The format is of the language tag adheres to
            <a target="_blank" href="https://tools.ietf.org/html/rfc5646">RFC5646</a>.
          example: ""
        other:
          type: string
          description: 'Captures any other general descriptive or identifying information
            which is vendor- or product-specific and which does not logically fit
            in any other attribute value. '
          example: ""
        part:
          type: string
          description: A single letter code that designates the particular platform
            part that is being identified.
          example: o
          enum:
            - o
            - a
            - h
        product:
          type: string
          description: the most common and recognizable title or name of the product.
          example: windows_server_2008
        swEdition:
          type: string
          description: 'Characterizes how the product is tailored to a particular
            market or class of end users. '
          example: ""
        targetHW:
          type: string
          description: 'Characterize the instruction set architecture on which the
            product operates. '
          example: ""
        targetSW:
          type: string
          description: Characterize the software computing environment within which
            the product operates.
          example: ""
        update:
          type: string
          description: Vendor-specific alphanumeric strings characterizing the particular
            update, service pack, or point release of the product.
          example: sp1
        v2.2:
          type: string
          description: The full CPE string in the <a target="_blank" href="https://cpe.mitre.org/files/cpe-specification_2.2.pdf">CPE
            2.2</a> format.
          example: cpe:/o:microsoft:windows_server_2008:-:sp1:enterprise
        v2.3:
          type: string
          description: The full CPE string in the <a target="_blank" href="http://nvlpubs.nist.gov/nistpubs/Legacy/IR/nistir7695.pdf">CPE
            2.3</a> format.
          example: cpe:2.3:o:microsoft:windows_server_2008:-:sp1:enterprise:*:*:*:*:*
        vendor:
          type: string
          description: The person or organization that manufactured or created the
            product.
          example: microsoft
        version:
          type: string
          description: Vendor-specific alphanumeric strings characterizing the particular
            release version of the product.
          example: '-'
      description: ""
      discriminator:
        propertyName: ""
    Solution:
      type: object
      properties:
        additionalInformation:
          $ref: '#/components/schemas/AdditionalInformation'
        appliesTo:
          type: string
          description: The systems or software the solution applies to.
          example: libexpat1 on Ubuntu Linux
        estimate:
          type: string
          description: 'The estimated duration to apply the solution, in ISO 8601
            format. For example: `"PT5M"`.'
          example: PT10M
        id:
          type: string
          description: The identifier of the solution.
          example: ubuntu-upgrade-libexpat1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        steps:
          $ref: '#/components/schemas/Steps'
        summary:
          $ref: '#/components/schemas/Summary'
        type:
          type: string
          description: 'The type of the solution. One of: `"Configuration"`, `"Rollup
            patch"`, `"Patch"`'
          example: configuration
          enum:
            - configuration
            - rollup-patch
            - patch
            - unknown
      description: ""
      discriminator:
        propertyName: ""
    SolutionMatch:
      type: object
      properties:
        check:
          type: string
          description: The identifier of the vulnerability check used to match the
            solution, if type is `check`.
          example: ""
        confidence:
          type: string
          description: The confidence of the matching process for the solution.
          example: ""
          enum:
            - exact
            - partial
            - none
        fingerprint:
          $ref: '#/components/schemas/Fingerprint'
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        solution:
          type: string
          description: The identifier of the matched solution.
          example: ubuntu-upgrade-libexpat1
        type:
          type: string
          description: The means by which a solution was matched.
          example: software
          enum:
            - none
            - check
            - operating-system
            - service
            - software
      description: ""
      discriminator:
        propertyName: ""
    SonarCriteria:
      type: object
      properties:
        filters:
          type: array
          description: The filters in the Sonar query.
          items:
            $ref: '#/components/schemas/SonarCriterion'
      description: ""
      discriminator:
        propertyName: ""
    SonarCriterion:
      type: object
      properties:
        days:
          type: integer
          description: If the field is `scan-date-within-the-last`, the number of
            days to search against.
          format: int32
        lower:
          type: string
          description: If the field is `ip-address-range`, the lower limit of the
            search.
          example: ""
        searchDomain:
          type: string
          description: If the field is `domain-contains`, the domain to search against.
          example: acme.com
        type:
          type: string
          description: The type of query to perform.
          example: domain-contains
          enum:
            - domain-contains
            - scan-date-within-the-last
            - ip-address-range
        upper:
          type: string
          description: If the field is `ip-address-range`, the upper limit of the
            search.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    SonarQuery:
      type: object
      properties:
        criteria:
          $ref: '#/components/schemas/SonarCriteria'
        id:
          type: integer
          description: The identifier of the Sonar query.
          format: int64
          readOnly: true
          example: 14
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the Sonar query.
          example: Assets in Domain
      description: ""
      discriminator:
        propertyName: ""
    StaticSite:
      type: object
      properties:
        excludedAssetGroups:
          $ref: '#/components/schemas/ExcludedAssetGroups'
        excludedTargets:
          $ref: '#/components/schemas/ExcludedScanTargets'
        includedAssetGroups:
          $ref: '#/components/schemas/IncludedAssetGroups'
        includedTargets:
          $ref: '#/components/schemas/IncludedScanTargets'
      description: ""
      discriminator:
        propertyName: ""
    Steps:
      type: object
      properties:
        html:
          type: string
          description: Textual representation of the content.
          example: |-
            <p>
                Use `apt-get upgrade` to upgrade libexpat1 to the latest version.
              </p>
        text:
          type: string
          description: Textual representation of the content.
          example: Use `apt-get upgrade` to upgrade libexpat1 to the latest version.
      description: ""
      discriminator:
        propertyName: ""
    Submission:
      type: object
      properties:
        comment:
          type: string
          description: A comment from the submitter as to why the exception was submitted.
          example: ""
        date:
          type: string
          description: The date and time the vulnerability exception was submitted.
          readOnly: true
          example: ""
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The login name of the user that submitted the vulnerability
            exception.
          readOnly: true
          example: ""
        reason:
          type: string
          description: 'The reason the vulnerability exception was submitted. One
            of: `"False Positive"`, `"Compensating Control"`, `"Acceptable Use"`,
            `"Acceptable Risk"`, `"Other"`'
          example: ""
        user:
          type: integer
          description: The identifier of the user that submitted the vulnerability
            exception.
          format: int32
          readOnly: true
      description: ""
      discriminator:
        propertyName: ""
    Summary:
      type: object
      properties:
        html:
          type: string
          description: Textual representation of the content.
          example: Upgrade libexpat1
        text:
          type: string
          description: Textual representation of the content.
          example: Upgrade libexpat1
      description: ""
      discriminator:
        propertyName: ""
    SwaggerDiscoverySearchCriteriaFilter:
      type: object
      properties:
        field:
          type: string
          description: The filter field for the search criteria.
          example: ""
        lower:
          type: string
          description: The lower value to match in a range criteria.
          example: ""
        operator:
          type: string
          description: The operator on how to match the search criteria.
          example: ""
        upper:
          type: string
          description: The upper value to match in a range criteria.
          example: ""
        value:
          type: string
          description: The single value to match using the operator.
          example: ""
        values:
          type: array
          description: An array of values to match using the operator.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    SwaggerSearchCriteriaFilter:
      type: object
      properties:
        field:
          type: string
          description: The filter field for the search criteria.
          example: ""
        lower:
          type: string
          description: The lower value to match in a range criteria.
          example: ""
        operator:
          type: string
          description: The operator on how to match the search criteria.
          example: ""
        upper:
          type: string
          description: The upper value to match in a range criteria.
          example: ""
        value:
          type: string
          description: The single value to match using the operator.
          example: ""
        values:
          type: array
          description: An array of values to match using the operator.
          items:
            type: string
      description: ""
      discriminator:
        propertyName: ""
    SyslogAlert:
      required:
        - enabled
        - name
        - notification
        - server
      type: object
      properties:
        enabled:
          type: boolean
          description: Flag indicating the alert is enabled.
          example: false
        enabledScanEvents:
          $ref: '#/components/schemas/ScanEvents'
        enabledVulnerabilityEvents:
          $ref: '#/components/schemas/VulnerabilityEvents'
        id:
          type: integer
          description: The identifier of the alert.
          format: int32
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        maximumAlerts:
          minimum: 1
          type: integer
          description: The maximum number of alerts that will be issued. To disable
            maximum alerts, omit the property in the request or specify the property
            with a value of `null`.
          format: int32
        name:
          type: string
          description: The name of the alert.
          example: ""
        notification:
          type: string
          description: The type of alert.
          example: ""
          enum:
            - SMTP
            - SNMP
            - Syslog
        server:
          type: string
          description: The Syslog server to send messages to.
          example: ""
      description: ""
      discriminator:
        propertyName: ""
    Tag:
      required:
        - name
        - type
      type: object
      properties:
        color:
          type: string
          description: The color to use when rendering the tag in a user interface.
          example: default
        created:
          type: string
          format: date-time
          description: The date and time the tag was created.
          example: 2017-10-07T23:50:01.205Z
        id:
          type: integer
          description: The identifier of the tag.
          format: int32
          readOnly: true
          example: 6
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name (label) of the tab.
          example: Very High
        riskModifier:
          type: number
          description: 'The amount to adjust risk of an asset tagged with this tag. '
          format: double
          example: 2.0
        searchCriteria:
          $ref: '#/components/schemas/SearchCriteria'
        source:
          type: string
          description: The source of the tag.
          readOnly: true
          example: built-in
          enum:
            - built-in
            - custom
        type:
          type: string
          description: The type of the tag.
          example: criticality
      description: ""
      discriminator:
        propertyName: ""
    TagAssetSource:
      type: object
      properties:
        id:
          type: integer
          description: If the `source` is `"asset-group"` or `"site"` the identifier
            of the asset group or site that causes the tag to apply to the asset.
          format: int32
          example: 92
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        source:
          type: string
          description: The source by which a tag applies to an asset.
          example: site
          enum:
            - site
            - asset-group
            - criteria
            - tag
            - unknown
      description: ""
      discriminator:
        propertyName: ""
    TagLink:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the tagged asset.
          format: int64
          example: 78
        sources:
          type: array
          description: The source(s) by which a tag is applied to an asset.
          items:
            type: string
            enum:
              - site
              - asset-group
              - criteria
              - tag
              - unknown
      description: ""
      discriminator:
        propertyName: ""
    TaggedAssetReferences:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        resources:
          type: array
          description: The identifiers of the associated resources.
          items:
            $ref: '#/components/schemas/TagLink'
      description: ""
      discriminator:
        propertyName: ""
    Telnet:
      type: object
      properties:
        characterSet:
          type: string
          description: The character set to use.
          example: ASCII
        failedLoginRegex:
          type: string
          description: Regular expression to match a failed login response.
          example: (?:[i,I]ncorrect|[u,U]nknown|[f,F]ail|[i,I]nvalid|[l,L]ogin|[p,P]assword|[p,P]asswd|[u,U]sername|[u,U]nable|[e,E]rror|[d,D]enied|[r,R]eject|[r,R]efuse|[c,C]lose|[c,C]losing|Not
            on system console|% Bad)
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        loginRegex:
          type: string
          description: Regular expression to match a login response.
          example: '(?:[l,L]ogin|[u,U]ser.?[nN]ame) *\:'
        passwordPromptRegex:
          type: string
          description: Regular expression to match a password prompt.
          example: '(?:[p,P]assword|[p,P]asswd) *\:'
        questionableLoginRegex:
          type: string
          description: Regular expression to match a potential false negative login
            response.
          example: (?:[l,L]ast [l,L]ogin *\:|allows only .* Telnet Client License)
      description: ""
      discriminator:
        propertyName: ""
    TokenResource:
      type: object
      properties:
        key:
          type: string
          description: The two-factor authentication token seed (key).
          example: ""
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    UnauthorizedError:
      required:
        - status
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          items:
            $ref: '#/components/schemas/Link'
        message:
          type: string
          description: The messages indicating the cause or reason for failure.
          example: An error has occurred.
        status:
          type: string
          description: The HTTP status code for the error (same as in the HTTP response).
          example: "401"
          enum:
            - "401"
      description: ""
      discriminator:
        propertyName: ""
    UniqueId:
      required:
        - id
      type: object
      properties:
        id:
          type: string
          description: The unique identifier.
          example: c56b2c59-4e9b-4b89-85e2-13f8146eb071
        source:
          type: string
          description: The source of the unique identifier.
          example: WQL
      description: ""
      discriminator:
        propertyName: ""
    UpdateId:
      type: object
      properties:
        productId:
          type: string
          description: Product update identifier.
          example: "281474976711146"
        versionId:
          type: string
          description: Version update identifier.
          example: "490"
      description: ""
      discriminator:
        propertyName: ""
    UpdateInfo:
      type: object
      properties:
        content:
          type: string
          description: The most recent content update.
          example: "3192129162"
        contentPartial:
          type: string
          description: The most recent, partially-applied (in-memory), content update.
          example: "723680177"
        id:
          $ref: '#/components/schemas/UpdateId'
        product:
          type: string
          description: The most recent product update.
          example: "2200922472"
      description: ""
      discriminator:
        propertyName: ""
    UpdateSettings:
      type: object
      properties:
        contentAutoUpdate:
          type: boolean
          description: Whether automatic content updates are enabled.
          example: true
        enabled:
          type: boolean
          description: Whether updates are enabled.
          example: true
        productAutoUpdate:
          type: boolean
          description: Whether automatic product updates are enabled.
          example: true
      description: ""
      discriminator:
        propertyName: ""
    User:
      required:
        - login
        - name
        - password
        - role
      type: object
      properties:
        authentication:
          $ref: '#/components/schemas/CreateAuthenticationSource'
        email:
          type: string
          description: The email address of the user.
          example: ""
        enabled:
          type: boolean
          description: Whether the user account is enabled. Defaults to `true`.
          example: false
        id:
          type: integer
          description: The identifier of the user.
          format: int32
          readOnly: true
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        locale:
          $ref: '#/components/schemas/LocalePreferences'
        locked:
          type: boolean
          description: Whether the user account is locked (exceeded maximum password
            retry attempts).
          readOnly: true
          example: false
        login:
          type: string
          description: The login name of the user.
          example: ""
        name:
          type: string
          description: The full name of the user.
          example: ""
        password:
          type: string
          description: The password to use for the user.
          example: ""
        passwordResetOnLogin:
          type: boolean
          description: Whether to require a reset of the user's password upon first
            login. Defaults to `false`.
          example: false
        role:
          $ref: '#/components/schemas/UserCreateRole'
      description: ""
      discriminator:
        propertyName: ""
    UserAccount:
      required:
        - name
      type: object
      properties:
        fullName:
          type: string
          description: The full name of the user account.
          example: Smith, John
        id:
          type: integer
          description: The identifier of the user account.
          format: int32
          example: 8952
        name:
          type: string
          description: The name of the user account.
          example: john_smith
      description: ""
      discriminator:
        propertyName: ""
    UserCreateRole:
      required:
        - id
      type: object
      properties:
        allAssetGroups:
          type: boolean
          description: Whether to grant the user access to all asset groups. Defaults
            to `false`.
          example: false
        allSites:
          type: boolean
          description: Whether to grant the user access to all sites. Defaults to
            `false`.
          example: false
        id:
          type: string
          description: The identifier of the role the user is assigned to.
          example: ""
        superuser:
          type: boolean
          description: Whether the user is a superuser. Defaults to `false`.
          example: false
      description: ""
      discriminator:
        propertyName: ""
    UserRole:
      type: object
      properties:
        allAssetGroups:
          type: boolean
          description: Whether the user has access to all asset groups.
          example: false
        allSites:
          type: boolean
          description: Whether the user has access to all sites.
          example: false
        id:
          type: string
          description: The identifier of the role the user is assigned to.
          example: ""
        name:
          type: string
          description: The name of the role the user is assigned to.
          example: ""
        privileges:
          type: array
          description: The privileges granted to the user by their role.
          items:
            type: string
            enum:
              - all-permissions
              - create-reports
              - configure-global-settings
              - manage-sites
              - manage-tags
              - manage-static-asset-groups
              - manage-dynamic-asset-groups
              - manage-scan-templates
              - manage-report-templates
              - manage-scan-engines
              - submit-vulnerability-exceptions
              - approve-vulnerability-exceptions
              - delete-vulnerability-exceptions
              - create-tickets
              - close-tickets
              - assign-ticket-assignee
              - manage-site-access
              - manage-asset-group-access
              - manage-report-access
              - use-restricted-report-sections
              - manage-policies
              - view-asset-group-asset-data
              - manage-asset-group-assets
              - view-site-asset-data
              - specify-site-metadata
              - purge-site-asset-data
              - specify-scan-targets
              - assign-scan-engine
              - assign-scan-template
              - manage-site-credentials
              - manage-scan-alerts
              - schedule-automatic-scans
              - start-unscheduled-scans
        superuser:
          type: boolean
          description: Whether the user is a superuser.
          example: false
      description: ""
      discriminator:
        propertyName: ""
    VersionInfo:
      type: object
      properties:
        build:
          type: string
          description: The build number.
          example: 2017-12-10-14-11
        changeset:
          type: string
          description: The changeset of the source build.
          example: 7061fb4e7c355160df79a77d8983bed2af01f2bf
        platform:
          type: string
          description: The platform of the build.
          example: Linux64
        semantic:
          type: string
          description: The semantic version number of the installation.
          example: 6.4.65
        update:
          $ref: '#/components/schemas/UpdateInfo'
      description: ""
      discriminator:
        propertyName: ""
    Vulnerabilities:
      type: object
      properties:
        critical:
          type: integer
          description: The number of critical vulnerabilities.
          format: int64
          readOnly: true
          example: 16
        moderate:
          type: integer
          description: The number of moderate vulnerabilities.
          format: int64
          readOnly: true
          example: 3
        severe:
          type: integer
          description: The number of severe vulnerabilities.
          format: int64
          readOnly: true
          example: 76
        total:
          type: integer
          description: The total number of vulnerabilities.
          format: int64
          readOnly: true
          example: 95
      description: ""
      discriminator:
        propertyName: ""
    Vulnerability:
      type: object
      properties:
        added:
          type: string
          format: date
          description: The date the vulnerability coverage was added. The format is
            an ISO 8601 date, `YYYY-MM-DD`.
          example: 2017-10-10
        categories:
          type: array
          description: All vulnerability categories assigned to this vulnerability.
          items:
            type: string
        cves:
          type: array
          description: All <a target="_blank" href="https://cve.mitre.org/">CVE</a>s
            assigned to this vulnerability.
          items:
            type: string
        cvss:
          $ref: '#/components/schemas/VulnerabilityCvss'
        denialOfService:
          type: boolean
          description: Whether the vulnerability can lead to Denial of Service (DoS).
          example: false
        description:
          $ref: '#/components/schemas/ContentDescription'
        exploits:
          type: integer
          description: The exploits that can be used to exploit a vulnerability.
          format: int32
        id:
          type: string
          description: The identifier of the vulnerability.
          example: msft-cve-2017-11804
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        malwareKits:
          type: integer
          description: The malware kits that are known to be used to exploit the vulnerability.
          format: int32
        modified:
          type: string
          format: date
          description: The last date the vulnerability was modified. The format is
            an ISO 8601 date, `YYYY-MM-DD`.
          example: 2017-10-10
        pci:
          $ref: '#/components/schemas/PCI'
        published:
          type: string
          format: date
          description: The date the vulnerability was first published or announced.
            The format is an ISO 8601 date, `YYYY-MM-DD`.
          example: 2017-10-10
        riskScore:
          type: number
          description: The risk score of the vulnerability, rounded to a maximum of
            to digits of precision. If using the default Rapid7 Real Risk™ model,
            this value ranges from 0-1000.
          format: double
          example: 123.69
        severity:
          type: string
          description: 'The severity of the vulnerability, one of: `"Moderate"`, `"Severe"`,
            `"Critical"`.'
          example: Severe
        severityScore:
          type: integer
          description: The severity score of the vulnerability, on a scale of 0-10.
          format: int32
          example: 4
        title:
          type: string
          description: The title (summary) of the vulnerability.
          example: 'Microsoft CVE-2017-11804: Scripting Engine Memory Corruption Vulnerability'
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCategory:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the vulnerability category.
          format: int32
          example: 23
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          type: string
          description: The name of the category.
          example: Microsoft
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCheck:
      type: object
      properties:
        id:
          type: string
          description: The identifier of the vulnerability check.
          example: WINDOWS-HOTFIX-MS14-009-01123281-bac0-44d8-a729-cd31c19d6bd1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        plugin:
          type: string
          description: The name of the plugin (module) the check belongs to.
          example: WindowsHotfixScanner
        potential:
          type: boolean
          description: Whether the check results in potential vulnerabilities.
          example: false
        requiresCredentials:
          type: boolean
          description: Whether the check requires credentials in order to run.
          example: true
        safe:
          type: boolean
          description: Whether the checked is deemed to be "safe" to run. A safe check
            is one that can be run without negatively impacting the host it is run
            against.
          example: true
        service:
          type: boolean
          description: Whether the check operates against a service, or false it it
            is a local check.
          example: false
        unique:
          type: boolean
          description: Whether the check may only register a result once during a
            scan of host. Otherwise, the tests in the check can run multiple times,
            possibly registering multiple results.
          example: false
        vulnerability:
          type: string
          description: The identifier of the vulnerability the check results in.
          example: windows-hotfix-ms14-009
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCheckType:
      type: object
      properties:
        disabled:
          type: array
          description: The types of vulnerability checks to disable during a scan.
          items:
            type: string
        enabled:
          type: array
          description: The types of vulnerability checks to enable during a scan.
          items:
            type: string
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCvss:
      type: object
      properties:
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        v2:
          $ref: '#/components/schemas/VulnerabilityCvssV2'
        v3:
          $ref: '#/components/schemas/VulnerabilityCvssV3'
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCvssV2:
      type: object
      properties:
        accessComplexity:
          type: string
          description: |-
            Access Complexity (AC) component which measures the complexity of the attack required to exploit the vulnerability once an attacker has gained access to the target system.
            | Access Complexity       | Description                                                              |
            | ----------------------- | ------------------------------------------------------------------------ |
            | High (`"H"`)            | Specialized access conditions exist.                                     |
            | Medium (`"M"`)          | The access conditions are somewhat specialized.                          |
            | Low (`"L"`)             | Specialized access conditions or extenuating circumstances do not exist. |
          example: M
          enum:
            - L
            - M
            - H
        accessVector:
          type: string
          description: |
            Access Vector (Av) component which reflects how the vulnerability is exploited.
            | Access Vector              | Description |
            | -------------------------- | ----------- |
            | Local (`"L"`)              | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |
            | Adjacent Network (`"A"`)   | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |
            | Network (`"N"`)            | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed "remotely exploitable". |
          example: L
          enum:
            - L
            - A
            - N
        authentication:
          type: string
          description: |-
            Authentication (Au) component which measures the number of times an attacker must authenticate to a target in order to exploit a vulnerability.
            | Authentication       | Description |
            | -------------------- | ----------- |
            | Multiple (`"M"`)     | Exploiting the vulnerability requires that the attacker authenticate two or more times, even if the same credentials are used each time. |
            | Single (`"S"`)       | The vulnerability requires an attacker to be logged into the system.                                                                     |
            | None (`"N"`)         | Authentication is not required to exploit the vulnerability.                                                                             |
          example: N
          enum:
            - N
            - S
            - M
        availabilityImpact:
          type: string
          description: |-
            Availability Impact (A) component which measures the impact to availability of a successfully exploited vulnerability.
            | Availability Impact        | Description  |
            | -------------------------- | ------------ |
            | None (`"N"`)               | There is no impact to the availability of the system. |
            | Partial (`"P"`)            | There is reduced performance or interruptions in resource availability. |
            | Complete (`"C"`)           | There is a total shutdown of the affected resource. The attacker can render the resource completely unavailable. |
          example: P
          enum:
            - N
            - P
            - C
        confidentialityImpact:
          type: string
          description: |-
            Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
            | Confidentiality Impact     | Description  |
            | -------------------------- | ------------ |
            | None (`"N"`)               | There is no impact to the confidentiality of the system. |
            | Partial (`"P"`)            | There is considerable informational disclosure. Access to some system files is possible, but the attacker does not have control over what is obtained, or the scope of the loss is constrained. |
            | Complete (`"C"`)           | There is total information disclosure, resulting in all system files being revealed. The attacker is able to read all of the system's data (memory, files, etc.) |
          example: P
          enum:
            - N
            - P
            - C
        exploitScore:
          type: number
          description: The CVSS exploit score.
          format: double
          example: 3.3926
        impactScore:
          type: number
          description: The CVSS impact score.
          format: double
          example: 6.443
        integrityImpact:
          type: string
          description: |-
            Integrity Impact (I) component measures the impact to integrity of a successfully exploited vulnerability.
            | Integrity Impact           | Description  |
            | -------------------------- | ------------ |
            | None (`"N"`)               | There is no impact to the integrity of the system. |
            | Partial (`"P"`)            | Modification of some system files or information is possible, but the attacker does not have control over what can be modified, or the scope of what the attacker can affect is limited. |
            | Complete (`"C"`)           | There is a total compromise of system integrity. There is a complete loss of system protection, resulting in the entire system being compromised. The attacker is able to modify any files on the target system. |
          example: P
          enum:
            - N
            - P
            - C
        score:
          type: number
          description: The CVSS score, which ranges from 0-10.
          format: double
          example: 4.4
        vector:
          type: string
          description: The <a target="_blank" href="https://www.first.org/cvss/v2/guide">CVSS
            v2</a> vector.
          example: AV:L/AC:M/Au:N/C:P/I:P/A:P
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityCvssV3:
      type: object
      properties:
        attackComplexity:
          type: string
          description: |-
            Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
            | Access Complexity      | Description                                                              |
            | ---------------------- | ------------------------------------------------------------------------ |
            | Low (`"L"`)            | Specialized access conditions or extenuating circumstances do not exist. |
            | High (`"H"`)           | A successful attack depends on conditions beyond the attacker's control. |
          example: H
          enum:
            - L
            - H
        attackVector:
          type: string
          description: |
            Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
            | Access Vector          | Description                                                              |
            | ---------------------- | ------------------------------------------------------------------------ |
            | Local (`"L"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |
            | Adjacent (`"A"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |
            | Network (`"N"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed "remotely exploitable". |
          example: N
          enum:
            - N
            - A
            - L
            - P
        availabilityImpact:
          type: string
          description: |-
            Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
            | Availability Impact        | Description  |
            | -------------------------- | ------------ |
            | High (`"H"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |
            | Low (`"L"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |
            | None (`"N"`)               | There is no impact to availability within the impacted component. |
          example: H
          enum:
            - N
            - L
            - H
        confidentialityImpact:
          type: string
          description: |-
            Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
            | Confidentiality Impact     | Description  |
            | -------------------------- | ------------ |
            | High (`"H"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |
            | Low (`"L"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |
            | None (`"N"`)               | There is no loss of confidentiality within the impacted component. |
          example: H
          enum:
            - N
            - L
            - H
        exploitScore:
          type: number
          description: The CVSS impact score.
          format: double
          example: 1.6201
        impactScore:
          type: number
          description: The CVSS exploit score.
          format: double
          example: 5.8731
        integrityImpact:
          type: string
          description: |-
            Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.
            | Integrity Impact    | Description  |
            | ------------------- | ------------ |
            | High (`"H"`)        | There is a total loss of integrity, or a complete loss of protection. |
            | Low (`"L"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |
            | None (`"N"`)        | There is no loss of integrity within the impacted component. |
          example: H
          enum:
            - N
            - L
            - H
        privilegeRequired:
          type: string
          description: |-
            Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.
            | Privileges Required (PR)     | Description                                                              |
            | ---------------------------- | ------------------------------------------------------------------------ |
            | None (`"N"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |
            | Low (`"L"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |
            | High (`"H"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |
          example: N
          enum:
            - N
            - L
            - H
        scope:
          type: string
          description: |-
            Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.
            | Scope (S)            | Description                                                              |
            | -------------------- | ------------------------------------------------------------------------ |
            | Unchanged (`"U"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |
            | Changed (`"C"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |
          example: U
          enum:
            - U
            - C
        score:
          type: number
          description: The CVSS score, which ranges from 0-10.
          format: double
          example: 7.5
        userInteraction:
          type: string
          description: |-
            User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.
            | User Interaction (UI)        | Description                                                               |
            | ---------------------------- | ------------------------------------------------------------------------- |
            | None (`"N"`)                 | The vulnerable system can be exploited without interaction from any user. |
            | Required (`"R"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |
          example: R
          enum:
            - N
            - R
        vector:
          type: string
          description: The <a target="_blank" href="https://www.first.org/cvss/specification-document">CVSS
            v3</a> vector.
          example: CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityEvents:
      required:
        - confirmedVulnerabilities
        - potentialVulnerabilities
        - unconfirmedVulnerabilities
        - vulnerabilitySeverity
      type: object
      properties:
        confirmedVulnerabilities:
          type: boolean
          description: Generates an alert for vulnerability results of confirmed vulnerabilties.
            A vulnerability is "confirmed" when asset-specific vulnerability tests,
            such as exploits, produce positive results. Default value is `true`.
          example: false
        potentialVulnerabilities:
          type: boolean
          description: Generates an alert for vulnerability results of potential vulnerabilties.
            A vulnerability is "potential" if a check for a potential vulnerabilty
            is positive. Default value is `true`.
          example: false
        unconfirmedVulnerabilities:
          type: boolean
          description: Generates an alert for vulnerability results of unconfirmed
            vulnerabilties. A vulnerability is "unconfirmed" when a version of a scanned
            service or software is known to be vulnerable, but there is no positive
            verification. Default value is `true`.
          example: false
        vulnerabilitySeverity:
          type: string
          description: Generates an alert for vulnerability results of the selected
            vulnerability severity. Default value is `"any_severity"`.
          example: ""
          enum:
            - any_severity
            - severe_and_critical
            - only_critical
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityException:
      type: object
      properties:
        expires:
          type: string
          description: The date and time the vulnerability exception is set to expire.
          example: ""
        id:
          type: integer
          description: The identifier of the vulnerability exception.
          format: int32
          readOnly: true
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        review:
          $ref: '#/components/schemas/Review'
        scope:
          $ref: '#/components/schemas/ExceptionScope'
        state:
          type: string
          description: 'The state of the vulnerability exception. One of: `"Deleted"`,
            `"Expired"`, `"Approved"`, `"Rejected"`, `"Under Review".'
          example: ""
        submit:
          $ref: '#/components/schemas/Submission'
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityFinding:
      required:
        - id
        - instances
        - status
      type: object
      properties:
        id:
          type: string
          description: The identifier of the vulnerability.
          example: ssh-openssh-x11uselocalhost-x11-forwarding-session-hijack
        instances:
          type: integer
          description: The number of vulnerable occurrences of the vulnerability.
            This does not include `invulnerable` instances.
          format: int32
          example: 1
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        results:
          type: array
          description: The vulnerability check results for the finding. Multiple instances
            may be present if one or more checks fired, or a check has multiple independent
            results.
          items:
            $ref: '#/components/schemas/AssessmentResult'
        status:
          type: string
          description: The status of the finding.
          example: vulnerable
          enum:
            - vulnerable
            - invulnerable
            - no-results
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityReference:
      type: object
      properties:
        advisory:
          $ref: '#/components/schemas/AdvisoryLink'
        id:
          type: integer
          description: The identifier of the vulnerability reference.
          format: int32
          example: 157986
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        reference:
          type: string
          description: 'The contents of the reference, typically an identifier or
            hyperlink. Example: `"CVE-2011-0762"`'
          example: "4041689"
        source:
          type: string
          description: 'The originating source of the reference. Examples: `"url"`,
            `"cve"`, `"bid"`, `"redhat"`'
          example: mskb
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityValidationResource:
      type: object
      properties:
        date:
          type: string
          description: The date and time the vulnerability was validated, in the ISO8601
            format.
          example: 2017-12-21T04:54:32.314Z
        id:
          type: integer
          description: The identifier of the vulnerability validation.
          format: int64
          readOnly: true
          example: 46
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        source:
          $ref: '#/components/schemas/VulnerabilityValidationSource'
      description: ""
      discriminator:
        propertyName: ""
    VulnerabilityValidationSource:
      type: object
      properties:
        key:
          type: string
          description: The identifier or name of the exploit that was used to validate
            the vulnerability.
          example: exploit/windows/iis/iis_webdav_scstoragepathfromurl
        name:
          type: string
          description: The name of the source used to validate the vulnerability.
          example: metasploit
          enum:
            - metasploit
            - other
      description: ""
      discriminator:
        propertyName: ""
    WebApplication:
      type: object
      properties:
        id:
          type: integer
          description: The identifier of the web application.
          format: int64
          example: 30712
        pages:
          type: array
          description: The pages discovered on the web application.
          items:
            $ref: '#/components/schemas/WebPage'
        root:
          type: string
          description: The web root of the web application.
          example: /
        virtualHost:
          type: string
          description: The virtual host of the web application.
          example: 102.89.22.253
      description: ""
      discriminator:
        propertyName: ""
    WebFormAuthentication:
      type: object
      properties:
        baseURL:
          type: string
          description: 'The base URL is the main address from which all paths in the
            target Web site begin. Includes the protocol. Example: http://acme.com.'
          example: ""
        enabled:
          type: boolean
          description: Flag indicating whether the HTML form web authentication is
            enabled for the site's scans.
          example: false
        id:
          type: integer
          description: The identifier of the HTML form web authentication.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        loginRegularExpression:
          type: string
          description: The regular expression matches the message that the Web server
            returns if the login attempt fails.
          example: ""
        loginURL:
          type: string
          description: 'The login page URL contains form for logging on. Include the
            base URL. Example: http://acme.com/login.'
          example: ""
        name:
          type: string
          description: The HTML form web authentication name.
          example: ""
        service:
          type: string
          description: Value indicating whether this web authentication  configuration
            is for HTML form authentication or HTTP header authentication.
          example: ""
          enum:
            - html-form
            - http-header
      description: ""
      discriminator:
        propertyName: ""
    WebHeaderAuthentication:
      type: object
      properties:
        baseURL:
          type: string
          description: 'The base URL is the main address from which all paths in the
            target Web site begin. Includes the protocol. Example: http://acme.com.'
          example: ""
        enabled:
          type: boolean
          description: Flag indicating whether the HTTP header web authentication
            is enabled for the site's scans.
          example: false
        headers:
          type: object
          additionalProperties:
            type: string
          description: 'A map of HTTP headers the scan engine will use when negotiating
            with the Web server for an "authenticated" page. Make sure that the session
            ID is valid between the time you save this ID for the site and when you
            start the scan. Note: This property is not returned in responses for security.'
          example: ""
        id:
          type: integer
          description: The identifier of the HTTP header web authentication.
          format: int32
        links:
          type: array
          description: Hypermedia links to corresponding or related resources.
          readOnly: true
          items:
            $ref: '#/components/schemas/Link'
        loginRegularExpression:
          type: string
          description: The regular expression matches the message that the Web server
            returns if the login attempt fails.
          example: ""
        name:
          type: string
          description: The HTTP header web authentication name.
          example: ""
        service:
          type: string
          description: Value indicating whether this web authentication  configuration
            is for HTML form authentication or HTTP header authentication.
          example: ""
          enum:
            - html-form
            - http-header
      description: ""
      discriminator:
        propertyName: ""
    WebPage:
      type: object
      properties:
        linkType:
          type: string
          description: The type of link used to traverse or detect the page.
          example: html-ref
          enum:
            - seed
            - html-ref
            - robots
            - js-string
            - query-param
            - pdf
            - css
            - implied-dir
            - rss
            - redirection
            - sitemap
            - backup
            - vck-rewrite
            - non-ref-guess
            - soft-404
        path:
          type: string
          description: The path to the page (URI).
          example: /docs/config/index.html
        response:
          type: integer
          description: The HTTP response code observed with retrieving the page.
          format: int32
          example: 200
      description: ""
      discriminator:
        propertyName: ""
    WebSettings:
      type: object
      properties:
        maxThreads:
          type: integer
          description: The maximum number of request handling threads.
          format: int32
          example: 100
        minThreads:
          type: integer
          description: The minimum number of request handling threads.
          format: int32
          example: 10
        port:
          type: integer
          description: The port the web server is accepting requests.
          format: int32
          example: 3780
        sessionTimeout:
          type: string
          description: 'Session timeout duration, in ISO 8601 format. For example:
            `"PT10M"`.'
          example: PT10M
      description: ""
      discriminator:
        propertyName: ""
  securitySchemes:
    Basic:
      type: http
      scheme: basic
