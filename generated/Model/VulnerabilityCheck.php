<?php

namespace Rapid7\InsightVM\Api\Model;

class VulnerabilityCheck
{
    /**
     * The identifier of the vulnerability check.
     *
     * @var string
     */
    protected $id;
    /**
     * Hypermedia links to corresponding or related resources.
     *
     * @var Link[]
     */
    protected $links;
    /**
     * The name of the plugin (module) the check belongs to.
     *
     * @var string
     */
    protected $plugin;
    /**
     * Whether the check results in potential vulnerabilities.
     *
     * @var bool
     */
    protected $potential;
    /**
     * Whether the check requires credentials in order to run.
     *
     * @var bool
     */
    protected $requiresCredentials;
    /**
     * Whether the checked is deemed to be "safe" to run. A safe check is one that can be run without negatively impacting the host it is run against.
     *
     * @var bool
     */
    protected $safe;
    /**
     * Whether the check operates against a service, or false it it is a local check.
     *
     * @var bool
     */
    protected $service;
    /**
     * Whether the check may only register a result once during a scan of host. Otherwise, the tests in the check can run multiple times, possibly registering multiple results.
     *
     * @var bool
     */
    protected $unique;
    /**
     * The identifier of the vulnerability the check results in.
     *
     * @var string
     */
    protected $vulnerability;
    /**
     * The identifier of the vulnerability check.
     *
     * @return string
     */
    public function getId() : string
    {
        return $this->id;
    }
    /**
     * The identifier of the vulnerability check.
     *
     * @param string $id
     *
     * @return self
     */
    public function setId(string $id) : self
    {
        $this->id = $id;
        return $this;
    }
    /**
     * Hypermedia links to corresponding or related resources.
     *
     * @return Link[]
     */
    public function getLinks() : array
    {
        return $this->links;
    }
    /**
     * Hypermedia links to corresponding or related resources.
     *
     * @param Link[] $links
     *
     * @return self
     */
    public function setLinks(array $links) : self
    {
        $this->links = $links;
        return $this;
    }
    /**
     * The name of the plugin (module) the check belongs to.
     *
     * @return string
     */
    public function getPlugin() : string
    {
        return $this->plugin;
    }
    /**
     * The name of the plugin (module) the check belongs to.
     *
     * @param string $plugin
     *
     * @return self
     */
    public function setPlugin(string $plugin) : self
    {
        $this->plugin = $plugin;
        return $this;
    }
    /**
     * Whether the check results in potential vulnerabilities.
     *
     * @return bool
     */
    public function getPotential() : bool
    {
        return $this->potential;
    }
    /**
     * Whether the check results in potential vulnerabilities.
     *
     * @param bool $potential
     *
     * @return self
     */
    public function setPotential(bool $potential) : self
    {
        $this->potential = $potential;
        return $this;
    }
    /**
     * Whether the check requires credentials in order to run.
     *
     * @return bool
     */
    public function getRequiresCredentials() : bool
    {
        return $this->requiresCredentials;
    }
    /**
     * Whether the check requires credentials in order to run.
     *
     * @param bool $requiresCredentials
     *
     * @return self
     */
    public function setRequiresCredentials(bool $requiresCredentials) : self
    {
        $this->requiresCredentials = $requiresCredentials;
        return $this;
    }
    /**
     * Whether the checked is deemed to be "safe" to run. A safe check is one that can be run without negatively impacting the host it is run against.
     *
     * @return bool
     */
    public function getSafe() : bool
    {
        return $this->safe;
    }
    /**
     * Whether the checked is deemed to be "safe" to run. A safe check is one that can be run without negatively impacting the host it is run against.
     *
     * @param bool $safe
     *
     * @return self
     */
    public function setSafe(bool $safe) : self
    {
        $this->safe = $safe;
        return $this;
    }
    /**
     * Whether the check operates against a service, or false it it is a local check.
     *
     * @return bool
     */
    public function getService() : bool
    {
        return $this->service;
    }
    /**
     * Whether the check operates against a service, or false it it is a local check.
     *
     * @param bool $service
     *
     * @return self
     */
    public function setService(bool $service) : self
    {
        $this->service = $service;
        return $this;
    }
    /**
     * Whether the check may only register a result once during a scan of host. Otherwise, the tests in the check can run multiple times, possibly registering multiple results.
     *
     * @return bool
     */
    public function getUnique() : bool
    {
        return $this->unique;
    }
    /**
     * Whether the check may only register a result once during a scan of host. Otherwise, the tests in the check can run multiple times, possibly registering multiple results.
     *
     * @param bool $unique
     *
     * @return self
     */
    public function setUnique(bool $unique) : self
    {
        $this->unique = $unique;
        return $this;
    }
    /**
     * The identifier of the vulnerability the check results in.
     *
     * @return string
     */
    public function getVulnerability() : string
    {
        return $this->vulnerability;
    }
    /**
     * The identifier of the vulnerability the check results in.
     *
     * @param string $vulnerability
     *
     * @return self
     */
    public function setVulnerability(string $vulnerability) : self
    {
        $this->vulnerability = $vulnerability;
        return $this;
    }
}