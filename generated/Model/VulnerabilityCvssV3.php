<?php

namespace Rapid7\InsightVM\Api\Model;

class VulnerabilityCvssV3
{
    /**
    * Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
    | Access Complexity      | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Low (`"L"`)            | Specialized access conditions or extenuating circumstances do not exist. |
    | High (`"H"`)           | A successful attack depends on conditions beyond the attacker's control. |
    *
    * @var string
    */
    protected $attackComplexity;
    /**
    * Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
    | Access Vector          | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Local (`"L"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |
    | Adjacent (`"A"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |
    | Network (`"N"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed "remotely exploitable". |
    
    *
    * @var string
    */
    protected $attackVector;
    /**
    * Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
    | Availability Impact        | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |
    | Low (`"L"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |
    | None (`"N"`)               | There is no impact to availability within the impacted component. |
    *
    * @var string
    */
    protected $availabilityImpact;
    /**
    * Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
    | Confidentiality Impact     | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |
    | Low (`"L"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |
    | None (`"N"`)               | There is no loss of confidentiality within the impacted component. |
    *
    * @var string
    */
    protected $confidentialityImpact;
    /**
     * The CVSS impact score.
     *
     * @var float
     */
    protected $exploitScore;
    /**
     * The CVSS exploit score.
     *
     * @var float
     */
    protected $impactScore;
    /**
    * Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.
    | Integrity Impact    | Description  |
    | ------------------- | ------------ |
    | High (`"H"`)        | There is a total loss of integrity, or a complete loss of protection. |
    | Low (`"L"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |
    | None (`"N"`)        | There is no loss of integrity within the impacted component. |
    *
    * @var string
    */
    protected $integrityImpact;
    /**
    * Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.
    | Privileges Required (PR)     | Description                                                              |
    | ---------------------------- | ------------------------------------------------------------------------ |
    | None (`"N"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |
    | Low (`"L"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |
    | High (`"H"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |
    *
    * @var string
    */
    protected $privilegeRequired;
    /**
    * Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.
    | Scope (S)            | Description                                                              |
    | -------------------- | ------------------------------------------------------------------------ |
    | Unchanged (`"U"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |
    | Changed (`"C"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |
    *
    * @var string
    */
    protected $scope;
    /**
     * The CVSS score, which ranges from 0-10.
     *
     * @var float
     */
    protected $score;
    /**
    * User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.
    | User Interaction (UI)        | Description                                                               |
    | ---------------------------- | ------------------------------------------------------------------------- |
    | None (`"N"`)                 | The vulnerable system can be exploited without interaction from any user. |
    | Required (`"R"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |
    *
    * @var string
    */
    protected $userInteraction;
    /**
     * The <a target="_blank" href="https://www.first.org/cvss/specification-document">CVSS v3</a> vector.
     *
     * @var string
     */
    protected $vector;
    /**
    * Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
    | Access Complexity      | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Low (`"L"`)            | Specialized access conditions or extenuating circumstances do not exist. |
    | High (`"H"`)           | A successful attack depends on conditions beyond the attacker's control. |
    *
    * @return string
    */
    public function getAttackComplexity() : string
    {
        return $this->attackComplexity;
    }
    /**
    * Access Complexity (AC) component with measures the conditions beyond the attacker's control that must exist in order to exploit the vulnerability.
    | Access Complexity      | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Low (`"L"`)            | Specialized access conditions or extenuating circumstances do not exist. |
    | High (`"H"`)           | A successful attack depends on conditions beyond the attacker's control. |
    *
    * @param string $attackComplexity
    *
    * @return self
    */
    public function setAttackComplexity(string $attackComplexity) : self
    {
        $this->attackComplexity = $attackComplexity;
        return $this;
    }
    /**
    * Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
    | Access Vector          | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Local (`"L"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |
    | Adjacent (`"A"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |
    | Network (`"N"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed "remotely exploitable". |
    
    *
    * @return string
    */
    public function getAttackVector() : string
    {
        return $this->attackVector;
    }
    /**
    * Attack Vector (AV) component which measures context by which vulnerability exploitation is possible.
    | Access Vector          | Description                                                              |
    | ---------------------- | ------------------------------------------------------------------------ |
    | Local (`"L"`)          | A vulnerability exploitable with only local access requires the attacker to have either physical access to the vulnerable system or a local (shell) account. |
    | Adjacent (`"A"`)       | A vulnerability exploitable with adjacent network access requires the attacker to have access to either the broadcast or collision domain of the vulnerable software. |
    | Network (`"N"`)        | A vulnerability exploitable with network access means the vulnerable software is bound to the network stack and the attacker does not require local network access or local access. Such a vulnerability is often termed "remotely exploitable". |
    
    *
    * @param string $attackVector
    *
    * @return self
    */
    public function setAttackVector(string $attackVector) : self
    {
        $this->attackVector = $attackVector;
        return $this;
    }
    /**
    * Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
    | Availability Impact        | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |
    | Low (`"L"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |
    | None (`"N"`)               | There is no impact to availability within the impacted component. |
    *
    * @return string
    */
    public function getAvailabilityImpact() : string
    {
        return $this->availabilityImpact;
    }
    /**
    * Availability Impact (A) measures the impact to the availability of the impacted component resulting from a successfully exploited vulnerability.
    | Availability Impact        | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of availability, resulting in the attacker being able to fully deny access to resources in the impacted component; this loss is either sustained (while the attacker continues to deliver the attack) or persistent (the condition persists even after the attack has completed). |
    | Low (`"L"`)                | There is reduced performance or interruptions in resource availability. Even if repeated exploitation of the vulnerability is possible, the attacker does not have the ability to completely deny service to legitimate users. |
    | None (`"N"`)               | There is no impact to availability within the impacted component. |
    *
    * @param string $availabilityImpact
    *
    * @return self
    */
    public function setAvailabilityImpact(string $availabilityImpact) : self
    {
        $this->availabilityImpact = $availabilityImpact;
        return $this;
    }
    /**
    * Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
    | Confidentiality Impact     | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |
    | Low (`"L"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |
    | None (`"N"`)               | There is no loss of confidentiality within the impacted component. |
    *
    * @return string
    */
    public function getConfidentialityImpact() : string
    {
        return $this->confidentialityImpact;
    }
    /**
    * Confidentiality Impact (C) component which measures the impact on confidentiality of a successfully exploited vulnerability.
    | Confidentiality Impact     | Description  |
    | -------------------------- | ------------ |
    | High (`"H"`)               | There is total loss of confidentiality, resulting in all resources within the impacted component being divulged to the attacker. |
    | Low (`"L"`)                | There is some loss of confidentiality. Access to some restricted information is obtained, but the attacker does not have control over what information is obtained, or the amount or kind of loss is constrained. |
    | None (`"N"`)               | There is no loss of confidentiality within the impacted component. |
    *
    * @param string $confidentialityImpact
    *
    * @return self
    */
    public function setConfidentialityImpact(string $confidentialityImpact) : self
    {
        $this->confidentialityImpact = $confidentialityImpact;
        return $this;
    }
    /**
     * The CVSS impact score.
     *
     * @return float
     */
    public function getExploitScore() : float
    {
        return $this->exploitScore;
    }
    /**
     * The CVSS impact score.
     *
     * @param float $exploitScore
     *
     * @return self
     */
    public function setExploitScore(float $exploitScore) : self
    {
        $this->exploitScore = $exploitScore;
        return $this;
    }
    /**
     * The CVSS exploit score.
     *
     * @return float
     */
    public function getImpactScore() : float
    {
        return $this->impactScore;
    }
    /**
     * The CVSS exploit score.
     *
     * @param float $impactScore
     *
     * @return self
     */
    public function setImpactScore(float $impactScore) : self
    {
        $this->impactScore = $impactScore;
        return $this;
    }
    /**
    * Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.
    | Integrity Impact    | Description  |
    | ------------------- | ------------ |
    | High (`"H"`)        | There is a total loss of integrity, or a complete loss of protection. |
    | Low (`"L"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |
    | None (`"N"`)        | There is no loss of integrity within the impacted component. |
    *
    * @return string
    */
    public function getIntegrityImpact() : string
    {
        return $this->integrityImpact;
    }
    /**
    * Integrity Impact (I) measures the impact to integrity of a successfully exploited vulnerability. Integrity refers to the trustworthiness and veracity of information.
    | Integrity Impact    | Description  |
    | ------------------- | ------------ |
    | High (`"H"`)        | There is a total loss of integrity, or a complete loss of protection. |
    | Low (`"L"`)         | Modification of data is possible, but the attacker does not have control over the consequence of a modification, or the amount of modification is constrained. |
    | None (`"N"`)        | There is no loss of integrity within the impacted component. |
    *
    * @param string $integrityImpact
    *
    * @return self
    */
    public function setIntegrityImpact(string $integrityImpact) : self
    {
        $this->integrityImpact = $integrityImpact;
        return $this;
    }
    /**
    * Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.
    | Privileges Required (PR)     | Description                                                              |
    | ---------------------------- | ------------------------------------------------------------------------ |
    | None (`"N"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |
    | Low (`"L"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |
    | High (`"H"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |
    *
    * @return string
    */
    public function getPrivilegeRequired() : string
    {
        return $this->privilegeRequired;
    }
    /**
    * Privileges Required (PR) measures the level of privileges an attacker must possess before successfully exploiting the vulnerability.
    | Privileges Required (PR)     | Description                                                              |
    | ---------------------------- | ------------------------------------------------------------------------ |
    | None (`"N"`)                 | The attacker is unauthorized prior to attack, and therefore does not require any access to settings or files to carry out an attack. |
    | Low (`"L"`)                  | The attacker is authorized with (i.e. requires) privileges that provide basic user capabilities that could normally affect only settings and files owned by a user. |
    | High (`"H"`)                 | The attacker is authorized with (i.e. requires) privileges that provide significant (e.g. administrative) control over the vulnerable component that could affect component-wide settings and files. |
    *
    * @param string $privilegeRequired
    *
    * @return self
    */
    public function setPrivilegeRequired(string $privilegeRequired) : self
    {
        $this->privilegeRequired = $privilegeRequired;
        return $this;
    }
    /**
    * Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.
    | Scope (S)            | Description                                                              |
    | -------------------- | ------------------------------------------------------------------------ |
    | Unchanged (`"U"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |
    | Changed (`"C"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |
    *
    * @return string
    */
    public function getScope() : string
    {
        return $this->scope;
    }
    /**
    * Scope (S) measures the collection of privileges defined by a computing authority (e.g. an application, an operating system, or a sandbox environment) when granting access to computing resources (e.g. files, CPU, memory, etc). These privileges are assigned based on some method of identification and authorization.
    | Scope (S)            | Description                                                              |
    | -------------------- | ------------------------------------------------------------------------ |
    | Unchanged (`"U"`)    | An exploited vulnerability can only affect resources managed by the same authority. In this case the vulnerable component and the impacted component are the same. |
    | Changed (`"C"`)      | An exploited vulnerability can affect resources beyond the authorization privileges intended by the vulnerable component. In this case the vulnerable component and the impacted component are different. |
    *
    * @param string $scope
    *
    * @return self
    */
    public function setScope(string $scope) : self
    {
        $this->scope = $scope;
        return $this;
    }
    /**
     * The CVSS score, which ranges from 0-10.
     *
     * @return float
     */
    public function getScore() : float
    {
        return $this->score;
    }
    /**
     * The CVSS score, which ranges from 0-10.
     *
     * @param float $score
     *
     * @return self
     */
    public function setScore(float $score) : self
    {
        $this->score = $score;
        return $this;
    }
    /**
    * User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.
    | User Interaction (UI)        | Description                                                               |
    | ---------------------------- | ------------------------------------------------------------------------- |
    | None (`"N"`)                 | The vulnerable system can be exploited without interaction from any user. |
    | Required (`"R"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |
    *
    * @return string
    */
    public function getUserInteraction() : string
    {
        return $this->userInteraction;
    }
    /**
    * User Interaction (UI) measures the requirement for a user, other than the attacker, to participate in the successful compromise of the vulnerable component.
    | User Interaction (UI)        | Description                                                               |
    | ---------------------------- | ------------------------------------------------------------------------- |
    | None (`"N"`)                 | The vulnerable system can be exploited without interaction from any user. |
    | Required (`"R"`)             | Successful exploitation of this vulnerability requires a user to take some action before the vulnerability can be exploited. |
    *
    * @param string $userInteraction
    *
    * @return self
    */
    public function setUserInteraction(string $userInteraction) : self
    {
        $this->userInteraction = $userInteraction;
        return $this;
    }
    /**
     * The <a target="_blank" href="https://www.first.org/cvss/specification-document">CVSS v3</a> vector.
     *
     * @return string
     */
    public function getVector() : string
    {
        return $this->vector;
    }
    /**
     * The <a target="_blank" href="https://www.first.org/cvss/specification-document">CVSS v3</a> vector.
     *
     * @param string $vector
     *
     * @return self
     */
    public function setVector(string $vector) : self
    {
        $this->vector = $vector;
        return $this;
    }
}