<?php

namespace Rapid7\InsightVM\Api\Endpoint;

class GetVulnerabilityValidation extends \Rapid7\InsightVM\Api\Runtime\Client\BaseEndpoint implements \Rapid7\InsightVM\Api\Runtime\Client\Endpoint
{
    protected $id;
    protected $vulnerabilityId;
    protected $validationId;
    /**
     * Returns a vulnerability validation for a vulnerability on an asset. The asset must be currently vulnerable to the validated vulnerable for the validation to be returned.
     *
     * @param int $id The identifier of the asset.
     * @param string $vulnerabilityId The identifier of the vulnerability.
     * @param int $validationId The identifier of the vulnerability validation.
     */
    public function __construct(int $id, string $vulnerabilityId, int $validationId)
    {
        $this->id = $id;
        $this->vulnerabilityId = $vulnerabilityId;
        $this->validationId = $validationId;
    }
    use \Rapid7\InsightVM\Api\Runtime\Client\EndpointTrait;
    public function getMethod() : string
    {
        return 'GET';
    }
    public function getUri() : string
    {
        return str_replace(array('{id}', '{vulnerabilityId}', '{validationId}'), array($this->id, $this->vulnerabilityId, $this->validationId), '/api/3/assets/{id}/vulnerabilities/{vulnerabilityId}/validations/{validationId}');
    }
    public function getBody(\Symfony\Component\Serializer\SerializerInterface $serializer, $streamFactory = null) : array
    {
        return array(array(), null);
    }
    public function getExtraHeaders() : array
    {
        return array('Accept' => array('application/json'));
    }
    /**
     * {@inheritdoc}
     *
     * @throws \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationUnauthorizedException
     * @throws \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationNotFoundException
     * @throws \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationInternalServerErrorException
     * @throws \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationServiceUnavailableException
     *
     * @return null|\Rapid7\InsightVM\Api\Model\VulnerabilityValidationResource
     */
    protected function transformResponseBody(string $body, int $status, \Symfony\Component\Serializer\SerializerInterface $serializer, ?string $contentType = null)
    {
        if (is_null($contentType) === false && (200 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            return $serializer->deserialize($body, 'Rapid7\\InsightVM\\Api\\Model\\VulnerabilityValidationResource', 'json');
        }
        if (is_null($contentType) === false && (401 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationUnauthorizedException($serializer->deserialize($body, 'Rapid7\\InsightVM\\Api\\Model\\UnauthorizedError', 'json'));
        }
        if (is_null($contentType) === false && (404 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationNotFoundException($serializer->deserialize($body, 'Rapid7\\InsightVM\\Api\\Model\\NotFoundError', 'json'));
        }
        if (is_null($contentType) === false && (500 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationInternalServerErrorException($serializer->deserialize($body, 'Rapid7\\InsightVM\\Api\\Model\\InternalServerError', 'json'));
        }
        if (is_null($contentType) === false && (503 === $status && mb_strpos($contentType, 'application/json') !== false)) {
            throw new \Rapid7\InsightVM\Api\Exception\GetVulnerabilityValidationServiceUnavailableException($serializer->deserialize($body, 'Rapid7\\InsightVM\\Api\\Model\\ServiceUnavailableError', 'json'));
        }
    }
    public function getAuthenticationScopes() : array
    {
        return array('Basic');
    }
}