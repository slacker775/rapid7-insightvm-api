<?php

namespace Rapid7\InsightVM\Api\Normalizer;

use Jane\JsonSchemaRuntime\Reference;
use Rapid7\InsightVM\Api\Runtime\Normalizer\CheckArray;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
class VulnerabilityNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Rapid7\\InsightVM\\Api\\Model\\Vulnerability';
    }
    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Rapid7\\InsightVM\\Api\\Model\\Vulnerability';
    }
    public function denormalize($data, $class, $format = null, array $context = array())
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Rapid7\InsightVM\Api\Model\Vulnerability();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('added', $data)) {
            $object->setAdded(\DateTime::createFromFormat('Y-m-d', $data['added'])->setTime(0, 0, 0));
        }
        if (\array_key_exists('categories', $data)) {
            $values = array();
            foreach ($data['categories'] as $value) {
                $values[] = $value;
            }
            $object->setCategories($values);
        }
        if (\array_key_exists('cves', $data)) {
            $values_1 = array();
            foreach ($data['cves'] as $value_1) {
                $values_1[] = $value_1;
            }
            $object->setCves($values_1);
        }
        if (\array_key_exists('cvss', $data)) {
            $object->setCvss($this->denormalizer->denormalize($data['cvss'], 'Rapid7\\InsightVM\\Api\\Model\\VulnerabilityCvss', 'json', $context));
        }
        if (\array_key_exists('denialOfService', $data)) {
            $object->setDenialOfService($data['denialOfService']);
        }
        if (\array_key_exists('description', $data)) {
            $object->setDescription($this->denormalizer->denormalize($data['description'], 'Rapid7\\InsightVM\\Api\\Model\\ContentDescription', 'json', $context));
        }
        if (\array_key_exists('exploits', $data)) {
            $object->setExploits($data['exploits']);
        }
        if (\array_key_exists('id', $data)) {
            $object->setId($data['id']);
        }
        if (\array_key_exists('links', $data)) {
            $values_2 = array();
            foreach ($data['links'] as $value_2) {
                $values_2[] = $this->denormalizer->denormalize($value_2, 'Rapid7\\InsightVM\\Api\\Model\\Link', 'json', $context);
            }
            $object->setLinks($values_2);
        }
        if (\array_key_exists('malwareKits', $data)) {
            $object->setMalwareKits($data['malwareKits']);
        }
        if (\array_key_exists('modified', $data)) {
            $object->setModified(\DateTime::createFromFormat('Y-m-d', $data['modified'])->setTime(0, 0, 0));
        }
        if (\array_key_exists('pci', $data)) {
            $object->setPci($this->denormalizer->denormalize($data['pci'], 'Rapid7\\InsightVM\\Api\\Model\\PCI', 'json', $context));
        }
        if (\array_key_exists('published', $data)) {
            $object->setPublished(\DateTime::createFromFormat('Y-m-d', $data['published'])->setTime(0, 0, 0));
        }
        if (\array_key_exists('riskScore', $data)) {
            $object->setRiskScore($data['riskScore']);
        }
        if (\array_key_exists('severity', $data)) {
            $object->setSeverity($data['severity']);
        }
        if (\array_key_exists('severityScore', $data)) {
            $object->setSeverityScore($data['severityScore']);
        }
        if (\array_key_exists('title', $data)) {
            $object->setTitle($data['title']);
        }
        return $object;
    }
    public function normalize($object, $format = null, array $context = array())
    {
        $data = array();
        if (null !== $object->getAdded()) {
            $data['added'] = $object->getAdded()->format('Y-m-d');
        }
        if (null !== $object->getCategories()) {
            $values = array();
            foreach ($object->getCategories() as $value) {
                $values[] = $value;
            }
            $data['categories'] = $values;
        }
        if (null !== $object->getCves()) {
            $values_1 = array();
            foreach ($object->getCves() as $value_1) {
                $values_1[] = $value_1;
            }
            $data['cves'] = $values_1;
        }
        if (null !== $object->getCvss()) {
            $data['cvss'] = $this->normalizer->normalize($object->getCvss(), 'json', $context);
        }
        if (null !== $object->getDenialOfService()) {
            $data['denialOfService'] = $object->getDenialOfService();
        }
        if (null !== $object->getDescription()) {
            $data['description'] = $this->normalizer->normalize($object->getDescription(), 'json', $context);
        }
        if (null !== $object->getExploits()) {
            $data['exploits'] = $object->getExploits();
        }
        if (null !== $object->getId()) {
            $data['id'] = $object->getId();
        }
        if (null !== $object->getMalwareKits()) {
            $data['malwareKits'] = $object->getMalwareKits();
        }
        if (null !== $object->getModified()) {
            $data['modified'] = $object->getModified()->format('Y-m-d');
        }
        if (null !== $object->getPci()) {
            $data['pci'] = $this->normalizer->normalize($object->getPci(), 'json', $context);
        }
        if (null !== $object->getPublished()) {
            $data['published'] = $object->getPublished()->format('Y-m-d');
        }
        if (null !== $object->getRiskScore()) {
            $data['riskScore'] = $object->getRiskScore();
        }
        if (null !== $object->getSeverity()) {
            $data['severity'] = $object->getSeverity();
        }
        if (null !== $object->getSeverityScore()) {
            $data['severityScore'] = $object->getSeverityScore();
        }
        if (null !== $object->getTitle()) {
            $data['title'] = $object->getTitle();
        }
        return $data;
    }
}