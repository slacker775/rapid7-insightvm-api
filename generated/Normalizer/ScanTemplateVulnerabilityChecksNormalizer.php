<?php

namespace Rapid7\InsightVM\Api\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Rapid7\InsightVM\Api\Runtime\Normalizer\CheckArray;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
class ScanTemplateVulnerabilityChecksNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Rapid7\\InsightVM\\Api\\Model\\ScanTemplateVulnerabilityChecks';
    }
    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Rapid7\\InsightVM\\Api\\Model\\ScanTemplateVulnerabilityChecks';
    }
    public function denormalize($data, $class, $format = null, array $context = array())
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Rapid7\InsightVM\Api\Model\ScanTemplateVulnerabilityChecks();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('categories', $data)) {
            $object->setCategories($this->denormalizer->denormalize($data['categories'], 'Rapid7\\InsightVM\\Api\\Model\\ScanTemplateVulnerabilityCheckCategories', 'json', $context));
        }
        if (\array_key_exists('correlate', $data)) {
            $object->setCorrelate($data['correlate']);
        }
        if (\array_key_exists('individual', $data)) {
            $object->setIndividual($this->denormalizer->denormalize($data['individual'], 'Rapid7\\InsightVM\\Api\\Model\\ScanTemplateVulnerabilityCheckIndividual', 'json', $context));
        }
        if (\array_key_exists('links', $data)) {
            $values = array();
            foreach ($data['links'] as $value) {
                $values[] = $this->denormalizer->denormalize($value, 'Rapid7\\InsightVM\\Api\\Model\\Link', 'json', $context);
            }
            $object->setLinks($values);
        }
        if (\array_key_exists('potential', $data)) {
            $object->setPotential($data['potential']);
        }
        if (\array_key_exists('types', $data)) {
            $object->setTypes($this->denormalizer->denormalize($data['types'], 'Rapid7\\InsightVM\\Api\\Model\\VulnerabilityCheckType', 'json', $context));
        }
        if (\array_key_exists('unsafe', $data)) {
            $object->setUnsafe($data['unsafe']);
        }
        return $object;
    }
    public function normalize($object, $format = null, array $context = array())
    {
        $data = array();
        if (null !== $object->getCategories()) {
            $data['categories'] = $this->normalizer->normalize($object->getCategories(), 'json', $context);
        }
        if (null !== $object->getCorrelate()) {
            $data['correlate'] = $object->getCorrelate();
        }
        if (null !== $object->getIndividual()) {
            $data['individual'] = $this->normalizer->normalize($object->getIndividual(), 'json', $context);
        }
        if (null !== $object->getPotential()) {
            $data['potential'] = $object->getPotential();
        }
        if (null !== $object->getTypes()) {
            $data['types'] = $this->normalizer->normalize($object->getTypes(), 'json', $context);
        }
        if (null !== $object->getUnsafe()) {
            $data['unsafe'] = $object->getUnsafe();
        }
        return $data;
    }
}