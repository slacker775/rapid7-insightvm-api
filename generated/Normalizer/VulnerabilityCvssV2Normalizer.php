<?php

namespace Rapid7\InsightVM\Api\Normalizer;

use Jane\Component\JsonSchemaRuntime\Reference;
use Rapid7\InsightVM\Api\Runtime\Normalizer\CheckArray;
use Symfony\Component\Serializer\Exception\InvalidArgumentException;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;
class VulnerabilityCvssV2Normalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    public function supportsDenormalization($data, $type, $format = null)
    {
        return $type === 'Rapid7\\InsightVM\\Api\\Model\\VulnerabilityCvssV2';
    }
    public function supportsNormalization($data, $format = null)
    {
        return is_object($data) && get_class($data) === 'Rapid7\\InsightVM\\Api\\Model\\VulnerabilityCvssV2';
    }
    public function denormalize($data, $class, $format = null, array $context = array())
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Rapid7\InsightVM\Api\Model\VulnerabilityCvssV2();
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('accessComplexity', $data)) {
            $object->setAccessComplexity($data['accessComplexity']);
        }
        if (\array_key_exists('accessVector', $data)) {
            $object->setAccessVector($data['accessVector']);
        }
        if (\array_key_exists('authentication', $data)) {
            $object->setAuthentication($data['authentication']);
        }
        if (\array_key_exists('availabilityImpact', $data)) {
            $object->setAvailabilityImpact($data['availabilityImpact']);
        }
        if (\array_key_exists('confidentialityImpact', $data)) {
            $object->setConfidentialityImpact($data['confidentialityImpact']);
        }
        if (\array_key_exists('exploitScore', $data)) {
            $object->setExploitScore($data['exploitScore']);
        }
        if (\array_key_exists('impactScore', $data)) {
            $object->setImpactScore($data['impactScore']);
        }
        if (\array_key_exists('integrityImpact', $data)) {
            $object->setIntegrityImpact($data['integrityImpact']);
        }
        if (\array_key_exists('score', $data)) {
            $object->setScore($data['score']);
        }
        if (\array_key_exists('vector', $data)) {
            $object->setVector($data['vector']);
        }
        return $object;
    }
    public function normalize($object, $format = null, array $context = array())
    {
        $data = array();
        if (null !== $object->getAccessComplexity()) {
            $data['accessComplexity'] = $object->getAccessComplexity();
        }
        if (null !== $object->getAccessVector()) {
            $data['accessVector'] = $object->getAccessVector();
        }
        if (null !== $object->getAuthentication()) {
            $data['authentication'] = $object->getAuthentication();
        }
        if (null !== $object->getAvailabilityImpact()) {
            $data['availabilityImpact'] = $object->getAvailabilityImpact();
        }
        if (null !== $object->getConfidentialityImpact()) {
            $data['confidentialityImpact'] = $object->getConfidentialityImpact();
        }
        if (null !== $object->getExploitScore()) {
            $data['exploitScore'] = $object->getExploitScore();
        }
        if (null !== $object->getImpactScore()) {
            $data['impactScore'] = $object->getImpactScore();
        }
        if (null !== $object->getIntegrityImpact()) {
            $data['integrityImpact'] = $object->getIntegrityImpact();
        }
        if (null !== $object->getScore()) {
            $data['score'] = $object->getScore();
        }
        if (null !== $object->getVector()) {
            $data['vector'] = $object->getVector();
        }
        return $data;
    }
}